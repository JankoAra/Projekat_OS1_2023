GAS LISTING /tmp/cc40IiXt.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_Znwm
   9              	_Znwm:
  10              	.LFB31:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** #include "../lib/console.h"
   2:src/main.cpp  **** #include "../lib/hw.h"
   3:src/main.cpp  **** #include "../h/helper.hpp"
   4:src/main.cpp  **** #include "../h/Riscv.hpp"
   5:src/main.cpp  **** #include "../h/syscall_c.hpp"
   6:src/main.cpp  **** #include "../h/List.hpp"
   7:src/main.cpp  **** //#include "../h/MemoryAllocator.hpp"
   8:src/main.cpp  **** 
   9:src/main.cpp  **** extern "C" void interruptHandler();
  10:src/main.cpp  **** 
  11:src/main.cpp  **** //override globalnog new
  12:src/main.cpp  **** void* operator new(size_t size) {
  12              		.loc 1 12 33
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FF 		addi	sp,sp,-16
  16              		.cfi_def_cfa_offset 16
  17 0004 23341100 		sd	ra,8(sp)
  18 0008 23308100 		sd	s0,0(sp)
  19              		.cfi_offset 1, -8
  20              		.cfi_offset 8, -16
  21 000c 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  13:src/main.cpp  **** 	return mem_alloc(size);
  23              		.loc 1 13 2
  24              		.loc 1 13 18 is_stmt 0
  25 0010 97000000 		call	_Z9mem_allocm@plt
  25      E7800000 
  26              	.LVL1:
  14:src/main.cpp  **** }
  27              		.loc 1 14 1
  28 0018 83308100 		ld	ra,8(sp)
  29              		.cfi_restore 1
  30 001c 03340100 		ld	s0,0(sp)
  31              		.cfi_restore 8
  32              		.cfi_def_cfa 2, 16
  33 0020 13010101 		addi	sp,sp,16
  34              		.cfi_def_cfa_offset 0
  35 0024 67800000 		jr	ra
  36              		.cfi_endproc
  37              	.LFE31:
  39              		.align	2
  40              		.globl	_Znam
  42              	_Znam:
  43              	.LFB32:
  15:src/main.cpp  **** 
  16:src/main.cpp  **** void* operator new[](size_t size) {
GAS LISTING /tmp/cc40IiXt.s 			page 2


  44              		.loc 1 16 35 is_stmt 1
  45              		.cfi_startproc
  46              	.LVL2:
  47 0028 130101FF 		addi	sp,sp,-16
  48              		.cfi_def_cfa_offset 16
  49 002c 23341100 		sd	ra,8(sp)
  50 0030 23308100 		sd	s0,0(sp)
  51              		.cfi_offset 1, -8
  52              		.cfi_offset 8, -16
  53 0034 13040101 		addi	s0,sp,16
  54              		.cfi_def_cfa 8, 0
  17:src/main.cpp  **** 	return mem_alloc(size);
  55              		.loc 1 17 2
  56              		.loc 1 17 18 is_stmt 0
  57 0038 97000000 		call	_Z9mem_allocm@plt
  57      E7800000 
  58              	.LVL3:
  18:src/main.cpp  **** }
  59              		.loc 1 18 1
  60 0040 83308100 		ld	ra,8(sp)
  61              		.cfi_restore 1
  62 0044 03340100 		ld	s0,0(sp)
  63              		.cfi_restore 8
  64              		.cfi_def_cfa 2, 16
  65 0048 13010101 		addi	sp,sp,16
  66              		.cfi_def_cfa_offset 0
  67 004c 67800000 		jr	ra
  68              		.cfi_endproc
  69              	.LFE32:
  71              		.align	2
  72              		.globl	_ZdlPv
  74              	_ZdlPv:
  75              	.LFB33:
  19:src/main.cpp  **** 
  20:src/main.cpp  **** void operator delete(void* ptr)noexcept {
  76              		.loc 1 20 41 is_stmt 1
  77              		.cfi_startproc
  78              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  79              		.cfi_lsda 0x1b,.LLSDA33
  80              	.LVL4:
  81 0050 130101FF 		addi	sp,sp,-16
  82              		.cfi_def_cfa_offset 16
  83 0054 23341100 		sd	ra,8(sp)
  84 0058 23308100 		sd	s0,0(sp)
  85              		.cfi_offset 1, -8
  86              		.cfi_offset 8, -16
  87 005c 13040101 		addi	s0,sp,16
  88              		.cfi_def_cfa 8, 0
  21:src/main.cpp  **** mem_free(ptr);
  89              		.loc 1 21 1
  90              		.loc 1 21 9 is_stmt 0
  91 0060 97000000 		call	_Z8mem_freePv@plt
  91      E7800000 
  92              	.LVL5:
  22:src/main.cpp  **** }
  93              		.loc 1 22 1
  94 0068 83308100 		ld	ra,8(sp)
GAS LISTING /tmp/cc40IiXt.s 			page 3


  95              		.cfi_restore 1
  96 006c 03340100 		ld	s0,0(sp)
  97              		.cfi_restore 8
  98              		.cfi_def_cfa 2, 16
  99 0070 13010101 		addi	sp,sp,16
 100              		.cfi_def_cfa_offset 0
 101 0074 67800000 		jr	ra
 102              		.cfi_endproc
 103              	.LFE33:
 104              		.globl	__gxx_personality_v0
 105              		.section	.gcc_except_table,"a",@progbits
 106              	.LLSDA33:
 107 0000 FF       		.byte	0xff
 108 0001 FF       		.byte	0xff
 109 0002 03       		.byte	0x3
 110 0003 00       		.byte	0
 111              		.text
 113              		.align	2
 114              		.globl	_ZdaPv
 116              	_ZdaPv:
 117              	.LFB34:
  23:src/main.cpp  **** 
  24:src/main.cpp  **** void operator delete[](void* ptr)noexcept {
 118              		.loc 1 24 43 is_stmt 1
 119              		.cfi_startproc
 120              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 121              		.cfi_lsda 0x1b,.LLSDA34
 122              	.LVL6:
 123 0078 130101FF 		addi	sp,sp,-16
 124              		.cfi_def_cfa_offset 16
 125 007c 23341100 		sd	ra,8(sp)
 126 0080 23308100 		sd	s0,0(sp)
 127              		.cfi_offset 1, -8
 128              		.cfi_offset 8, -16
 129 0084 13040101 		addi	s0,sp,16
 130              		.cfi_def_cfa 8, 0
  25:src/main.cpp  **** mem_free(ptr);
 131              		.loc 1 25 1
 132              		.loc 1 25 9 is_stmt 0
 133 0088 97000000 		call	_Z8mem_freePv@plt
 133      E7800000 
 134              	.LVL7:
  26:src/main.cpp  **** }
 135              		.loc 1 26 1
 136 0090 83308100 		ld	ra,8(sp)
 137              		.cfi_restore 1
 138 0094 03340100 		ld	s0,0(sp)
 139              		.cfi_restore 8
 140              		.cfi_def_cfa 2, 16
 141 0098 13010101 		addi	sp,sp,16
 142              		.cfi_def_cfa_offset 0
 143 009c 67800000 		jr	ra
 144              		.cfi_endproc
 145              	.LFE34:
 146              		.section	.gcc_except_table
 147              	.LLSDA34:
 148 0004 FF       		.byte	0xff
GAS LISTING /tmp/cc40IiXt.s 			page 4


 149 0005 FF       		.byte	0xff
 150 0006 03       		.byte	0x3
 151 0007 00       		.byte	0
 152              		.text
 154              		.align	2
 155              		.globl	main
 157              	main:
 158              	.LFB35:
  27:src/main.cpp  **** 
  28:src/main.cpp  **** //uint64 temp;
  29:src/main.cpp  **** //
  30:src/main.cpp  **** //void f() {
  31:src/main.cpp  **** //	__putc('a');
  32:src/main.cpp  **** //	__putc('\n');
  33:src/main.cpp  **** //	uint64 var = temp;
  34:src/main.cpp  **** //	__asm__ volatile ("mv ra, %[savedPC]": : [savedPC] "r"(var));
  35:src/main.cpp  **** //
  36:src/main.cpp  **** //	__asm__ volatile ("sd ra, 8(sp)");
  37:src/main.cpp  **** //}
  38:src/main.cpp  **** //
  39:src/main.cpp  **** //void dispatch() {
  40:src/main.cpp  **** //	__asm__ volatile ("mv %[savedPC], ra":[savedPC] "=r"(temp));
  41:src/main.cpp  **** //	__asm__ volatile("mv ra, %[fAddress]": : [fAddress] "r"(&f));
  42:src/main.cpp  **** //}
  43:src/main.cpp  **** 
  44:src/main.cpp  **** int main() {
 159              		.loc 1 44 12 is_stmt 1
 160              		.cfi_startproc
 161 00a0 130101FE 		addi	sp,sp,-32
 162              		.cfi_def_cfa_offset 32
 163 00a4 233C1100 		sd	ra,24(sp)
 164 00a8 23388100 		sd	s0,16(sp)
 165 00ac 23349100 		sd	s1,8(sp)
 166              		.cfi_offset 1, -8
 167              		.cfi_offset 8, -16
 168              		.cfi_offset 9, -24
 169 00b0 13040102 		addi	s0,sp,32
 170              		.cfi_def_cfa 8, 0
  45:src/main.cpp  **** 	//zabrani prekide
  46:src/main.cpp  **** 	Riscv::mc_sstatus(Riscv::SSTATUS_SIE);
 171              		.loc 1 46 2
 172              	.LVL8:
 173              	.LBB8:
 174              	.LBB9:
 175              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/cc40IiXt.s 			page 5


  13:src/../h/Riscv.hpp **** 	//stavljanje registara x3-x31 na stek
  14:src/../h/Riscv.hpp **** 	static void pushRegisters();    //implementacija u asm
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp **** 	//skidanje registara x3-x31 sa steka
  17:src/../h/Riscv.hpp **** 	static void popRegisters();     //implementacija u asm
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp **** 	//read scause
  20:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp **** 	//write scause
  23:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp **** 	//read sepc
  26:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp **** 	//write sepc
  29:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp **** 	//read stvec
  32:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp **** 	//write stvec
  35:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  38:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),    //postoji zahtev za softverski prekid
  39:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),    //postoji prekid od tajmera
  40:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)        //postoji zahtev za spoljasnji hardverski prekid
  41:src/../h/Riscv.hpp **** 	};
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp **** 	//mask set sip
  44:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp **** 	//mask clear sip
  47:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp **** 	//read sip
  50:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp **** 	//write sip
  53:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  56:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  57:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  58:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  59:src/../h/Riscv.hpp **** 	};
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp **** 	//mask set sstatus
  62:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  63:src/../h/Riscv.hpp **** 
  64:src/../h/Riscv.hpp **** 	//mask clear sstatus
  65:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  66:src/../h/Riscv.hpp **** 
  67:src/../h/Riscv.hpp **** 	//read sstatus
  68:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  69:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/cc40IiXt.s 			page 6


  70:src/../h/Riscv.hpp **** 	//write sstatus
  71:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  72:src/../h/Riscv.hpp **** 
  73:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  74:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  75:src/../h/Riscv.hpp **** 
  76:src/../h/Riscv.hpp **** };
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  79:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  80:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  81:src/../h/Riscv.hpp **** 	return scause;
  82:src/../h/Riscv.hpp **** }
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  85:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  86:src/../h/Riscv.hpp **** }
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  89:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
  90:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
  91:src/../h/Riscv.hpp **** 	return sepc;
  92:src/../h/Riscv.hpp **** }
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
  95:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
  99:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 100:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 101:src/../h/Riscv.hpp **** 	return stvec;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 105:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 109:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 110:src/../h/Riscv.hpp **** }
 111:src/../h/Riscv.hpp **** 
 112:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 113:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 117:src/../h/Riscv.hpp **** 	uint64 volatile sip;
 118:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sip], sip": [sip] "=r"(sip));
 119:src/../h/Riscv.hpp **** 	return sip;
 120:src/../h/Riscv.hpp **** }
 121:src/../h/Riscv.hpp **** 
 122:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 123:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sip, %[sip]": :[sip] "r"(sip));
 124:src/../h/Riscv.hpp **** }
 125:src/../h/Riscv.hpp **** 
 126:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
GAS LISTING /tmp/cc40IiXt.s 			page 7


 127:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sstatus, %[mask]": :[mask] "r"(mask));
 128:src/../h/Riscv.hpp **** }
 129:src/../h/Riscv.hpp **** 
 130:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 131:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sstatus, %[mask]": :[mask] "r"(mask));
 176              		.loc 2 131 2
 177              		.loc 2 131 62 is_stmt 0
 178 00b4 93072000 		li	a5,2
 179              	#APP
 180              	# 131 "src/../h/Riscv.hpp" 1
 132              	}
 181              		csrc sstatus, a5
 182              	# 0 "" 2
 183              	.LVL9:
 184              	#NO_APP
 185              	.LBE9:
 186              	.LBE8:
  47:src/main.cpp  **** 	//postavi adresu prekidne rutine u stvec
  48:src/main.cpp  **** 	Riscv::w_stvec((uint64)&interruptHandler);
 187              		.loc 1 48 2 is_stmt 1
 188              		.loc 1 48 16 is_stmt 0
 189 00bc 97070000 		la	a5,interruptHandler
 189      83B70700 
 190              	.LVL10:
 191              	.LBB10:
 192              	.LBB11:
 105:src/../h/Riscv.hpp **** }
 193              		.loc 2 105 2 is_stmt 1
 105:src/../h/Riscv.hpp **** }
 194              		.loc 2 105 63 is_stmt 0
 195              	#APP
 196              	# 105 "src/../h/Riscv.hpp" 1
 197              		csrw stvec, a5
 198              	# 0 "" 2
 199              	.LVL11:
 200              	#NO_APP
 201              	.LBE11:
 202              	.LBE10:
  49:src/main.cpp  **** 	//omoguci prekide
  50:src/main.cpp  **** 	//Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  51:src/main.cpp  **** 	uint64 i = 0;
 203              		.loc 1 51 2 is_stmt 1
 204              		.loc 1 51 9 is_stmt 0
 205 00c8 93040000 		li	s1,0
 206 00cc 6F008000 		j	.L12
 207              	.LVL12:
 208              	.L11:
 209              	.LBB12:
  52:src/main.cpp  **** 	for (; i < 10000; i++) {
 210              		.loc 1 52 2 is_stmt 1
 211 00d0 93841400 		addi	s1,s1,1
 212              	.LVL13:
 213              	.L12:
 214              	.LBE12:
 215              		.loc 1 52 2 discriminator 1
 216              	.LBB14:
 217              		.loc 1 52 11 discriminator 1
GAS LISTING /tmp/cc40IiXt.s 			page 8


 218 00d4 B7270000 		li	a5,8192
 219 00d8 9387F770 		addi	a5,a5,1807
 220 00dc 63EA9702 		bgtu	s1,a5,.L10
 221              	.LBB13:
  53:src/main.cpp  **** 		void* ptr = mem_alloc(0xffff);
 222              		.loc 1 53 3
 223              		.loc 1 53 24 is_stmt 0
 224 00e0 37050100 		li	a0,65536
 225 00e4 1305F5FF 		addi	a0,a0,-1
 226 00e8 97000000 		call	_Z9mem_allocm@plt
 226      E7800000 
 227              	.LVL14:
  54:src/main.cpp  **** 		if (ptr == nullptr) break;
 228              		.loc 1 54 3 is_stmt 1
 229 00f0 63000502 		beqz	a0,.L10
  55:src/main.cpp  **** 		if (mem_free(ptr) == -1) {
 230              		.loc 1 55 3
 231              		.loc 1 55 15 is_stmt 0
 232 00f4 97000000 		call	_Z8mem_freePv@plt
 232      E7800000 
 233              	.LVL15:
 234              		.loc 1 55 3
 235 00fc 9307F0FF 		li	a5,-1
 236 0100 E318F5FC 		bne	a0,a5,.L11
  56:src/main.cpp  **** 			i = 11111111;
 237              		.loc 1 56 6
 238 0104 B794A900 		li	s1,11112448
 239              	.LVL16:
 240 0108 938474AC 		addi	s1,s1,-1337
 241 010c 6FF05FFC 		j	.L11
 242              	.LVL17:
 243              	.L10:
 244              	.LBE13:
 245              	.LBE14:
  57:src/main.cpp  **** 		}
  58:src/main.cpp  **** 	}
  59:src/main.cpp  **** 	printInteger(i);
 246              		.loc 1 59 2 is_stmt 1
 247              		.loc 1 59 14 is_stmt 0
 248 0110 13850400 		mv	a0,s1
 249 0114 97000000 		call	_Z12printIntegerm@plt
 249      E7800000 
 250              	.LVL18:
  60:src/main.cpp  **** 
  61:src/main.cpp  **** //	List<uint64> lista;
  62:src/main.cpp  **** //	uint64 num = 10;
  63:src/main.cpp  **** //	lista.addFirst(&num);
  64:src/main.cpp  **** //	println("");
  65:src/main.cpp  **** //	printInteger(*lista.peekFirst());
  66:src/main.cpp  **** //	println("");
  67:src/main.cpp  **** 	/*
  68:src/main.cpp  ****     //omoguci prekide
  69:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
  70:src/main.cpp  ****     scall();
  71:src/main.cpp  ****     println("\nprosao ecall");
  72:src/main.cpp  ****     //while (1) {}
  73:src/main.cpp  **** 
GAS LISTING /tmp/cc40IiXt.s 			page 9


  74:src/main.cpp  ****     //maskiraj prekide
  75:src/main.cpp  ****     Riscv::mc_sstatus(Riscv::SSTATUS_SIE);
  76:src/main.cpp  ****     */
  77:src/main.cpp  **** 	return 0;
 251              		.loc 1 77 2 is_stmt 1
  78:src/main.cpp  **** }...
 252              		.loc 1 78 1 is_stmt 0
 253 011c 13050000 		li	a0,0
 254 0120 83308101 		ld	ra,24(sp)
 255              		.cfi_restore 1
 256 0124 03340101 		ld	s0,16(sp)
 257              		.cfi_restore 8
 258              		.cfi_def_cfa 2, 32
 259 0128 83348100 		ld	s1,8(sp)
 260              		.cfi_restore 9
 261              	.LVL19:
 262 012c 13010102 		addi	sp,sp,32
 263              		.cfi_def_cfa_offset 0
 264 0130 67800000 		jr	ra
 265              		.cfi_endproc
 266              	.LFE35:
 268              	.Letext0:
 269              		.file 3 "src/../lib/hw.h"
 270              		.file 4 "src/../h/syscall_c.hpp"
 271              		.file 5 "src/../h/helper.hpp"
 1689              		.align	3
 1692              	DW.ref.__gxx_personality_v0:
 1693 0000 00000000 		.dword	__gxx_personality_v0
 1693      00000000 
 1694              		.ident	"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04) 9.4.0"
 1695              		.section	.note.GNU-stack,"",@progbits
GAS LISTING /tmp/cc40IiXt.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/cc40IiXt.s:9      .text:0000000000000000 _Znwm
     /tmp/cc40IiXt.s:13     .text:0000000000000000 .L0 
     /tmp/cc40IiXt.s:15     .text:0000000000000000 .L0 
     /tmp/cc40IiXt.s:16     .text:0000000000000004 .L0 
     /tmp/cc40IiXt.s:19     .text:000000000000000c .L0 
     /tmp/cc40IiXt.s:20     .text:000000000000000c .L0 
     /tmp/cc40IiXt.s:22     .text:0000000000000010 .L0 
     /tmp/cc40IiXt.s:24     .text:0000000000000010 .L0 
     /tmp/cc40IiXt.s:25     .text:0000000000000010 .L0 
     /tmp/cc40IiXt.s:28     .text:0000000000000018 .L0 
     /tmp/cc40IiXt.s:29     .text:000000000000001c .L0 
     /tmp/cc40IiXt.s:31     .text:0000000000000020 .L0 
     /tmp/cc40IiXt.s:32     .text:0000000000000020 .L0 
     /tmp/cc40IiXt.s:34     .text:0000000000000024 .L0 
     /tmp/cc40IiXt.s:36     .text:0000000000000028 .L0 
     /tmp/cc40IiXt.s:42     .text:0000000000000028 _Znam
     /tmp/cc40IiXt.s:45     .text:0000000000000028 .L0 
     /tmp/cc40IiXt.s:47     .text:0000000000000028 .L0 
     /tmp/cc40IiXt.s:48     .text:000000000000002c .L0 
     /tmp/cc40IiXt.s:51     .text:0000000000000034 .L0 
     /tmp/cc40IiXt.s:52     .text:0000000000000034 .L0 
     /tmp/cc40IiXt.s:54     .text:0000000000000038 .L0 
     /tmp/cc40IiXt.s:56     .text:0000000000000038 .L0 
     /tmp/cc40IiXt.s:57     .text:0000000000000038 .L0 
     /tmp/cc40IiXt.s:60     .text:0000000000000040 .L0 
     /tmp/cc40IiXt.s:61     .text:0000000000000044 .L0 
     /tmp/cc40IiXt.s:63     .text:0000000000000048 .L0 
     /tmp/cc40IiXt.s:64     .text:0000000000000048 .L0 
     /tmp/cc40IiXt.s:66     .text:000000000000004c .L0 
     /tmp/cc40IiXt.s:68     .text:0000000000000050 .L0 
     /tmp/cc40IiXt.s:74     .text:0000000000000050 _ZdlPv
     /tmp/cc40IiXt.s:77     .text:0000000000000050 .L0 
     /tmp/cc40IiXt.s:1692   .data.rel.local.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/cc40IiXt.s:81     .text:0000000000000050 .L0 
     /tmp/cc40IiXt.s:82     .text:0000000000000054 .L0 
     /tmp/cc40IiXt.s:85     .text:000000000000005c .L0 
     /tmp/cc40IiXt.s:86     .text:000000000000005c .L0 
     /tmp/cc40IiXt.s:88     .text:0000000000000060 .L0 
     /tmp/cc40IiXt.s:90     .text:0000000000000060 .L0 
     /tmp/cc40IiXt.s:91     .text:0000000000000060 .L0 
     /tmp/cc40IiXt.s:94     .text:0000000000000068 .L0 
     /tmp/cc40IiXt.s:95     .text:000000000000006c .L0 
     /tmp/cc40IiXt.s:97     .text:0000000000000070 .L0 
     /tmp/cc40IiXt.s:98     .text:0000000000000070 .L0 
     /tmp/cc40IiXt.s:100    .text:0000000000000074 .L0 
     /tmp/cc40IiXt.s:102    .text:0000000000000078 .L0 
     /tmp/cc40IiXt.s:116    .text:0000000000000078 _ZdaPv
     /tmp/cc40IiXt.s:119    .text:0000000000000078 .L0 
     /tmp/cc40IiXt.s:123    .text:0000000000000078 .L0 
     /tmp/cc40IiXt.s:124    .text:000000000000007c .L0 
     /tmp/cc40IiXt.s:127    .text:0000000000000084 .L0 
     /tmp/cc40IiXt.s:128    .text:0000000000000084 .L0 
     /tmp/cc40IiXt.s:130    .text:0000000000000088 .L0 
     /tmp/cc40IiXt.s:132    .text:0000000000000088 .L0 
     /tmp/cc40IiXt.s:133    .text:0000000000000088 .L0 
GAS LISTING /tmp/cc40IiXt.s 			page 11


     /tmp/cc40IiXt.s:136    .text:0000000000000090 .L0 
     /tmp/cc40IiXt.s:137    .text:0000000000000094 .L0 
     /tmp/cc40IiXt.s:139    .text:0000000000000098 .L0 
     /tmp/cc40IiXt.s:140    .text:0000000000000098 .L0 
     /tmp/cc40IiXt.s:142    .text:000000000000009c .L0 
     /tmp/cc40IiXt.s:144    .text:00000000000000a0 .L0 
     /tmp/cc40IiXt.s:157    .text:00000000000000a0 main
     /tmp/cc40IiXt.s:160    .text:00000000000000a0 .L0 
     /tmp/cc40IiXt.s:161    .text:00000000000000a0 .L0 
     /tmp/cc40IiXt.s:162    .text:00000000000000a4 .L0 
     /tmp/cc40IiXt.s:166    .text:00000000000000b0 .L0 
     /tmp/cc40IiXt.s:167    .text:00000000000000b0 .L0 
     /tmp/cc40IiXt.s:168    .text:00000000000000b0 .L0 
     /tmp/cc40IiXt.s:170    .text:00000000000000b4 .L0 
     /tmp/cc40IiXt.s:176    .text:00000000000000b4 .L0 
     /tmp/cc40IiXt.s:177    .text:00000000000000b4 .L0 
     /tmp/cc40IiXt.s:178    .text:00000000000000b4 .L0 
     /tmp/cc40IiXt.s:188    .text:00000000000000bc .L0 
     /tmp/cc40IiXt.s:189    .text:00000000000000bc .L0 
     /tmp/cc40IiXt.s:194    .text:00000000000000c4 .L0 
  src/../h/Riscv.hpp:105    .text:00000000000000c4 .L0 
     /tmp/cc40IiXt.s:204    .text:00000000000000c8 .L0 
     /tmp/cc40IiXt.s:205    .text:00000000000000c8 .L0 
     /tmp/cc40IiXt.s:211    .text:00000000000000d0 .L0 
     /tmp/cc40IiXt.s:217    .text:00000000000000d4 .L0 
     /tmp/cc40IiXt.s:218    .text:00000000000000d4 .L0 
     /tmp/cc40IiXt.s:223    .text:00000000000000e0 .L0 
     /tmp/cc40IiXt.s:224    .text:00000000000000e0 .L0 
     /tmp/cc40IiXt.s:229    .text:00000000000000f0 .L0 
     /tmp/cc40IiXt.s:231    .text:00000000000000f4 .L0 
     /tmp/cc40IiXt.s:232    .text:00000000000000f4 .L0 
     /tmp/cc40IiXt.s:235    .text:00000000000000fc .L0 
     /tmp/cc40IiXt.s:238    .text:0000000000000104 .L0 
     /tmp/cc40IiXt.s:247    .text:0000000000000110 .L0 
     /tmp/cc40IiXt.s:248    .text:0000000000000110 .L0 
     /tmp/cc40IiXt.s:252    .text:000000000000011c .L0 
     /tmp/cc40IiXt.s:253    .text:000000000000011c .L0 
     /tmp/cc40IiXt.s:255    .text:0000000000000124 .L0 
     /tmp/cc40IiXt.s:257    .text:0000000000000128 .L0 
     /tmp/cc40IiXt.s:258    .text:0000000000000128 .L0 
     /tmp/cc40IiXt.s:260    .text:000000000000012c .L0 
     /tmp/cc40IiXt.s:263    .text:0000000000000130 .L0 
     /tmp/cc40IiXt.s:265    .text:0000000000000134 .L0 
     /tmp/cc40IiXt.s:272    .text:0000000000000134 .L0 
     /tmp/cc40IiXt.s:189    .text:00000000000000bc .L0 
     /tmp/cc40IiXt.s:213    .text:00000000000000d4 .L12
     /tmp/cc40IiXt.s:243    .text:0000000000000110 .L10
     /tmp/cc40IiXt.s:208    .text:00000000000000d0 .L11
     /tmp/cc40IiXt.s:850    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc40IiXt.s:1660   .debug_str:0000000000000384 .LASF71
     /tmp/cc40IiXt.s:1596   .debug_str:00000000000001dd .LASF72
     /tmp/cc40IiXt.s:1582   .debug_str:000000000000015a .LASF73
     /tmp/cc40IiXt.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc40IiXt.s:268    .text:0000000000000134 .Letext0
     /tmp/cc40IiXt.s:1528   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc40IiXt.s:1612   .debug_str:0000000000000247 .LASF0
     /tmp/cc40IiXt.s:1618   .debug_str:0000000000000261 .LASF1
GAS LISTING /tmp/cc40IiXt.s 			page 12


     /tmp/cc40IiXt.s:1606   .debug_str:000000000000021c .LASF2
     /tmp/cc40IiXt.s:1590   .debug_str:00000000000001b8 .LASF4
     /tmp/cc40IiXt.s:1646   .debug_str:0000000000000314 .LASF3
     /tmp/cc40IiXt.s:1544   .debug_str:0000000000000056 .LASF5
     /tmp/cc40IiXt.s:1620   .debug_str:0000000000000274 .LASF6
     /tmp/cc40IiXt.s:1610   .debug_str:0000000000000234 .LASF7
     /tmp/cc40IiXt.s:1666   .debug_str:0000000000000469 .LASF8
     /tmp/cc40IiXt.s:1580   .debug_str:000000000000014c .LASF9
     /tmp/cc40IiXt.s:1628   .debug_str:0000000000000298 .LASF10
     /tmp/cc40IiXt.s:1662   .debug_str:0000000000000448 .LASF11
     /tmp/cc40IiXt.s:1548   .debug_str:0000000000000069 .LASF12
     /tmp/cc40IiXt.s:1534   .debug_str:0000000000000022 .LASF13
     /tmp/cc40IiXt.s:1552   .debug_str:0000000000000083 .LASF14
     /tmp/cc40IiXt.s:1638   .debug_str:00000000000002cf .LASF15
     /tmp/cc40IiXt.s:1560   .debug_str:00000000000000b4 .LASF16
     /tmp/cc40IiXt.s:1616   .debug_str:000000000000025b .LASF74
     /tmp/cc40IiXt.s:1564   .debug_str:00000000000000de .LASF75
     /tmp/cc40IiXt.s:1558   .debug_str:00000000000000a8 .LASF17
     /tmp/cc40IiXt.s:1598   .debug_str:00000000000001ea .LASF18
     /tmp/cc40IiXt.s:1546   .debug_str:000000000000005d .LASF19
     /tmp/cc40IiXt.s:1542   .debug_str:0000000000000048 .LASF20
     /tmp/cc40IiXt.s:1570   .debug_str:000000000000010b .LASF22
     /tmp/cc40IiXt.s:1654   .debug_str:0000000000000352 .LASF21
     /tmp/cc40IiXt.s:1532   .debug_str:0000000000000008 .LASF23
     /tmp/cc40IiXt.s:1536   .debug_str:0000000000000032 .LASF24
     /tmp/cc40IiXt.s:1652   .debug_str:000000000000033d .LASF26
     /tmp/cc40IiXt.s:1568   .debug_str:0000000000000102 .LASF28
     /tmp/cc40IiXt.s:1566   .debug_str:00000000000000ed .LASF30
     /tmp/cc40IiXt.s:1648   .debug_str:0000000000000326 .LASF25
     /tmp/cc40IiXt.s:1632   .debug_str:00000000000002b0 .LASF27
     /tmp/cc40IiXt.s:1636   .debug_str:00000000000002c8 .LASF29
     /tmp/cc40IiXt.s:1656   .debug_str:000000000000035f .LASF31
     /tmp/cc40IiXt.s:1576   .debug_str:000000000000013e .LASF32
     /tmp/cc40IiXt.s:1562   .debug_str:00000000000000ca .LASF33
     /tmp/cc40IiXt.s:1530   .debug_str:0000000000000000 .LASF34
     /tmp/cc40IiXt.s:1586   .debug_str:000000000000018e .LASF35
     /tmp/cc40IiXt.s:1614   .debug_str:0000000000000254 .LASF36
     /tmp/cc40IiXt.s:1674   .debug_str:000000000000049d .LASF37
     /tmp/cc40IiXt.s:1540   .debug_str:0000000000000041 .LASF38
     /tmp/cc40IiXt.s:1574   .debug_str:000000000000012b .LASF39
     /tmp/cc40IiXt.s:1578   .debug_str:0000000000000146 .LASF40
     /tmp/cc40IiXt.s:1658   .debug_str:0000000000000372 .LASF41
     /tmp/cc40IiXt.s:1538   .debug_str:000000000000003b .LASF42
     /tmp/cc40IiXt.s:1684   .debug_str:00000000000004e6 .LASF43
     /tmp/cc40IiXt.s:1678   .debug_str:00000000000004be .LASF44
     /tmp/cc40IiXt.s:1642   .debug_str:00000000000002f5 .LASF45
     /tmp/cc40IiXt.s:1594   .debug_str:00000000000001d2 .LASF46
     /tmp/cc40IiXt.s:1600   .debug_str:00000000000001f7 .LASF47
     /tmp/cc40IiXt.s:1550   .debug_str:0000000000000079 .LASF48
     /tmp/cc40IiXt.s:1588   .debug_str:00000000000001a2 .LASF49
     /tmp/cc40IiXt.s:1608   .debug_str:000000000000022a .LASF50
     /tmp/cc40IiXt.s:1584   .debug_str:0000000000000178 .LASF51
     /tmp/cc40IiXt.s:1554   .debug_str:000000000000008f .LASF76
     /tmp/cc40IiXt.s:1680   .debug_str:00000000000004c9 .LASF77
     /tmp/cc40IiXt.s:1572   .debug_str:0000000000000126 .LASF52
     /tmp/cc40IiXt.s:1624   .debug_str:000000000000028d .LASF53
     /tmp/cc40IiXt.s:158    .text:00000000000000a0 .LFB35
GAS LISTING /tmp/cc40IiXt.s 			page 13


     /tmp/cc40IiXt.s:266    .text:0000000000000134 .LFE35
     /tmp/cc40IiXt.s:1428   .debug_loc:0000000000000000 .LLST4
     /tmp/cc40IiXt.s:221    .text:00000000000000e0 .LBB13
     /tmp/cc40IiXt.s:244    .text:0000000000000110 .LBE13
     /tmp/cc40IiXt.s:1444   .debug_loc:000000000000004a .LLST6
     /tmp/cc40IiXt.s:227    .text:00000000000000f0 .LVL14
     /tmp/cc40IiXt.s:233    .text:00000000000000fc .LVL15
     /tmp/cc40IiXt.s:173    .text:00000000000000b4 .LBB8
     /tmp/cc40IiXt.s:186    .text:00000000000000bc .LBE8
     /tmp/cc40IiXt.s:1451   .debug_loc:000000000000006d .LLST5
     /tmp/cc40IiXt.s:191    .text:00000000000000c4 .LBB10
     /tmp/cc40IiXt.s:202    .text:00000000000000c8 .LBE10
     /tmp/cc40IiXt.s:250    .text:000000000000011c .LVL18
     /tmp/cc40IiXt.s:1592   .debug_str:00000000000001bf .LASF54
     /tmp/cc40IiXt.s:1644   .debug_str:000000000000030d .LASF56
     /tmp/cc40IiXt.s:117    .text:0000000000000078 .LFB34
     /tmp/cc40IiXt.s:145    .text:00000000000000a0 .LFE34
     /tmp/cc40IiXt.s:1459   .debug_loc:0000000000000091 .LLST3
     /tmp/cc40IiXt.s:134    .text:0000000000000090 .LVL7
     /tmp/cc40IiXt.s:1650   .debug_str:000000000000032d .LASF55
     /tmp/cc40IiXt.s:1604   .debug_str:0000000000000215 .LASF57
     /tmp/cc40IiXt.s:75     .text:0000000000000050 .LFB33
     /tmp/cc40IiXt.s:103    .text:0000000000000078 .LFE33
     /tmp/cc40IiXt.s:1473   .debug_loc:00000000000000ca .LLST2
     /tmp/cc40IiXt.s:92     .text:0000000000000068 .LVL5
     /tmp/cc40IiXt.s:1640   .debug_str:00000000000002e5 .LASF59
     /tmp/cc40IiXt.s:1626   .debug_str:0000000000000292 .LASF61
     /tmp/cc40IiXt.s:43     .text:0000000000000028 .LFB32
     /tmp/cc40IiXt.s:69     .text:0000000000000050 .LFE32
     /tmp/cc40IiXt.s:1634   .debug_str:00000000000002c3 .LASF58
     /tmp/cc40IiXt.s:1487   .debug_loc:0000000000000103 .LLST1
     /tmp/cc40IiXt.s:58     .text:0000000000000040 .LVL3
     /tmp/cc40IiXt.s:1672   .debug_str:0000000000000490 .LASF60
     /tmp/cc40IiXt.s:1602   .debug_str:000000000000020f .LASF62
     /tmp/cc40IiXt.s:10     .text:0000000000000000 .LFB31
     /tmp/cc40IiXt.s:37     .text:0000000000000028 .LFE31
     /tmp/cc40IiXt.s:1501   .debug_loc:000000000000013c .LLST0
     /tmp/cc40IiXt.s:26     .text:0000000000000018 .LVL1
     /tmp/cc40IiXt.s:1682   .debug_str:00000000000004e1 .LASF63
     /tmp/cc40IiXt.s:1622   .debug_str:0000000000000287 .LASF64
     /tmp/cc40IiXt.s:1556   .debug_str:000000000000009a .LASF65
     /tmp/cc40IiXt.s:1668   .debug_str:0000000000000479 .LASF67
     /tmp/cc40IiXt.s:1676   .debug_str:00000000000004b0 .LASF66
     /tmp/cc40IiXt.s:1630   .debug_str:00000000000002a7 .LASF68
     /tmp/cc40IiXt.s:1664   .debug_str:0000000000000457 .LASF69
     /tmp/cc40IiXt.s:1670   .debug_str:0000000000000483 .LASF70
     /tmp/cc40IiXt.s:199    .text:00000000000000c8 .LVL11
     /tmp/cc40IiXt.s:207    .text:00000000000000d0 .LVL12
     /tmp/cc40IiXt.s:239    .text:0000000000000108 .LVL16
     /tmp/cc40IiXt.s:242    .text:0000000000000110 .LVL17
     /tmp/cc40IiXt.s:261    .text:000000000000012c .LVL19
     /tmp/cc40IiXt.s:172    .text:00000000000000b4 .LVL8
     /tmp/cc40IiXt.s:183    .text:00000000000000bc .LVL9
     /tmp/cc40IiXt.s:122    .text:0000000000000078 .LVL6
     /tmp/cc40IiXt.s:80     .text:0000000000000050 .LVL4
     /tmp/cc40IiXt.s:46     .text:0000000000000028 .LVL2
     /tmp/cc40IiXt.s:14     .text:0000000000000000 .LVL0
GAS LISTING /tmp/cc40IiXt.s 			page 14


     /tmp/cc40IiXt.s:273    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc40IiXt.s:106    .gcc_except_table:0000000000000000 .LLSDA33
     /tmp/cc40IiXt.s:147    .gcc_except_table:0000000000000004 .LLSDA34

UNDEFINED SYMBOLS
_Z9mem_allocm
_Z8mem_freePv
__gxx_personality_v0
interruptHandler
_Z12printIntegerm
