GAS LISTING /tmp/ccdrlGnq.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 7573616F 		.string	"usao u nit 1"
   9      2075206E 
   9      69742031 
   9      00
  10 000d 000000   		.align	3
  11              	.LC1:
  12 0010 6F706574 		.string	"opet u niti 1"
  12      2075206E 
  12      69746920 
  12      3100
  13              		.text
  14              		.align	2
  15              		.globl	_Z5nit1fPv
  17              	_Z5nit1fPv:
  18              	.LFB45:
  19              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** #include "../lib/console.h"
   2:src/main.cpp  **** #include "../lib/hw.h"
   3:src/main.cpp  **** #include "../h/helper.hpp"
   4:src/main.cpp  **** #include "../h/Riscv.hpp"
   5:src/main.cpp  **** #include "../h/syscall_c.hpp"
   6:src/main.cpp  **** #include "../h/syscall_cpp.hpp"
   7:src/main.cpp  **** #include "../h/List.hpp"
   8:src/main.cpp  **** //#include "../h/MemoryAllocator.hpp"
   9:src/main.cpp  **** #include "../h/TCB.hpp"
  10:src/main.cpp  **** 
  11:src/main.cpp  **** //#pragma GCC optimize("O0")
  12:src/main.cpp  **** 
  13:src/main.cpp  **** extern "C" void interruptHandler();
  14:src/main.cpp  **** void testMemory();
  15:src/main.cpp  **** 
  16:src/main.cpp  **** 
  17:src/main.cpp  **** 
  18:src/main.cpp  **** //uint64 temp;
  19:src/main.cpp  **** //
  20:src/main.cpp  **** //void f() {
  21:src/main.cpp  **** //	__putc('a');
  22:src/main.cpp  **** //	__putc('\n');
  23:src/main.cpp  **** //	uint64 var = temp;
  24:src/main.cpp  **** //	__asm__ volatile ("mv ra, %[savedPC]": : [savedPC] "r"(var));
  25:src/main.cpp  **** //
  26:src/main.cpp  **** //	__asm__ volatile ("sd ra, 8(sp)");
  27:src/main.cpp  **** //}
  28:src/main.cpp  **** //
  29:src/main.cpp  **** //void dispatch() {
  30:src/main.cpp  **** //	__asm__ volatile ("mv %[savedPC], ra":[savedPC] "=r"(temp));
  31:src/main.cpp  **** //	__asm__ volatile("mv ra, %[fAddress]": : [fAddress] "r"(&f));
  32:src/main.cpp  **** //}
  33:src/main.cpp  **** 
GAS LISTING /tmp/ccdrlGnq.s 			page 2


  34:src/main.cpp  **** void nit1f(void*){
  20              		.loc 1 34 18
  21              		.cfi_startproc
  22 0000 130101FF 		addi	sp,sp,-16
  23              		.cfi_def_cfa_offset 16
  24 0004 23341100 		sd	ra,8(sp)
  25 0008 23308100 		sd	s0,0(sp)
  26              		.cfi_offset 1, -8
  27              		.cfi_offset 8, -16
  28 000c 13040101 		addi	s0,sp,16
  29              		.cfi_def_cfa 8, 0
  35:src/main.cpp  **** 	println("usao u nit 1");
  30              		.loc 1 35 2
  31              		.loc 1 35 9 is_stmt 0
  32 0010 17050000 		lla	a0,.LC0
  32      13050500 
  33 0018 97000000 		call	_Z7printlnPKc@plt
  33      E7800000 
  34              	.LVL0:
  36:src/main.cpp  **** 	TCB::dispatch();
  35              		.loc 1 36 2 is_stmt 1
  36              		.loc 1 36 15 is_stmt 0
  37 0020 97000000 		call	_ZN3TCB8dispatchEv@plt
  37      E7800000 
  38              	.LVL1:
  37:src/main.cpp  **** 	println("opet u niti 1");
  39              		.loc 1 37 2 is_stmt 1
  40              		.loc 1 37 9 is_stmt 0
  41 0028 17050000 		lla	a0,.LC1
  41      13050500 
  42 0030 97000000 		call	_Z7printlnPKc@plt
  42      E7800000 
  43              	.LVL2:
  38:src/main.cpp  **** }
  44              		.loc 1 38 1
  45 0038 83308100 		ld	ra,8(sp)
  46              		.cfi_restore 1
  47 003c 03340100 		ld	s0,0(sp)
  48              		.cfi_restore 8
  49              		.cfi_def_cfa 2, 16
  50 0040 13010101 		addi	sp,sp,16
  51              		.cfi_def_cfa_offset 0
  52 0044 67800000 		jr	ra
  53              		.cfi_endproc
  54              	.LFE45:
  56              		.align	2
  57              		.globl	main
  59              	main:
  60              	.LFB46:
  39:src/main.cpp  **** int main() {
  61              		.loc 1 39 12 is_stmt 1
  62              		.cfi_startproc
  63 0048 130101FF 		addi	sp,sp,-16
  64              		.cfi_def_cfa_offset 16
  65 004c 23341100 		sd	ra,8(sp)
  66 0050 23308100 		sd	s0,0(sp)
  67              		.cfi_offset 1, -8
GAS LISTING /tmp/ccdrlGnq.s 			page 3


  68              		.cfi_offset 8, -16
  69 0054 13040101 		addi	s0,sp,16
  70              		.cfi_def_cfa 8, 0
  40:src/main.cpp  **** 	//zabrani prekide
  41:src/main.cpp  **** 	Riscv::mc_sstatus(Riscv::SSTATUS_SIE);
  71              		.loc 1 41 2
  72              	.LVL3:
  73              	.LBB8:
  74              	.LBB9:
  75              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	//stavljanje registara x3-x31 na stek
  14:src/../h/Riscv.hpp **** 	static void pushRegisters();    //implementacija u asm
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp **** 	//skidanje registara x3-x31 sa steka
  17:src/../h/Riscv.hpp **** 	static void popRegisters();     //implementacija u asm
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp **** 	//read scause
  20:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp **** 	//write scause
  23:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp **** 	//read sepc
  26:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp **** 	//write sepc
  29:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp **** 	//read stvec
  32:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp **** 	//write stvec
  35:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  38:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),    //postoji zahtev za softverski prekid
  39:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),    //postoji prekid od tajmera
  40:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)        //postoji zahtev za spoljasnji hardverski prekid
  41:src/../h/Riscv.hpp **** 	};
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp **** 	//mask set sip
  44:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp **** 	//mask clear sip
  47:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
GAS LISTING /tmp/ccdrlGnq.s 			page 4


  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp **** 	//read sip
  50:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp **** 	//write sip
  53:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  56:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  57:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  58:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  59:src/../h/Riscv.hpp **** 	};
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp **** 	//mask set sstatus
  62:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  63:src/../h/Riscv.hpp **** 
  64:src/../h/Riscv.hpp **** 	//mask clear sstatus
  65:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  66:src/../h/Riscv.hpp **** 
  67:src/../h/Riscv.hpp **** 	//read sstatus
  68:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  69:src/../h/Riscv.hpp **** 
  70:src/../h/Riscv.hpp **** 	//write sstatus
  71:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  72:src/../h/Riscv.hpp **** 
  73:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  74:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  75:src/../h/Riscv.hpp **** 
  76:src/../h/Riscv.hpp **** };
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  79:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  80:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  81:src/../h/Riscv.hpp **** 	return scause;
  82:src/../h/Riscv.hpp **** }
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  85:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  86:src/../h/Riscv.hpp **** }
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  89:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
  90:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
  91:src/../h/Riscv.hpp **** 	return sepc;
  92:src/../h/Riscv.hpp **** }
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
  95:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
  99:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 100:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 101:src/../h/Riscv.hpp **** 	return stvec;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
GAS LISTING /tmp/ccdrlGnq.s 			page 5


 105:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 109:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 110:src/../h/Riscv.hpp **** }
 111:src/../h/Riscv.hpp **** 
 112:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 113:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 117:src/../h/Riscv.hpp **** 	uint64 volatile sip;
 118:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sip], sip": [sip] "=r"(sip));
 119:src/../h/Riscv.hpp **** 	return sip;
 120:src/../h/Riscv.hpp **** }
 121:src/../h/Riscv.hpp **** 
 122:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 123:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sip, %[sip]": :[sip] "r"(sip));
 124:src/../h/Riscv.hpp **** }
 125:src/../h/Riscv.hpp **** 
 126:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 127:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sstatus, %[mask]": :[mask] "r"(mask));
 128:src/../h/Riscv.hpp **** }
 129:src/../h/Riscv.hpp **** 
 130:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 131:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sstatus, %[mask]": :[mask] "r"(mask));
  76              		.loc 2 131 2
  77              		.loc 2 131 62 is_stmt 0
  78 0058 93072000 		li	a5,2
  79              	#APP
  80              	# 131 "src/../h/Riscv.hpp" 1
 132              	}
  81              		csrc sstatus, a5
  82              	# 0 "" 2
  83              	.LVL4:
  84              	#NO_APP
  85              	.LBE9:
  86              	.LBE8:
  42:src/main.cpp  **** 	//postavi adresu prekidne rutine u stvec
  43:src/main.cpp  **** 	Riscv::w_stvec((uint64)&interruptHandler);
  87              		.loc 1 43 2 is_stmt 1
  88              		.loc 1 43 16 is_stmt 0
  89 0060 17070000 		la	a4,interruptHandler
  89      03370700 
  90              	.LVL5:
  91              	.LBB10:
  92              	.LBB11:
 105:src/../h/Riscv.hpp **** }
  93              		.loc 2 105 2 is_stmt 1
 105:src/../h/Riscv.hpp **** }
  94              		.loc 2 105 63 is_stmt 0
  95              	#APP
  96              	# 105 "src/../h/Riscv.hpp" 1
  97              		csrw stvec, a4
  98              	# 0 "" 2
  99              	.LVL6:
GAS LISTING /tmp/ccdrlGnq.s 			page 6


 100              	#NO_APP
 101              	.LBE11:
 102              	.LBE10:
  44:src/main.cpp  **** 	//omoguci prekide
  45:src/main.cpp  **** 	Riscv::ms_sstatus(Riscv::SSTATUS_SIE);
 103              		.loc 1 45 2 is_stmt 1
 104              	.LBB12:
 105              	.LBB13:
 127:src/../h/Riscv.hpp **** }
 106              		.loc 2 127 2
 127:src/../h/Riscv.hpp **** }
 107              		.loc 2 127 62 is_stmt 0
 108              	#APP
 109              	# 127 "src/../h/Riscv.hpp" 1
 110              		csrs sstatus, a5
 111              	# 0 "" 2
 112              	.LVL7:
 113              	#NO_APP
 114              	.LBE13:
 115              	.LBE12:
  46:src/main.cpp  **** 
  47:src/main.cpp  **** 	//testiranje alociranja memorije
  48:src/main.cpp  **** testMemory();
 116              		.loc 1 48 1 is_stmt 1
 117              		.loc 1 48 11 is_stmt 0
 118 0070 97000000 		call	_Z10testMemoryv@plt
 118      E7800000 
 119              	.LVL8:
  49:src/main.cpp  **** 
  50:src/main.cpp  **** 	//testiranje liste
  51:src/main.cpp  **** //	List<uint64> lista;
  52:src/main.cpp  **** //	uint64 num = 10;
  53:src/main.cpp  **** //	lista.addFirst(&num);
  54:src/main.cpp  **** //	println("");
  55:src/main.cpp  **** //	printInteger(*lista.peekFirst());
  56:src/main.cpp  **** //	println("");
  57:src/main.cpp  **** 
  58:src/main.cpp  **** 	//testiranje kreiranja niti
  59:src/main.cpp  **** //	thread_t glavnaNit;
  60:src/main.cpp  **** //	thread_t nit1;
  61:src/main.cpp  **** //	thread_create(&glavnaNit, nullptr, nullptr);
  62:src/main.cpp  **** //	TCB::running = glavnaNit;
  63:src/main.cpp  **** //	thread_create(&nit1, nit1f, nullptr);
  64:src/main.cpp  **** //	while(!nit1->isFinished()){
  65:src/main.cpp  **** //		glavnaNit->dispatch();
  66:src/main.cpp  **** //	}
  67:src/main.cpp  **** //	println("");
  68:src/main.cpp  **** 	return 0;
 120              		.loc 1 68 2 is_stmt 1
  69:src/main.cpp  **** }...
 121              		.loc 1 69 1 is_stmt 0
 122 0078 13050000 		li	a0,0
 123 007c 83308100 		ld	ra,8(sp)
 124              		.cfi_restore 1
 125 0080 03340100 		ld	s0,0(sp)
 126              		.cfi_restore 8
 127              		.cfi_def_cfa 2, 16
GAS LISTING /tmp/ccdrlGnq.s 			page 7


 128 0084 13010101 		addi	sp,sp,16
 129              		.cfi_def_cfa_offset 0
 130 0088 67800000 		jr	ra
 131              		.cfi_endproc
 132              	.LFE46:
 134              	.Letext0:
 135              		.file 3 "src/../lib/hw.h"
 136              		.file 4 "src/../h/TCB.hpp"
 137              		.file 5 "src/../h/helper.hpp"
 138              		.file 6 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/ccdrlGnq.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccdrlGnq.s:17     .text:0000000000000000 _Z5nit1fPv
     /tmp/ccdrlGnq.s:21     .text:0000000000000000 .L0 
     /tmp/ccdrlGnq.s:22     .text:0000000000000000 .L0 
     /tmp/ccdrlGnq.s:23     .text:0000000000000004 .L0 
     /tmp/ccdrlGnq.s:26     .text:000000000000000c .L0 
     /tmp/ccdrlGnq.s:27     .text:000000000000000c .L0 
     /tmp/ccdrlGnq.s:29     .text:0000000000000010 .L0 
     /tmp/ccdrlGnq.s:31     .text:0000000000000010 .L0 
     /tmp/ccdrlGnq.s:32     .text:0000000000000010 .L0 
     /tmp/ccdrlGnq.s:36     .text:0000000000000020 .L0 
     /tmp/ccdrlGnq.s:37     .text:0000000000000020 .L0 
     /tmp/ccdrlGnq.s:40     .text:0000000000000028 .L0 
     /tmp/ccdrlGnq.s:41     .text:0000000000000028 .L0 
     /tmp/ccdrlGnq.s:45     .text:0000000000000038 .L0 
     /tmp/ccdrlGnq.s:46     .text:000000000000003c .L0 
     /tmp/ccdrlGnq.s:48     .text:0000000000000040 .L0 
     /tmp/ccdrlGnq.s:49     .text:0000000000000040 .L0 
     /tmp/ccdrlGnq.s:51     .text:0000000000000044 .L0 
     /tmp/ccdrlGnq.s:53     .text:0000000000000048 .L0 
     /tmp/ccdrlGnq.s:59     .text:0000000000000048 main
     /tmp/ccdrlGnq.s:62     .text:0000000000000048 .L0 
     /tmp/ccdrlGnq.s:63     .text:0000000000000048 .L0 
     /tmp/ccdrlGnq.s:64     .text:000000000000004c .L0 
     /tmp/ccdrlGnq.s:67     .text:0000000000000054 .L0 
     /tmp/ccdrlGnq.s:68     .text:0000000000000054 .L0 
     /tmp/ccdrlGnq.s:70     .text:0000000000000058 .L0 
     /tmp/ccdrlGnq.s:76     .text:0000000000000058 .L0 
     /tmp/ccdrlGnq.s:77     .text:0000000000000058 .L0 
     /tmp/ccdrlGnq.s:78     .text:0000000000000058 .L0 
     /tmp/ccdrlGnq.s:88     .text:0000000000000060 .L0 
     /tmp/ccdrlGnq.s:89     .text:0000000000000060 .L0 
     /tmp/ccdrlGnq.s:94     .text:0000000000000068 .L0 
  src/../h/Riscv.hpp:105    .text:0000000000000068 .L0 
     /tmp/ccdrlGnq.s:106    .text:000000000000006c .L0 
     /tmp/ccdrlGnq.s:107    .text:000000000000006c .L0 
  src/../h/Riscv.hpp:127    .text:000000000000006c .L0 
     /tmp/ccdrlGnq.s:117    .text:0000000000000070 .L0 
     /tmp/ccdrlGnq.s:118    .text:0000000000000070 .L0 
     /tmp/ccdrlGnq.s:121    .text:0000000000000078 .L0 
     /tmp/ccdrlGnq.s:122    .text:0000000000000078 .L0 
     /tmp/ccdrlGnq.s:124    .text:0000000000000080 .L0 
     /tmp/ccdrlGnq.s:126    .text:0000000000000084 .L0 
     /tmp/ccdrlGnq.s:127    .text:0000000000000084 .L0 
     /tmp/ccdrlGnq.s:129    .text:0000000000000088 .L0 
     /tmp/ccdrlGnq.s:131    .text:000000000000008c .L0 
     /tmp/ccdrlGnq.s:139    .text:000000000000008c .L0 
     /tmp/ccdrlGnq.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccdrlGnq.s:32     .text:0000000000000010 .L0 
     /tmp/ccdrlGnq.s:11     .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccdrlGnq.s:41     .text:0000000000000028 .L0 
     /tmp/ccdrlGnq.s:89     .text:0000000000000060 .L0 
     /tmp/ccdrlGnq.s:909    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccdrlGnq.s:1861   .debug_str:0000000000000509 .LASF98
     /tmp/ccdrlGnq.s:1775   .debug_str:00000000000002ba .LASF99
     /tmp/ccdrlGnq.s:1751   .debug_str:00000000000001e2 .LASF100
GAS LISTING /tmp/ccdrlGnq.s 			page 9


     /tmp/ccdrlGnq.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccdrlGnq.s:134    .text:000000000000008c .Letext0
     /tmp/ccdrlGnq.s:1675   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccdrlGnq.s:1797   .debug_str:0000000000000365 .LASF0
     /tmp/ccdrlGnq.s:1811   .debug_str:000000000000039d .LASF1
     /tmp/ccdrlGnq.s:1787   .debug_str:000000000000031e .LASF2
     /tmp/ccdrlGnq.s:1763   .debug_str:000000000000027f .LASF4
     /tmp/ccdrlGnq.s:1845   .debug_str:000000000000048b .LASF3
     /tmp/ccdrlGnq.s:1697   .debug_str:0000000000000070 .LASF5
     /tmp/ccdrlGnq.s:1725   .debug_str:0000000000000130 .LASF6
     /tmp/ccdrlGnq.s:1815   .debug_str:00000000000003bb .LASF7
     /tmp/ccdrlGnq.s:1795   .debug_str:0000000000000352 .LASF8
     /tmp/ccdrlGnq.s:1871   .debug_str:000000000000060d .LASF9
     /tmp/ccdrlGnq.s:1749   .debug_str:00000000000001d4 .LASF10
     /tmp/ccdrlGnq.s:1827   .debug_str:0000000000000410 .LASF11
     /tmp/ccdrlGnq.s:1863   .debug_str:00000000000005cd .LASF12
     /tmp/ccdrlGnq.s:1701   .debug_str:0000000000000083 .LASF13
     /tmp/ccdrlGnq.s:1683   .debug_str:000000000000002a .LASF14
     /tmp/ccdrlGnq.s:1707   .debug_str:00000000000000a2 .LASF15
     /tmp/ccdrlGnq.s:1839   .debug_str:0000000000000457 .LASF16
     /tmp/ccdrlGnq.s:1717   .debug_str:00000000000000e0 .LASF17
     /tmp/ccdrlGnq.s:1809   .debug_str:0000000000000397 .LASF53
     /tmp/ccdrlGnq.s:1721   .debug_str:000000000000010a .LASF101
     /tmp/ccdrlGnq.s:1713   .debug_str:00000000000000c9 .LASF18
     /tmp/ccdrlGnq.s:1777   .debug_str:00000000000002c7 .LASF19
     /tmp/ccdrlGnq.s:1699   .debug_str:0000000000000077 .LASF20
     /tmp/ccdrlGnq.s:1695   .debug_str:0000000000000062 .LASF21
     /tmp/ccdrlGnq.s:1731   .debug_str:0000000000000155 .LASF23
     /tmp/ccdrlGnq.s:1855   .debug_str:00000000000004d7 .LASF22
     /tmp/ccdrlGnq.s:1681   .debug_str:0000000000000010 .LASF24
     /tmp/ccdrlGnq.s:1685   .debug_str:000000000000003a .LASF25
     /tmp/ccdrlGnq.s:1853   .debug_str:00000000000004c2 .LASF27
     /tmp/ccdrlGnq.s:1729   .debug_str:000000000000014c .LASF29
     /tmp/ccdrlGnq.s:1727   .debug_str:0000000000000137 .LASF31
     /tmp/ccdrlGnq.s:1847   .debug_str:000000000000049d .LASF26
     /tmp/ccdrlGnq.s:1831   .debug_str:0000000000000427 .LASF28
     /tmp/ccdrlGnq.s:1837   .debug_str:0000000000000450 .LASF30
     /tmp/ccdrlGnq.s:1857   .debug_str:00000000000004e4 .LASF32
     /tmp/ccdrlGnq.s:1741   .debug_str:00000000000001a3 .LASF33
     /tmp/ccdrlGnq.s:1719   .debug_str:00000000000000f6 .LASF34
     /tmp/ccdrlGnq.s:1679   .debug_str:0000000000000008 .LASF35
     /tmp/ccdrlGnq.s:1755   .debug_str:0000000000000216 .LASF36
     /tmp/ccdrlGnq.s:1799   .debug_str:0000000000000372 .LASF37
     /tmp/ccdrlGnq.s:1879   .debug_str:0000000000000649 .LASF38
     /tmp/ccdrlGnq.s:1693   .debug_str:000000000000005b .LASF39
     /tmp/ccdrlGnq.s:1739   .debug_str:0000000000000190 .LASF40
     /tmp/ccdrlGnq.s:1745   .debug_str:00000000000001c3 .LASF41
     /tmp/ccdrlGnq.s:1859   .debug_str:00000000000004f7 .LASF42
     /tmp/ccdrlGnq.s:1691   .debug_str:0000000000000055 .LASF43
     /tmp/ccdrlGnq.s:1893   .debug_str:00000000000006c4 .LASF44
     /tmp/ccdrlGnq.s:1885   .debug_str:0000000000000694 .LASF45
     /tmp/ccdrlGnq.s:1843   .debug_str:0000000000000473 .LASF46
     /tmp/ccdrlGnq.s:1769   .debug_str:000000000000029a .LASF47
     /tmp/ccdrlGnq.s:1779   .debug_str:00000000000002d4 .LASF48
     /tmp/ccdrlGnq.s:1705   .debug_str:0000000000000098 .LASF49
     /tmp/ccdrlGnq.s:1759   .debug_str:0000000000000241 .LASF50
     /tmp/ccdrlGnq.s:1791   .debug_str:0000000000000338 .LASF51
GAS LISTING /tmp/ccdrlGnq.s 			page 10


     /tmp/ccdrlGnq.s:1753   .debug_str:0000000000000200 .LASF52
     /tmp/ccdrlGnq.s:1709   .debug_str:00000000000000ae .LASF102
     /tmp/ccdrlGnq.s:1887   .debug_str:000000000000069f .LASF103
     /tmp/ccdrlGnq.s:1689   .debug_str:000000000000004d .LASF104
     /tmp/ccdrlGnq.s:1773   .debug_str:00000000000002ad .LASF54
     /tmp/ccdrlGnq.s:1881   .debug_str:000000000000065c .LASF56
     /tmp/ccdrlGnq.s:1835   .debug_str:000000000000044b .LASF105
     /tmp/ccdrlGnq.s:1817   .debug_str:00000000000003ce .LASF58
     /tmp/ccdrlGnq.s:1781   .debug_str:00000000000002ec .LASF60
     /tmp/ccdrlGnq.s:1789   .debug_str:000000000000032c .LASF55
     /tmp/ccdrlGnq.s:1723   .debug_str:0000000000000119 .LASF57
     /tmp/ccdrlGnq.s:1687   .debug_str:0000000000000043 .LASF59
     /tmp/ccdrlGnq.s:1823   .debug_str:00000000000003e4 .LASF61
     /tmp/ccdrlGnq.s:1765   .debug_str:0000000000000286 .LASF62
     /tmp/ccdrlGnq.s:1867   .debug_str:00000000000005ea .LASF63
     /tmp/ccdrlGnq.s:1783   .debug_str:0000000000000302 .LASF64
     /tmp/ccdrlGnq.s:1825   .debug_str:00000000000003f8 .LASF65
     /tmp/ccdrlGnq.s:1869   .debug_str:0000000000000600 .LASF66
     /tmp/ccdrlGnq.s:1873   .debug_str:000000000000061d .LASF67
     /tmp/ccdrlGnq.s:1851   .debug_str:00000000000004b6 .LASF68
     /tmp/ccdrlGnq.s:1757   .debug_str:000000000000022a .LASF69
     /tmp/ccdrlGnq.s:1747   .debug_str:00000000000001c9 .LASF70
     /tmp/ccdrlGnq.s:1743   .debug_str:00000000000001ab .LASF71
     /tmp/ccdrlGnq.s:1841   .debug_str:000000000000046d .LASF72
     /tmp/ccdrlGnq.s:1793   .debug_str:0000000000000342 .LASF73
     /tmp/ccdrlGnq.s:1801   .debug_str:0000000000000379 .LASF74
     /tmp/ccdrlGnq.s:1735   .debug_str:0000000000000178 .LASF75
     /tmp/ccdrlGnq.s:1891   .debug_str:00000000000006bc .LASF76
     /tmp/ccdrlGnq.s:1849   .debug_str:00000000000004a4 .LASF77
     /tmp/ccdrlGnq.s:1733   .debug_str:0000000000000170 .LASF78
     /tmp/ccdrlGnq.s:1833   .debug_str:000000000000043a .LASF79
     /tmp/ccdrlGnq.s:1771   .debug_str:00000000000002a5 .LASF80
     /tmp/ccdrlGnq.s:1785   .debug_str:000000000000030f .LASF81
     /tmp/ccdrlGnq.s:1803   .debug_str:0000000000000382 .LASF82
     /tmp/ccdrlGnq.s:1805   .debug_str:0000000000000388 .LASF83
     /tmp/ccdrlGnq.s:1807   .debug_str:000000000000038d .LASF84
     /tmp/ccdrlGnq.s:1767   .debug_str:0000000000000291 .LASF85
     /tmp/ccdrlGnq.s:1677   .debug_str:0000000000000000 .LASF86
     /tmp/ccdrlGnq.s:1883   .debug_str:000000000000067e .LASF106
     /tmp/ccdrlGnq.s:1877   .debug_str:000000000000063b .LASF107
     /tmp/ccdrlGnq.s:1761   .debug_str:0000000000000257 .LASF108
     /tmp/ccdrlGnq.s:1819   .debug_str:00000000000003d9 .LASF87
     /tmp/ccdrlGnq.s:1737   .debug_str:000000000000018b .LASF88
     /tmp/ccdrlGnq.s:1703   .debug_str:0000000000000093 .LASF89
     /tmp/ccdrlGnq.s:60     .text:0000000000000048 .LFB46
     /tmp/ccdrlGnq.s:132    .text:000000000000008c .LFE46
     /tmp/ccdrlGnq.s:73     .text:0000000000000058 .LBB8
     /tmp/ccdrlGnq.s:86     .text:0000000000000060 .LBE8
     /tmp/ccdrlGnq.s:1646   .debug_loc:0000000000000000 .LLST0
     /tmp/ccdrlGnq.s:91     .text:0000000000000068 .LBB10
     /tmp/ccdrlGnq.s:102    .text:000000000000006c .LBE10
     /tmp/ccdrlGnq.s:104    .text:000000000000006c .LBB12
     /tmp/ccdrlGnq.s:115    .text:0000000000000070 .LBE12
     /tmp/ccdrlGnq.s:1654   .debug_loc:0000000000000024 .LLST1
     /tmp/ccdrlGnq.s:119    .text:0000000000000078 .LVL8
     /tmp/ccdrlGnq.s:1875   .debug_str:0000000000000635 .LASF90
     /tmp/ccdrlGnq.s:1715   .debug_str:00000000000000d5 .LASF91
GAS LISTING /tmp/ccdrlGnq.s 			page 11


     /tmp/ccdrlGnq.s:18     .text:0000000000000000 .LFB45
     /tmp/ccdrlGnq.s:54     .text:0000000000000048 .LFE45
     /tmp/ccdrlGnq.s:34     .text:0000000000000020 .LVL0
     /tmp/ccdrlGnq.s:38     .text:0000000000000028 .LVL1
     /tmp/ccdrlGnq.s:43     .text:0000000000000038 .LVL2
     /tmp/ccdrlGnq.s:1889   .debug_str:00000000000006b7 .LASF92
     /tmp/ccdrlGnq.s:1821   .debug_str:00000000000003de .LASF93
     /tmp/ccdrlGnq.s:1711   .debug_str:00000000000000b9 .LASF94
     /tmp/ccdrlGnq.s:1813   .debug_str:00000000000003b0 .LASF96
     /tmp/ccdrlGnq.s:1865   .debug_str:00000000000005dc .LASF95
     /tmp/ccdrlGnq.s:1829   .debug_str:000000000000041f .LASF97
     /tmp/ccdrlGnq.s:72     .text:0000000000000058 .LVL3
     /tmp/ccdrlGnq.s:83     .text:0000000000000060 .LVL4
     /tmp/ccdrlGnq.s:99     .text:000000000000006c .LVL6
     /tmp/ccdrlGnq.s:112    .text:0000000000000070 .LVL7
     /tmp/ccdrlGnq.s:140    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z7printlnPKc
_ZN3TCB8dispatchEv
interruptHandler
_Z10testMemoryv
