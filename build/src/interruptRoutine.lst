GAS LISTING /tmp/cc0MNjWB.s 			page 1


   1              		.file	"interruptRoutine.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata
   7              		.align	3
   8              	.LC0:
   9 0000 0A4E6570 		.string	"\nNepostojeci op code: "
   9      6F73746F 
   9      6A656369 
   9      206F7020 
   9      636F6465 
  10 0017 00       		.align	3
  11              	.LC1:
  12 0018 0A736361 		.string	"\nscause: "
  12      7573653A 
  12      2000
  13 0022 00000000 		.align	3
  13      0000
  14              	.LC2:
  15 0028 0A736570 		.string	"\nsepc: "
  15      633A2000 
  16              		.align	3
  17              	.LC3:
  18 0030 4E656B69 		.string	"Neki drugi prekid\n"
  18      20647275 
  18      67692070 
  18      72656B69 
  18      640A00
  19 0043 00000000 		.align	3
  19      00
  20              	.LC4:
  21 0048 0A477265 		.string	"\nGreska u prekidnoj rutini\n"
  21      736B6120 
  21      75207072 
  21      656B6964 
  21      6E6F6A20 
  22 0064 00000000 		.align	3
  23              	.LC5:
  24 0068 73636175 		.string	"scause: "
  24      73653A20 
  24      00
  25              		.text
  26              		.align	2
  27              		.globl	interruptRoutine
  29              	interruptRoutine:
  30              	.LFB51:
  31              		.file 1 "src/interruptRoutine.cpp"
   1:src/interruptRoutine.cpp **** //
   2:src/interruptRoutine.cpp **** // Created by os on 5/22/23.
   3:src/interruptRoutine.cpp **** //
   4:src/interruptRoutine.cpp **** 
   5:src/interruptRoutine.cpp **** #include "../lib/console.h"
   6:src/interruptRoutine.cpp **** #include "../lib/hw.h"
   7:src/interruptRoutine.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/interruptRoutine.cpp **** #include "../h/helper.hpp"
GAS LISTING /tmp/cc0MNjWB.s 			page 2


   9:src/interruptRoutine.cpp **** #include "../h/Riscv.hpp"
  10:src/interruptRoutine.cpp **** #include "../h/syscall_c.hpp"
  11:src/interruptRoutine.cpp **** #include "../h/TCB.hpp"
  12:src/interruptRoutine.cpp **** #include "../h/Scheduler.hpp"
  13:src/interruptRoutine.cpp **** #include "../h/KSem.hpp"
  14:src/interruptRoutine.cpp **** #include "../h/KConsole.hpp"
  15:src/interruptRoutine.cpp **** 
  16:src/interruptRoutine.cpp **** #include "../test/printing.hpp"
  17:src/interruptRoutine.cpp **** 
  18:src/interruptRoutine.cpp **** //void printInteger(int i);
  19:src/interruptRoutine.cpp **** 
  20:src/interruptRoutine.cpp **** #pragma GCC optimize("O0")
  21:src/interruptRoutine.cpp **** extern "C" void interruptRoutine() {
  32              		.loc 1 21 36
  33              		.cfi_startproc
  34 0000 130101F8 		addi	sp,sp,-128
  35              		.cfi_def_cfa_offset 128
  36 0004 233C1106 		sd	ra,120(sp)
  37 0008 23388106 		sd	s0,112(sp)
  38 000c 23349106 		sd	s1,104(sp)
  39              		.cfi_offset 1, -8
  40              		.cfi_offset 8, -16
  41              		.cfi_offset 9, -24
  42 0010 13040108 		addi	s0,sp,128
  43              		.cfi_def_cfa 8, 0
  22:src/interruptRoutine.cpp ****     //bitni sistemski registri
  23:src/interruptRoutine.cpp ****     uint64 scause, sepc, sstatus;
  44              		.loc 1 23 5
  24:src/interruptRoutine.cpp ****     __asm__ volatile("csrr %[scause], scause":[scause] "=r"(scause): : "a5", "a0", "a1", "a2", "a3"
  45              		.loc 1 24 5
  46              		.loc 1 24 119 is_stmt 0
  47              	#APP
  48              	# 24 "src/interruptRoutine.cpp" 1
  25              	    __asm__ volatile("csrr %[sepc], sepc":[sepc] "=r"(sepc): : "a5", "a0", "a1", "a2", "a3", "a4", 
  49              		csrr t1, scause
  50              	# 0 "" 2
  51              	#NO_APP
  52 0018 233C64FC 		sd	t1,-40(s0)
  53              	.LVL0:
  54              		.loc 1 25 5 is_stmt 1
  55              		.loc 1 25 111 is_stmt 0
  56              	#APP
  57              	# 25 "src/interruptRoutine.cpp" 1
  26              	    __asm__ volatile("csrr %[stat], sstatus":[stat] "=r"(sstatus): : "a5", "a0", "a1", "a2", "a3", 
  58              		csrr t1, sepc
  59              	# 0 "" 2
  60              	.LVL1:
  61              	#NO_APP
  62 0020 233864FC 		sd	t1,-48(s0)
  63              	.LVL2:
  64              		.loc 1 26 5 is_stmt 1
  65              		.loc 1 26 117 is_stmt 0
  66              	#APP
  67              	# 26 "src/interruptRoutine.cpp" 1
  27              	
  68              		csrr t1, sstatus
  69              	# 0 "" 2
GAS LISTING /tmp/cc0MNjWB.s 			page 3


  70              	.LVL3:
  71              	#NO_APP
  72 0028 233464FC 		sd	t1,-56(s0)
  73              	.LVL4:
  28:src/interruptRoutine.cpp ****     //argumenti preneti sistemskom pozivu
  29:src/interruptRoutine.cpp ****     uint64 a0, a1, a2, a3, a4, a5, a6, a7;
  74              		.loc 1 29 5 is_stmt 1
  30:src/interruptRoutine.cpp ****     __asm__ volatile("mv %[ax], a0":[ax] "=r"(a0): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
  75              		.loc 1 30 5
  76              		.loc 1 30 101 is_stmt 0
  77              	#APP
  78              	# 30 "src/interruptRoutine.cpp" 1
  31              	    __asm__ volatile("mv %[ax], a1":[ax] "=r"(a1): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
  79              		mv t1, a0
  80              	# 0 "" 2
  81              	.LVL5:
  82              	#NO_APP
  83 0030 233064FC 		sd	t1,-64(s0)
  84              	.LVL6:
  85              		.loc 1 31 5 is_stmt 1
  86              		.loc 1 31 101 is_stmt 0
  87              	#APP
  88              	# 31 "src/interruptRoutine.cpp" 1
  32              	    __asm__ volatile("mv %[ax], a2":[ax] "=r"(a2): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
  89              		mv t1, a1
  90              	# 0 "" 2
  91              	.LVL7:
  92              	#NO_APP
  93 0038 233C64FA 		sd	t1,-72(s0)
  94              	.LVL8:
  95              		.loc 1 32 5 is_stmt 1
  96              		.loc 1 32 101 is_stmt 0
  97              	#APP
  98              	# 32 "src/interruptRoutine.cpp" 1
  33              	    __asm__ volatile("mv %[ax], a3":[ax] "=r"(a3): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
  99              		mv t1, a2
 100              	# 0 "" 2
 101              	.LVL9:
 102              	#NO_APP
 103 0040 233864FA 		sd	t1,-80(s0)
 104              	.LVL10:
 105              		.loc 1 33 5 is_stmt 1
 106              		.loc 1 33 101 is_stmt 0
 107              	#APP
 108              	# 33 "src/interruptRoutine.cpp" 1
  34              	    __asm__ volatile("mv %[ax], a4":[ax] "=r"(a4): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
 109              		mv t1, a3
 110              	# 0 "" 2
 111              	.LVL11:
 112              	#NO_APP
 113 0048 233464FA 		sd	t1,-88(s0)
 114              	.LVL12:
 115              		.loc 1 34 5 is_stmt 1
 116              		.loc 1 34 101 is_stmt 0
 117              	#APP
 118              	# 34 "src/interruptRoutine.cpp" 1
  35              	    __asm__ volatile("mv %[ax], a5":[ax] "=r"(a5): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
GAS LISTING /tmp/cc0MNjWB.s 			page 4


 119              		mv t1, a4
 120              	# 0 "" 2
 121              	.LVL13:
 122              	#NO_APP
 123 0050 233064FA 		sd	t1,-96(s0)
 124              	.LVL14:
 125              		.loc 1 35 5 is_stmt 1
 126              		.loc 1 35 101 is_stmt 0
 127              	#APP
 128              	# 35 "src/interruptRoutine.cpp" 1
  36              	    __asm__ volatile("mv %[ax], a6":[ax] "=r"(a6): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
 129              		mv t1, a5
 130              	# 0 "" 2
 131              	.LVL15:
 132              	#NO_APP
 133 0058 233C64F8 		sd	t1,-104(s0)
 134              	.LVL16:
 135              		.loc 1 36 5 is_stmt 1
 136              		.loc 1 36 101 is_stmt 0
 137              	#APP
 138              	# 36 "src/interruptRoutine.cpp" 1
  37              	    __asm__ volatile("mv %[ax], a7":[ax] "=r"(a7): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
 139              		mv t1, a6
 140              	# 0 "" 2
 141              	.LVL17:
 142              	#NO_APP
 143 0060 233864F8 		sd	t1,-112(s0)
 144              	.LVL18:
 145              		.loc 1 37 5 is_stmt 1
 146              		.loc 1 37 101 is_stmt 0
 147              	#APP
 148              	# 37 "src/interruptRoutine.cpp" 1
  38              	
 149              		mv t1, a7
 150              	# 0 "" 2
 151              	.LVL19:
 152              	#NO_APP
 153 0068 233464F8 		sd	t1,-120(s0)
 154              	.LVL20:
  39:src/interruptRoutine.cpp ****     if (scause == 0x09 || scause == 0x08) {
 155              		.loc 1 39 5 is_stmt 1
 156              	.LBB2:
 157 006c 033784FD 		ld	a4,-40(s0)
 158 0070 93079000 		li	a5,9
 159 0074 6308F700 		beq	a4,a5,.L2
 160              		.loc 1 39 24 is_stmt 0 discriminator 1
 161 0078 033784FD 		ld	a4,-40(s0)
 162 007c 93078000 		li	a5,8
 163 0080 6312F736 		bne	a4,a5,.L3
 164              	.L2:
  40:src/interruptRoutine.cpp ****         //prekid zbog poziva ecall
  41:src/interruptRoutine.cpp ****         switch (a0) {
 165              		.loc 1 41 9 is_stmt 1
 166 0084 033704FC 		ld	a4,-64(s0)
 167 0088 93071009 		li	a5,145
 168 008c 6306F72C 		beq	a4,a5,.L4
 169 0090 033704FC 		ld	a4,-64(s0)
GAS LISTING /tmp/cc0MNjWB.s 			page 5


 170 0094 93071009 		li	a5,145
 171 0098 63E8E72C 		bgtu	a4,a5,.L5
 172 009c 033704FC 		ld	a4,-64(s0)
 173 00a0 93071008 		li	a5,129
 174 00a4 6300F72A 		beq	a4,a5,.L6
 175 00a8 033704FC 		ld	a4,-64(s0)
 176 00ac 93071008 		li	a5,129
 177 00b0 63ECE72A 		bgtu	a4,a5,.L5
 178 00b4 033704FC 		ld	a4,-64(s0)
 179 00b8 93072004 		li	a5,66
 180 00bc 63E2E704 		bgtu	a4,a5,.L7
 181 00c0 833704FC 		ld	a5,-64(s0)
 182 00c4 6382072A 		beqz	a5,.L5
 183 00c8 033704FC 		ld	a4,-64(s0)
 184 00cc 93072004 		li	a5,66
 185 00d0 63ECE728 		bgtu	a4,a5,.L5
 186 00d4 833704FC 		ld	a5,-64(s0)
 187 00d8 13972700 		slli	a4,a5,2
 188 00dc 97070000 		lla	a5,.L9
 188      93870700 
 189 00e4 B307F700 		add	a5,a4,a5
 190 00e8 83A70700 		lw	a5,0(a5)
 191 00ec 1B870700 		sext.w	a4,a5
 192 00f0 97070000 		lla	a5,.L9
 192      93870700 
 193 00f8 B307F700 		add	a5,a4,a5
 194 00fc 67800700 		jr	a5
 195              		.section	.rodata
 196 0071 000000   		.align	2
 197              		.align	2
 198              	.L9:
 199 0074 00000000 		.word	.L5-.L9
 200 0078 00000000 		.word	.L21-.L9
 201 007c 00000000 		.word	.L20-.L9
 202 0080 00000000 		.word	.L5-.L9
 203 0084 00000000 		.word	.L5-.L9
 204 0088 00000000 		.word	.L5-.L9
 205 008c 00000000 		.word	.L5-.L9
 206 0090 00000000 		.word	.L5-.L9
 207 0094 00000000 		.word	.L5-.L9
 208 0098 00000000 		.word	.L5-.L9
 209 009c 00000000 		.word	.L5-.L9
 210 00a0 00000000 		.word	.L5-.L9
 211 00a4 00000000 		.word	.L5-.L9
 212 00a8 00000000 		.word	.L5-.L9
 213 00ac 00000000 		.word	.L5-.L9
 214 00b0 00000000 		.word	.L5-.L9
 215 00b4 00000000 		.word	.L5-.L9
 216 00b8 00000000 		.word	.L19-.L9
 217 00bc 00000000 		.word	.L18-.L9
 218 00c0 00000000 		.word	.L17-.L9
 219 00c4 00000000 		.word	.L16-.L9
 220 00c8 00000000 		.word	.L5-.L9
 221 00cc 00000000 		.word	.L5-.L9
 222 00d0 00000000 		.word	.L5-.L9
 223 00d4 00000000 		.word	.L5-.L9
 224 00d8 00000000 		.word	.L5-.L9
GAS LISTING /tmp/cc0MNjWB.s 			page 6


 225 00dc 00000000 		.word	.L5-.L9
 226 00e0 00000000 		.word	.L5-.L9
 227 00e4 00000000 		.word	.L5-.L9
 228 00e8 00000000 		.word	.L5-.L9
 229 00ec 00000000 		.word	.L5-.L9
 230 00f0 00000000 		.word	.L5-.L9
 231 00f4 00000000 		.word	.L5-.L9
 232 00f8 00000000 		.word	.L15-.L9
 233 00fc 00000000 		.word	.L14-.L9
 234 0100 00000000 		.word	.L13-.L9
 235 0104 00000000 		.word	.L12-.L9
 236 0108 00000000 		.word	.L5-.L9
 237 010c 00000000 		.word	.L5-.L9
 238 0110 00000000 		.word	.L5-.L9
 239 0114 00000000 		.word	.L5-.L9
 240 0118 00000000 		.word	.L5-.L9
 241 011c 00000000 		.word	.L5-.L9
 242 0120 00000000 		.word	.L5-.L9
 243 0124 00000000 		.word	.L5-.L9
 244 0128 00000000 		.word	.L5-.L9
 245 012c 00000000 		.word	.L5-.L9
 246 0130 00000000 		.word	.L5-.L9
 247 0134 00000000 		.word	.L5-.L9
 248 0138 00000000 		.word	.L11-.L9
 249 013c 00000000 		.word	.L5-.L9
 250 0140 00000000 		.word	.L5-.L9
 251 0144 00000000 		.word	.L5-.L9
 252 0148 00000000 		.word	.L5-.L9
 253 014c 00000000 		.word	.L5-.L9
 254 0150 00000000 		.word	.L5-.L9
 255 0154 00000000 		.word	.L5-.L9
 256 0158 00000000 		.word	.L5-.L9
 257 015c 00000000 		.word	.L5-.L9
 258 0160 00000000 		.word	.L5-.L9
 259 0164 00000000 		.word	.L5-.L9
 260 0168 00000000 		.word	.L5-.L9
 261 016c 00000000 		.word	.L5-.L9
 262 0170 00000000 		.word	.L5-.L9
 263 0174 00000000 		.word	.L5-.L9
 264 0178 00000000 		.word	.L10-.L9
 265 017c 00000000 		.word	.L8-.L9
 266              		.text
 267              	.L7:
 268 0100 033704FC 		ld	a4,-64(s0)
 269 0104 93070008 		li	a5,128
 270 0108 6308F71E 		beq	a4,a5,.L22
 271 010c 6F00C025 		j	.L5
 272              	.L21:
  42:src/interruptRoutine.cpp ****             case 0x01:
 273              		.loc 1 42 13
  43:src/interruptRoutine.cpp ****                 //mem_alloc
  44:src/interruptRoutine.cpp ****                 //a1 = broj blokova koje treba alocirati
  45:src/interruptRoutine.cpp ****                 MemoryAllocator::kmalloc((size_t)a1 * MEM_BLOCK_SIZE);
 274              		.loc 1 45 17
 275              		.loc 1 45 41 is_stmt 0
 276 0110 833784FB 		ld	a5,-72(s0)
 277 0114 93976700 		slli	a5,a5,6
GAS LISTING /tmp/cc0MNjWB.s 			page 7


 278 0118 93053000 		li	a1,3
 279 011c 13850700 		mv	a0,a5
 280 0120 97000000 		call	_ZN15MemoryAllocator7kmallocEmNS_7PurposeE@plt
 280      E7800000 
 281              	.LVL21:
  46:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 282              		.loc 1 46 17 is_stmt 1
 283              		.loc 1 46 50 is_stmt 0
 284              	#APP
 285              	# 46 "src/interruptRoutine.cpp" 1
  47              	                break;
 286              		sd a0, 80(s0)
 287              	# 0 "" 2
 288              		.loc 1 47 17 is_stmt 1
 289              	#NO_APP
 290 012c 6F008029 		j	.L23
 291              	.LVL22:
 292              	.L20:
  48:src/interruptRoutine.cpp ****             case 0x02:
 293              		.loc 1 48 13
  49:src/interruptRoutine.cpp ****                 //mem_free
  50:src/interruptRoutine.cpp ****                 //a1 = pokazivac na memoriju koju dealociramo, dobijen sa mem_alloc
  51:src/interruptRoutine.cpp ****                 MemoryAllocator::kfree((void*)a1);
 294              		.loc 1 51 17
 295              		.loc 1 51 39 is_stmt 0
 296 0130 833784FB 		ld	a5,-72(s0)
 297 0134 13850700 		mv	a0,a5
 298 0138 97000000 		call	_ZN15MemoryAllocator5kfreeEPv@plt
 298      E7800000 
 299              	.LVL23:
  52:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 300              		.loc 1 52 17 is_stmt 1
 301              		.loc 1 52 50 is_stmt 0
 302              	#APP
 303              	# 52 "src/interruptRoutine.cpp" 1
  53              	                break;
 304              		sd a0, 80(s0)
 305              	# 0 "" 2
 306              		.loc 1 53 17 is_stmt 1
 307              	#NO_APP
 308 0144 6F000028 		j	.L23
 309              	.LVL24:
 310              	.L19:
  54:src/interruptRoutine.cpp ****             case 0x11:
 311              		.loc 1 54 13
  55:src/interruptRoutine.cpp ****                 //thread_create
  56:src/interruptRoutine.cpp ****                 //a1 = pokazivac na rucku u koju upisujemo identifikator niti(adresa u memoriji)
  57:src/interruptRoutine.cpp ****                 //a2 = pokazivac na funkciju koju nit treba da izvrsava
  58:src/interruptRoutine.cpp ****                 //a3 = argumenti funkcije koju nit treba da izvrsava
  59:src/interruptRoutine.cpp ****                 //a4 = poslednja lokacija alociranog steka(najniza adresa)
  60:src/interruptRoutine.cpp ****                 *((thread_t*)a1) = TCB::createThread((TCB::Body)a2, (void*)a3, (uint64*)a4);
 312              		.loc 1 60 17
 313              		.loc 1 60 53 is_stmt 0
 314 0148 833704FB 		ld	a5,-80(s0)
 315 014c 033784FA 		ld	a4,-88(s0)
 316 0150 833604FA 		ld	a3,-96(s0)
 317              		.loc 1 60 17
GAS LISTING /tmp/cc0MNjWB.s 			page 8


 318 0154 833484FB 		ld	s1,-72(s0)
 319              		.loc 1 60 53
 320 0158 13860600 		mv	a2,a3
 321 015c 93050700 		mv	a1,a4
 322 0160 13850700 		mv	a0,a5
 323 0164 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 323      E7800000 
 324              	.LVL25:
 325 016c 93070500 		mv	a5,a0
 326              		.loc 1 60 34
 327 0170 23B0F400 		sd	a5,0(s1)
  61:src/interruptRoutine.cpp ****                 TCB::start(*((thread_t*)a1));
 328              		.loc 1 61 17 is_stmt 1
 329              		.loc 1 61 27 is_stmt 0
 330 0174 833784FB 		ld	a5,-72(s0)
 331 0178 83B70700 		ld	a5,0(a5)
 332 017c 13850700 		mv	a0,a5
 333 0180 97000000 		call	_ZN3TCB5startEPS_@plt
 333      E7800000 
 334              	.LVL26:
  62:src/interruptRoutine.cpp ****                 if (*((thread_t*)a1) != nullptr) {
 335              		.loc 1 62 17 is_stmt 1
 336              		.loc 1 62 21 is_stmt 0
 337 0188 833784FB 		ld	a5,-72(s0)
 338 018c 83B70700 		ld	a5,0(a5)
 339              		.loc 1 62 17
 340 0190 63860700 		beqz	a5,.L24
  63:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, 0");
 341              		.loc 1 63 21 is_stmt 1
 342              		.loc 1 63 49 is_stmt 0
 343              	#APP
 344              	# 63 "src/interruptRoutine.cpp" 1
  64              	                } else {
 345              		li a0, 0
 346              	# 0 "" 2
 347              	#NO_APP
 348 0198 6F008000 		j	.L25
 349              	.L24:
  65:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, -1");
 350              		.loc 1 65 21 is_stmt 1
 351              		.loc 1 65 50 is_stmt 0
 352              	#APP
 353              	# 65 "src/interruptRoutine.cpp" 1
  66              	                }
 354              		li a0, -1
 355              	# 0 "" 2
 356              	#NO_APP
 357              	.L25:
  67:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 358              		.loc 1 67 17 is_stmt 1
 359              		.loc 1 67 50 is_stmt 0
 360              	#APP
 361              	# 67 "src/interruptRoutine.cpp" 1
  68              	                break;
 362              		sd a0, 80(s0)
 363              	# 0 "" 2
 364              		.loc 1 68 17 is_stmt 1
GAS LISTING /tmp/cc0MNjWB.s 			page 9


 365              	#NO_APP
 366 01a4 6F000022 		j	.L23
 367              	.LVL27:
 368              	.L18:
  69:src/interruptRoutine.cpp ****             case 0x12:
 369              		.loc 1 69 13
  70:src/interruptRoutine.cpp ****                 //thread_exit
  71:src/interruptRoutine.cpp ****                 TCB::running->setFinished(true);
 370              		.loc 1 71 17
 371              		.loc 1 71 42 is_stmt 0
 372 01a8 97070000 		la	a5,_ZN3TCB7runningE
 372      83B70700 
 373 01b0 83B70700 		ld	a5,0(a5)
 374 01b4 93051000 		li	a1,1
 375 01b8 13850700 		mv	a0,a5
 376 01bc 97000000 		call	_ZN3TCB11setFinishedEb
 376      E7800000 
 377              	.LVL28:
  72:src/interruptRoutine.cpp ****                 TCB::releaseJoined();
 378              		.loc 1 72 17 is_stmt 1
 379              		.loc 1 72 35 is_stmt 0
 380 01c4 97000000 		call	_ZN3TCB13releaseJoinedEv@plt
 380      E7800000 
 381              	.LVL29:
  73:src/interruptRoutine.cpp ****                 TCB::yield();
 382              		.loc 1 73 17 is_stmt 1
 383              		.loc 1 73 27 is_stmt 0
 384 01cc 97000000 		call	_ZN3TCB5yieldEv@plt
 384      E7800000 
 385              	.LVL30:
  74:src/interruptRoutine.cpp ****                 break;
 386              		.loc 1 74 17 is_stmt 1
 387 01d4 6F00001F 		j	.L23
 388              	.LVL31:
 389              	.L17:
  75:src/interruptRoutine.cpp ****             case 0x13:
 390              		.loc 1 75 13
  76:src/interruptRoutine.cpp ****                 //thread_dispatch
  77:src/interruptRoutine.cpp ****                 TCB::yield();
 391              		.loc 1 77 17
 392              		.loc 1 77 27 is_stmt 0
 393 01d8 97000000 		call	_ZN3TCB5yieldEv@plt
 393      E7800000 
 394              	.LVL32:
  78:src/interruptRoutine.cpp ****                 break;
 395              		.loc 1 78 17 is_stmt 1
 396 01e0 6F00401E 		j	.L23
 397              	.LVL33:
 398              	.L16:
  79:src/interruptRoutine.cpp ****             case 0x14:
 399              		.loc 1 79 13
  80:src/interruptRoutine.cpp ****                 //thread_join
  81:src/interruptRoutine.cpp ****                 //a1 = rucka niti na koju tekuca nit treba da ceka
  82:src/interruptRoutine.cpp ****                 TCB::threadJoin((thread_t)a1);
 400              		.loc 1 82 17
 401              		.loc 1 82 32 is_stmt 0
 402 01e4 833784FB 		ld	a5,-72(s0)
GAS LISTING /tmp/cc0MNjWB.s 			page 10


 403 01e8 13850700 		mv	a0,a5
 404 01ec 97000000 		call	_ZN3TCB10threadJoinEPS_@plt
 404      E7800000 
 405              	.LVL34:
  83:src/interruptRoutine.cpp ****                 TCB::yield();
 406              		.loc 1 83 17 is_stmt 1
 407              		.loc 1 83 27 is_stmt 0
 408 01f4 97000000 		call	_ZN3TCB5yieldEv@plt
 408      E7800000 
 409              	.LVL35:
  84:src/interruptRoutine.cpp ****                 break;
 410              		.loc 1 84 17 is_stmt 1
 411 01fc 6F00801C 		j	.L23
 412              	.LVL36:
 413              	.L15:
  85:src/interruptRoutine.cpp ****             case 0x21:
 414              		.loc 1 85 13
  86:src/interruptRoutine.cpp ****                 //sem_open
  87:src/interruptRoutine.cpp ****                 //a1 = pokazivac na rucku semafora, u koju se upisuje adresa semafora u memoriji
  88:src/interruptRoutine.cpp ****                 *((sem_t*)a1) = KSem::initSem((uint)a2);
 415              		.loc 1 88 17
 416              		.loc 1 88 46 is_stmt 0
 417 0200 833704FB 		ld	a5,-80(s0)
 418 0204 9B870700 		sext.w	a5,a5
 419              		.loc 1 88 17
 420 0208 833484FB 		ld	s1,-72(s0)
 421              		.loc 1 88 46
 422 020c 13850700 		mv	a0,a5
 423 0210 97000000 		call	_ZN4KSem7initSemEj@plt
 423      E7800000 
 424              	.LVL37:
 425 0218 93070500 		mv	a5,a0
 426              		.loc 1 88 31
 427 021c 23B0F400 		sd	a5,0(s1)
  89:src/interruptRoutine.cpp ****                 if (*((sem_t*)a1) != nullptr) {
 428              		.loc 1 89 17 is_stmt 1
 429              		.loc 1 89 21 is_stmt 0
 430 0220 833784FB 		ld	a5,-72(s0)
 431 0224 83B70700 		ld	a5,0(a5)
 432              		.loc 1 89 17
 433 0228 63860700 		beqz	a5,.L26
  90:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, 0");
 434              		.loc 1 90 21 is_stmt 1
 435              		.loc 1 90 49 is_stmt 0
 436              	#APP
 437              	# 90 "src/interruptRoutine.cpp" 1
  91              	                } else {
 438              		li a0, 0
 439              	# 0 "" 2
 440              	#NO_APP
 441 0230 6F008000 		j	.L27
 442              	.L26:
  92:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, -1");
 443              		.loc 1 92 21 is_stmt 1
 444              		.loc 1 92 50 is_stmt 0
 445              	#APP
 446              	# 92 "src/interruptRoutine.cpp" 1
GAS LISTING /tmp/cc0MNjWB.s 			page 11


  93              	                }
 447              		li a0, -1
 448              	# 0 "" 2
 449              	#NO_APP
 450              	.L27:
  94:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 451              		.loc 1 94 17 is_stmt 1
 452              		.loc 1 94 50 is_stmt 0
 453              	#APP
 454              	# 94 "src/interruptRoutine.cpp" 1
  95              	                break;
 455              		sd a0, 80(s0)
 456              	# 0 "" 2
 457              		.loc 1 95 17 is_stmt 1
 458              	#NO_APP
 459 023c 6F008018 		j	.L23
 460              	.LVL38:
 461              	.L14:
  96:src/interruptRoutine.cpp ****             case 0x22:
 462              		.loc 1 96 13
  97:src/interruptRoutine.cpp ****                 //sem_close
  98:src/interruptRoutine.cpp ****                 //a1 = rucka semafora
  99:src/interruptRoutine.cpp ****                 KSem::closeSem((sem_t)a1);
 463              		.loc 1 99 17
 464              		.loc 1 99 31 is_stmt 0
 465 0240 833784FB 		ld	a5,-72(s0)
 466 0244 13850700 		mv	a0,a5
 467 0248 97000000 		call	_ZN4KSem8closeSemEPS_@plt
 467      E7800000 
 468              	.LVL39:
 100:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 469              		.loc 1 100 17 is_stmt 1
 470              		.loc 1 100 50 is_stmt 0
 471              	#APP
 472              	# 100 "src/interruptRoutine.cpp" 1
 101              	                break;
 473              		sd a0, 80(s0)
 474              	# 0 "" 2
 475              		.loc 1 101 17 is_stmt 1
 476              	#NO_APP
 477 0254 6F000017 		j	.L23
 478              	.LVL40:
 479              	.L13:
 102:src/interruptRoutine.cpp ****             case 0x23:
 480              		.loc 1 102 13
 103:src/interruptRoutine.cpp ****                 //sem_wait
 104:src/interruptRoutine.cpp ****                 //a1 = rucka semafora
 105:src/interruptRoutine.cpp ****                 ((sem_t)a1)->wait();
 481              		.loc 1 105 17
 482              		.loc 1 105 34 is_stmt 0
 483 0258 833784FB 		ld	a5,-72(s0)
 484 025c 13850700 		mv	a0,a5
 485 0260 97000000 		call	_ZN4KSem4waitEv@plt
 485      E7800000 
 486              	.LVL41:
 106:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 487              		.loc 1 106 17 is_stmt 1
GAS LISTING /tmp/cc0MNjWB.s 			page 12


 488              		.loc 1 106 50 is_stmt 0
 489              	#APP
 490              	# 106 "src/interruptRoutine.cpp" 1
 107              	                break;
 491              		sd a0, 80(s0)
 492              	# 0 "" 2
 493              		.loc 1 107 17 is_stmt 1
 494              	#NO_APP
 495 026c 6F008015 		j	.L23
 496              	.LVL42:
 497              	.L12:
 108:src/interruptRoutine.cpp ****             case 0x24:
 498              		.loc 1 108 13
 109:src/interruptRoutine.cpp ****                 //sem_signal
 110:src/interruptRoutine.cpp ****                 //a1 = rucka semafora
 111:src/interruptRoutine.cpp ****                 ((sem_t)a1)->signal();
 499              		.loc 1 111 17
 500              		.loc 1 111 36 is_stmt 0
 501 0270 833784FB 		ld	a5,-72(s0)
 502 0274 13850700 		mv	a0,a5
 503 0278 97000000 		call	_ZN4KSem6signalEv@plt
 503      E7800000 
 504              	.LVL43:
 112:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 505              		.loc 1 112 17 is_stmt 1
 506              		.loc 1 112 50 is_stmt 0
 507              	#APP
 508              	# 112 "src/interruptRoutine.cpp" 1
 113              	                break;
 509              		sd a0, 80(s0)
 510              	# 0 "" 2
 511              		.loc 1 113 17 is_stmt 1
 512              	#NO_APP
 513 0284 6F000014 		j	.L23
 514              	.LVL44:
 515              	.L11:
 114:src/interruptRoutine.cpp ****             case 0x31:
 516              		.loc 1 114 13
 115:src/interruptRoutine.cpp ****                 //time_sleep
 116:src/interruptRoutine.cpp ****                 //a1 = broj perioda tajmera na koji se uspavljuje tekuca nit
 117:src/interruptRoutine.cpp ****                 if ((time_t)a1 > 0) {
 517              		.loc 1 117 17
 518 0288 833784FB 		ld	a5,-72(s0)
 519 028c 63860700 		beqz	a5,.L28
 118:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, 0");
 520              		.loc 1 118 21
 521              		.loc 1 118 49 is_stmt 0
 522              	#APP
 523              	# 118 "src/interruptRoutine.cpp" 1
 119              	                } else {
 524              		li a0, 0
 525              	# 0 "" 2
 526              	#NO_APP
 527 0294 6F008000 		j	.L29
 528              	.L28:
 120:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, -1");
 529              		.loc 1 120 21 is_stmt 1
GAS LISTING /tmp/cc0MNjWB.s 			page 13


 530              		.loc 1 120 50 is_stmt 0
 531              	#APP
 532              	# 120 "src/interruptRoutine.cpp" 1
 121              	                }
 533              		li a0, -1
 534              	# 0 "" 2
 535              	#NO_APP
 536              	.L29:
 122:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 537              		.loc 1 122 17 is_stmt 1
 538              		.loc 1 122 50 is_stmt 0
 539              	#APP
 540              	# 122 "src/interruptRoutine.cpp" 1
 123              	                if ((time_t)a1 > 0) {
 541              		sd a0, 80(s0)
 542              	# 0 "" 2
 543              		.loc 1 123 17 is_stmt 1
 544              	#NO_APP
 545 02a0 833784FB 		ld	a5,-72(s0)
 546 02a4 638E0710 		beqz	a5,.L40
 124:src/interruptRoutine.cpp ****                     Scheduler::putToSleep(TCB::running, (time_t)a1);
 547              		.loc 1 124 21
 548              		.loc 1 124 42 is_stmt 0
 549 02a8 97070000 		la	a5,_ZN3TCB7runningE
 549      83B70700 
 550 02b0 83B70700 		ld	a5,0(a5)
 551 02b4 833584FB 		ld	a1,-72(s0)
 552 02b8 13850700 		mv	a0,a5
 553 02bc 97000000 		call	_ZN9Scheduler10putToSleepEP3TCBm@plt
 553      E7800000 
 554              	.LVL45:
 125:src/interruptRoutine.cpp ****                     TCB::yield();
 555              		.loc 1 125 21 is_stmt 1
 556              		.loc 1 125 31 is_stmt 0
 557 02c4 97000000 		call	_ZN3TCB5yieldEv@plt
 557      E7800000 
 558              	.LVL46:
 126:src/interruptRoutine.cpp ****                 }
 127:src/interruptRoutine.cpp ****                 break;
 559              		.loc 1 127 17 is_stmt 1
 560 02cc 6F00400F 		j	.L40
 561              	.LVL47:
 562              	.L10:
 128:src/interruptRoutine.cpp ****             case 0x41:
 563              		.loc 1 128 13
 129:src/interruptRoutine.cpp ****                 //getc
 130:src/interruptRoutine.cpp ****                 KConsole::kgetc();
 564              		.loc 1 130 17
 565              		.loc 1 130 32 is_stmt 0
 566 02d0 97000000 		call	_ZN8KConsole5kgetcEv@plt
 566      E7800000 
 567              	.LVL48:
 131:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 568              		.loc 1 131 17 is_stmt 1
 569              		.loc 1 131 50 is_stmt 0
 570              	#APP
 571              	# 131 "src/interruptRoutine.cpp" 1
GAS LISTING /tmp/cc0MNjWB.s 			page 14


 132              	                break;
 572              		sd a0, 80(s0)
 573              	# 0 "" 2
 574              		.loc 1 132 17 is_stmt 1
 575              	#NO_APP
 576 02dc 6F00800E 		j	.L23
 577              	.LVL49:
 578              	.L8:
 133:src/interruptRoutine.cpp ****             case 0x42:
 579              		.loc 1 133 13
 134:src/interruptRoutine.cpp ****                 //putc
 135:src/interruptRoutine.cpp ****                 //a1 = karakter koji se upisuje u bafer za ispis na konzolu
 136:src/interruptRoutine.cpp ****                 KConsole::kputc((char)a1);
 580              		.loc 1 136 17
 581              		.loc 1 136 32 is_stmt 0
 582 02e0 833784FB 		ld	a5,-72(s0)
 583 02e4 93F7F70F 		andi	a5,a5,0xff
 584 02e8 13850700 		mv	a0,a5
 585 02ec 97000000 		call	_ZN8KConsole5kputcEc@plt
 585      E7800000 
 586              	.LVL50:
 137:src/interruptRoutine.cpp ****                 break;
 587              		.loc 1 137 17 is_stmt 1
 588 02f4 6F00000D 		j	.L23
 589              	.LVL51:
 590              	.L22:
 138:src/interruptRoutine.cpp ****             case 0x80:
 591              		.loc 1 138 13
 139:src/interruptRoutine.cpp ****                 //alloc thread
 140:src/interruptRoutine.cpp ****                 //a1 = pokazivac na rucku u koju upisujemo identifikator niti(adresa u memoriji)
 141:src/interruptRoutine.cpp ****                 //a2 = pokazivac na funkciju koju nit treba da izvrsava
 142:src/interruptRoutine.cpp ****                 //a3 = argumenti funkcije koju nit treba da izvrsava
 143:src/interruptRoutine.cpp ****                 //a4 = poslednja lokacija alociranog steka(najniza adresa)
 144:src/interruptRoutine.cpp ****                 *((thread_t*)a1) = TCB::createThread((TCB::Body)a2, (void*)a3, (uint64*)a4);
 592              		.loc 1 144 17
 593              		.loc 1 144 53 is_stmt 0
 594 02f8 833704FB 		ld	a5,-80(s0)
 595 02fc 033784FA 		ld	a4,-88(s0)
 596 0300 833604FA 		ld	a3,-96(s0)
 597              		.loc 1 144 17
 598 0304 833484FB 		ld	s1,-72(s0)
 599              		.loc 1 144 53
 600 0308 13860600 		mv	a2,a3
 601 030c 93050700 		mv	a1,a4
 602 0310 13850700 		mv	a0,a5
 603 0314 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 603      E7800000 
 604              	.LVL52:
 605 031c 93070500 		mv	a5,a0
 606              		.loc 1 144 34
 607 0320 23B0F400 		sd	a5,0(s1)
 145:src/interruptRoutine.cpp ****                 if (*((thread_t*)a1) != nullptr) {
 608              		.loc 1 145 17 is_stmt 1
 609              		.loc 1 145 21 is_stmt 0
 610 0324 833784FB 		ld	a5,-72(s0)
 611 0328 83B70700 		ld	a5,0(a5)
 612              		.loc 1 145 17
GAS LISTING /tmp/cc0MNjWB.s 			page 15


 613 032c 63860700 		beqz	a5,.L31
 146:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, 0");
 614              		.loc 1 146 21 is_stmt 1
 615              		.loc 1 146 49 is_stmt 0
 616              	#APP
 617              	# 146 "src/interruptRoutine.cpp" 1
 147              	                } else {
 618              		li a0, 0
 619              	# 0 "" 2
 620              	#NO_APP
 621 0334 6F008000 		j	.L32
 622              	.L31:
 148:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, -1");
 623              		.loc 1 148 21 is_stmt 1
 624              		.loc 1 148 50 is_stmt 0
 625              	#APP
 626              	# 148 "src/interruptRoutine.cpp" 1
 149              	                }
 627              		li a0, -1
 628              	# 0 "" 2
 629              	#NO_APP
 630              	.L32:
 150:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 631              		.loc 1 150 17 is_stmt 1
 632              		.loc 1 150 50 is_stmt 0
 633              	#APP
 634              	# 150 "src/interruptRoutine.cpp" 1
 151              	                break;
 635              		sd a0, 80(s0)
 636              	# 0 "" 2
 637              		.loc 1 151 17 is_stmt 1
 638              	#NO_APP
 639 0340 6F004008 		j	.L23
 640              	.LVL53:
 641              	.L6:
 152:src/interruptRoutine.cpp ****             case 0x81:
 642              		.loc 1 152 13
 153:src/interruptRoutine.cpp ****                 //start thread
 154:src/interruptRoutine.cpp ****                 //a1 = rucka niti koja se stavlja u scheduler
 155:src/interruptRoutine.cpp ****                 Scheduler::put((thread_t)a1);
 643              		.loc 1 155 17
 644              		.loc 1 155 31 is_stmt 0
 645 0344 833784FB 		ld	a5,-72(s0)
 646 0348 13850700 		mv	a0,a5
 647 034c 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 647      E7800000 
 648              	.LVL54:
 156:src/interruptRoutine.cpp ****                 break;
 649              		.loc 1 156 17 is_stmt 1
 650 0354 6F000007 		j	.L23
 651              	.LVL55:
 652              	.L4:
 157:src/interruptRoutine.cpp ****             case 0x91:
 653              		.loc 1 157 13
 158:src/interruptRoutine.cpp ****                 //printInteger
 159:src/interruptRoutine.cpp ****                 //a1 = integer za ispis
 160:src/interruptRoutine.cpp ****                 kPrintInt(a1);
GAS LISTING /tmp/cc0MNjWB.s 			page 16


 654              		.loc 1 160 17
 655              		.loc 1 160 26 is_stmt 0
 656 0358 033584FB 		ld	a0,-72(s0)
 657 035c 97000000 		call	_Z9kPrintIntm@plt
 657      E7800000 
 658              	.LVL56:
 161:src/interruptRoutine.cpp ****                 break;
 659              		.loc 1 161 17 is_stmt 1
 660 0364 6F000006 		j	.L23
 661              	.LVL57:
 662              	.L5:
 162:src/interruptRoutine.cpp ****             default:
 663              		.loc 1 162 13
 163:src/interruptRoutine.cpp ****                 printString("\nNepostojeci op code: ");
 664              		.loc 1 163 17
 665              		.loc 1 163 28 is_stmt 0
 666 0368 17050000 		lla	a0,.LC0
 666      13050500 
 667 0370 97000000 		call	_Z11printStringPKc@plt
 667      E7800000 
 668              	.LVL58:
 164:src/interruptRoutine.cpp ****                 printInteger(a0);
 669              		.loc 1 164 17 is_stmt 1
 670              		.loc 1 164 29 is_stmt 0
 671 0378 033504FC 		ld	a0,-64(s0)
 672 037c 97000000 		call	_Z12printIntegerm@plt
 672      E7800000 
 673              	.LVL59:
 165:src/interruptRoutine.cpp ****                 printString("\nscause: ");
 674              		.loc 1 165 17 is_stmt 1
 675              		.loc 1 165 28 is_stmt 0
 676 0384 17050000 		lla	a0,.LC1
 676      13050500 
 677 038c 97000000 		call	_Z11printStringPKc@plt
 677      E7800000 
 678              	.LVL60:
 166:src/interruptRoutine.cpp ****                 printInteger(scause);
 679              		.loc 1 166 17 is_stmt 1
 680              		.loc 1 166 29 is_stmt 0
 681 0394 033584FD 		ld	a0,-40(s0)
 682 0398 97000000 		call	_Z12printIntegerm@plt
 682      E7800000 
 683              	.LVL61:
 167:src/interruptRoutine.cpp ****                 printString("\nsepc: ");
 684              		.loc 1 167 17 is_stmt 1
 685              		.loc 1 167 28 is_stmt 0
 686 03a0 17050000 		lla	a0,.LC2
 686      13050500 
 687 03a8 97000000 		call	_Z11printStringPKc@plt
 687      E7800000 
 688              	.LVL62:
 168:src/interruptRoutine.cpp ****                 printInteger(sepc);
 689              		.loc 1 168 17 is_stmt 1
 690              		.loc 1 168 29 is_stmt 0
 691 03b0 033504FD 		ld	a0,-48(s0)
 692 03b4 97000000 		call	_Z12printIntegerm@plt
 692      E7800000 
GAS LISTING /tmp/cc0MNjWB.s 			page 17


 693              	.LVL63:
 169:src/interruptRoutine.cpp ****                 break;
 694              		.loc 1 169 17 is_stmt 1
 695 03bc 6F008000 		j	.L23
 696              	.L40:
 127:src/interruptRoutine.cpp ****             case 0x41:
 697              		.loc 1 127 17 is_stmt 0
 698 03c0 13000000 		nop
 699              	.L23:
 170:src/interruptRoutine.cpp ****         }
 171:src/interruptRoutine.cpp ****         //sepc pokazuje na ecall instrukciju, treba preci na sledecu instrukciju
 172:src/interruptRoutine.cpp ****         //sepc += 4;
 173:src/interruptRoutine.cpp ****         __asm__ volatile("addi %[dst], %[src], 0x4":[dst]"=r"(sepc):[src]"r"(
 700              		.loc 1 173 9 is_stmt 1
 174:src/interruptRoutine.cpp ****                 sepc):"a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 701              		.loc 1 174 70 is_stmt 0
 702 03c4 033304FD 		ld	t1,-48(s0)
 703              	#APP
 704              	# 174 "src/interruptRoutine.cpp" 1
 175              	        __asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc):"a5", "a0", "a1", "a2", "a3", "a4"
 705              		addi t1, t1, 0x4
 706              	# 0 "" 2
 707              	.LVL64:
 708              	#NO_APP
 709 03cc 233864FC 		sd	t1,-48(s0)
 710              	.LVL65:
 711              		.loc 1 175 9 is_stmt 1
 712              		.loc 1 175 113 is_stmt 0
 713 03d0 033304FD 		ld	t1,-48(s0)
 714              	#APP
 715              	# 175 "src/interruptRoutine.cpp" 1
 176              	        __asm__ volatile("csrw sstatus, %[stat]": :[stat]"r"(sstatus):"a5", "a0", "a1", "a2", "a3",
 716              		csrw sepc, t1
 717              	# 0 "" 2
 718              		.loc 1 176 9 is_stmt 1
 719              		.loc 1 176 118 is_stmt 0
 720              	#NO_APP
 721 03d8 033384FC 		ld	t1,-56(s0)
 722              	.LVL66:
 723              	#APP
 724              	# 176 "src/interruptRoutine.cpp" 1
 177              	        //Riscv::w_sepc(sepc + 4);
 725              		csrw sstatus, t1
 726              	# 0 "" 2
 727              	#NO_APP
 728              	.LBE2:
 178:src/interruptRoutine.cpp ****     } else if (scause == 0x8000000000000009) {
 179:src/interruptRoutine.cpp ****         //spoljasnji hardverski prekid (od konzole)
 180:src/interruptRoutine.cpp ****         uint64 irq = plic_claim();
 181:src/interruptRoutine.cpp ****         if (irq == CONSOLE_IRQ) {
 182:src/interruptRoutine.cpp ****             if (*KConsole::sr & CONSOLE_RX_STATUS_BIT) {
 183:src/interruptRoutine.cpp ****                 KConsole::placeInInput(*KConsole::dr);
 184:src/interruptRoutine.cpp ****             }
 185:src/interruptRoutine.cpp ****             //printString("\nobradjen prekid konzole\n");
 186:src/interruptRoutine.cpp ****             plic_complete(irq);
 187:src/interruptRoutine.cpp ****         } else {
 188:src/interruptRoutine.cpp ****             printString("Neki drugi prekid\n");
GAS LISTING /tmp/cc0MNjWB.s 			page 18


 189:src/interruptRoutine.cpp ****         }
 190:src/interruptRoutine.cpp ****         //console_handler();
 191:src/interruptRoutine.cpp ****         Riscv::w_sepc(sepc);
 192:src/interruptRoutine.cpp ****         Riscv::w_sstatus(sstatus);
 193:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SEIP);
 194:src/interruptRoutine.cpp ****     } else if (scause == 0x8000000000000001) {
 195:src/interruptRoutine.cpp ****         //prekid od tajmera
 196:src/interruptRoutine.cpp ****         //printString("\nPrekid od tajmera\n");
 197:src/interruptRoutine.cpp ****         Scheduler::wake();
 198:src/interruptRoutine.cpp ****         TCB::runningTimeSlice++;
 199:src/interruptRoutine.cpp ****         if (TCB::runningTimeSlice >= TCB::running->getTimeSlice()) {
 200:src/interruptRoutine.cpp ****             //printString("\nMenjam kontekst\n");
 201:src/interruptRoutine.cpp ****             TCB::yield();
 202:src/interruptRoutine.cpp ****             TCB::runningTimeSlice = 0;
 203:src/interruptRoutine.cpp ****         }
 204:src/interruptRoutine.cpp **** 
 205:src/interruptRoutine.cpp ****         Riscv::w_sepc(sepc);
 206:src/interruptRoutine.cpp ****         Riscv::w_sstatus(sstatus);
 207:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SSIP);
 208:src/interruptRoutine.cpp ****     } else {
 209:src/interruptRoutine.cpp ****         printString("\nGreska u prekidnoj rutini\n");
 210:src/interruptRoutine.cpp ****         printString("scause: ");
 211:src/interruptRoutine.cpp ****         printInteger(scause);
 212:src/interruptRoutine.cpp ****         printString("\nsepc: ");
 213:src/interruptRoutine.cpp ****         printInteger(sepc);
 214:src/interruptRoutine.cpp ****     }
 215:src/interruptRoutine.cpp **** }
 729              		.loc 1 215 1
 730 03e0 6F00C01A 		j	.L41
 731              	.LVL67:
 732              	.L3:
 733              	.LBB10:
 734              	.LBB3:
 178:src/interruptRoutine.cpp ****     } else if (scause == 0x8000000000000009) {
 735              		.loc 1 178 12 is_stmt 1
 736              	.LBB4:
 737 03e4 033784FD 		ld	a4,-40(s0)
 738              	.LVL68:
 739 03e8 9307F0FF 		li	a5,-1
 740 03ec 9397F703 		slli	a5,a5,63
 741 03f0 93879700 		addi	a5,a5,9
 742 03f4 6312F70A 		bne	a4,a5,.L34
 743              	.LBB5:
 180:src/interruptRoutine.cpp ****         if (irq == CONSOLE_IRQ) {
 744              		.loc 1 180 9
 180:src/interruptRoutine.cpp ****         if (irq == CONSOLE_IRQ) {
 745              		.loc 1 180 32 is_stmt 0
 746 03f8 97000000 		call	plic_claim@plt
 746      E7800000 
 747              	.LVL69:
 748 0400 93070500 		mv	a5,a0
 180:src/interruptRoutine.cpp ****         if (irq == CONSOLE_IRQ) {
 749              		.loc 1 180 33
 750 0404 2330F4F8 		sd	a5,-128(s0)
 751              	.LVL70:
 181:src/interruptRoutine.cpp ****             if (*KConsole::sr & CONSOLE_RX_STATUS_BIT) {
 752              		.loc 1 181 9 is_stmt 1
GAS LISTING /tmp/cc0MNjWB.s 			page 19


 753 0408 033704F8 		ld	a4,-128(s0)
 754 040c 9307A000 		li	a5,10
 755 0410 6318F704 		bne	a4,a5,.L35
 182:src/interruptRoutine.cpp ****                 KConsole::placeInInput(*KConsole::dr);
 756              		.loc 1 182 13
 182:src/interruptRoutine.cpp ****                 KConsole::placeInInput(*KConsole::dr);
 757              		.loc 1 182 17 is_stmt 0
 758 0414 97070000 		la	a5,_ZN8KConsole2srE
 758      83B70700 
 759 041c 83B70700 		ld	a5,0(a5)
 760 0420 83C70700 		lbu	a5,0(a5)
 182:src/interruptRoutine.cpp ****                 KConsole::placeInInput(*KConsole::dr);
 761              		.loc 1 182 31
 762 0424 93F71700 		andi	a5,a5,1
 182:src/interruptRoutine.cpp ****                 KConsole::placeInInput(*KConsole::dr);
 763              		.loc 1 182 13
 764 0428 63800702 		beqz	a5,.L36
 183:src/interruptRoutine.cpp ****             }
 765              		.loc 1 183 17 is_stmt 1
 183:src/interruptRoutine.cpp ****             }
 766              		.loc 1 183 39 is_stmt 0
 767 042c 97070000 		la	a5,_ZN8KConsole2drE
 767      83B70700 
 768 0434 83B70700 		ld	a5,0(a5)
 769 0438 83C70700 		lbu	a5,0(a5)
 770 043c 13850700 		mv	a0,a5
 771              	.LVL71:
 772 0440 97000000 		call	_ZN8KConsole12placeInInputEc@plt
 772      E7800000 
 773              	.LVL72:
 774              	.L36:
 186:src/interruptRoutine.cpp ****         } else {
 775              		.loc 1 186 13 is_stmt 1
 186:src/interruptRoutine.cpp ****         } else {
 776              		.loc 1 186 26 is_stmt 0
 777 0448 833704F8 		ld	a5,-128(s0)
 778 044c 9B870700 		sext.w	a5,a5
 779 0450 13850700 		mv	a0,a5
 780 0454 97000000 		call	plic_complete@plt
 780      E7800000 
 781              	.LVL73:
 782 045c 6F004001 		j	.L37
 783              	.LVL74:
 784              	.L35:
 188:src/interruptRoutine.cpp ****         }
 785              		.loc 1 188 13 is_stmt 1
 188:src/interruptRoutine.cpp ****         }
 786              		.loc 1 188 24 is_stmt 0
 787 0460 17050000 		lla	a0,.LC3
 787      13050500 
 788              	.LVL75:
 789 0468 97000000 		call	_Z11printStringPKc@plt
 789      E7800000 
 790              	.LVL76:
 791              	.L37:
 191:src/interruptRoutine.cpp ****         Riscv::w_sstatus(sstatus);
 792              		.loc 1 191 9 is_stmt 1
GAS LISTING /tmp/cc0MNjWB.s 			page 20


 191:src/interruptRoutine.cpp ****         Riscv::w_sstatus(sstatus);
 793              		.loc 1 191 22 is_stmt 0
 794 0470 033504FD 		ld	a0,-48(s0)
 795 0474 97000000 		call	_ZN5Riscv6w_sepcEm
 795      E7800000 
 796              	.LVL77:
 192:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SEIP);
 797              		.loc 1 192 9 is_stmt 1
 192:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SEIP);
 798              		.loc 1 192 25 is_stmt 0
 799 047c 033584FC 		ld	a0,-56(s0)
 800 0480 97000000 		call	_ZN5Riscv9w_sstatusEm
 800      E7800000 
 801              	.LVL78:
 193:src/interruptRoutine.cpp ****     } else if (scause == 0x8000000000000001) {
 802              		.loc 1 193 9 is_stmt 1
 193:src/interruptRoutine.cpp ****     } else if (scause == 0x8000000000000001) {
 803              		.loc 1 193 22 is_stmt 0
 804 0488 13050020 		li	a0,512
 805 048c 97000000 		call	_ZN5Riscv6mc_sipEm
 805      E7800000 
 806              	.LVL79:
 807              	.LBE5:
 808              	.LBE4:
 809              	.LBE3:
 810              	.LBE10:
 811              		.loc 1 215 1
 812 0494 6F00800F 		j	.L41
 813              	.LVL80:
 814              	.L34:
 815              	.LBB11:
 816              	.LBB8:
 817              	.LBB6:
 194:src/interruptRoutine.cpp ****         //prekid od tajmera
 818              		.loc 1 194 12 is_stmt 1
 819 0498 033784FD 		ld	a4,-40(s0)
 820 049c 9307F0FF 		li	a5,-1
 821 04a0 9397F703 		slli	a5,a5,63
 822 04a4 93871700 		addi	a5,a5,1
 823 04a8 631EF708 		bne	a4,a5,.L38
 197:src/interruptRoutine.cpp ****         TCB::runningTimeSlice++;
 824              		.loc 1 197 9
 197:src/interruptRoutine.cpp ****         TCB::runningTimeSlice++;
 825              		.loc 1 197 24 is_stmt 0
 826 04ac 97000000 		call	_ZN9Scheduler4wakeEv@plt
 826      E7800000 
 827              	.LVL81:
 198:src/interruptRoutine.cpp ****         if (TCB::runningTimeSlice >= TCB::running->getTimeSlice()) {
 828              		.loc 1 198 9 is_stmt 1
 198:src/interruptRoutine.cpp ****         if (TCB::runningTimeSlice >= TCB::running->getTimeSlice()) {
 829              		.loc 1 198 30 is_stmt 0
 830 04b4 97070000 		la	a5,_ZN3TCB16runningTimeSliceE
 830      83B70700 
 831 04bc 83B70700 		ld	a5,0(a5)
 832 04c0 13871700 		addi	a4,a5,1
 833 04c4 97070000 		la	a5,_ZN3TCB16runningTimeSliceE
 833      83B70700 
GAS LISTING /tmp/cc0MNjWB.s 			page 21


 834 04cc 23B0E700 		sd	a4,0(a5)
 199:src/interruptRoutine.cpp ****             //printString("\nMenjam kontekst\n");
 835              		.loc 1 199 9 is_stmt 1
 199:src/interruptRoutine.cpp ****             //printString("\nMenjam kontekst\n");
 836              		.loc 1 199 64 is_stmt 0
 837 04d0 97070000 		la	a5,_ZN3TCB7runningE
 837      83B70700 
 838 04d8 83B70700 		ld	a5,0(a5)
 839 04dc 13850700 		mv	a0,a5
 840 04e0 97000000 		call	_ZN3TCB12getTimeSliceEv
 840      E7800000 
 841              	.LVL82:
 842 04e8 13070500 		mv	a4,a0
 199:src/interruptRoutine.cpp ****             //printString("\nMenjam kontekst\n");
 843              		.loc 1 199 35
 844 04ec 97070000 		la	a5,_ZN3TCB16runningTimeSliceE
 844      83B70700 
 845 04f4 83B70700 		ld	a5,0(a5)
 846 04f8 B3B7E700 		sgtu	a5,a4,a5
 847 04fc 93C71700 		xori	a5,a5,1
 848 0500 93F7F70F 		andi	a5,a5,0xff
 199:src/interruptRoutine.cpp ****             //printString("\nMenjam kontekst\n");
 849              		.loc 1 199 9
 850 0504 638C0700 		beqz	a5,.L39
 201:src/interruptRoutine.cpp ****             TCB::runningTimeSlice = 0;
 851              		.loc 1 201 13 is_stmt 1
 201:src/interruptRoutine.cpp ****             TCB::runningTimeSlice = 0;
 852              		.loc 1 201 23 is_stmt 0
 853 0508 97000000 		call	_ZN3TCB5yieldEv@plt
 853      E7800000 
 854              	.LVL83:
 202:src/interruptRoutine.cpp ****         }
 855              		.loc 1 202 13 is_stmt 1
 202:src/interruptRoutine.cpp ****         }
 856              		.loc 1 202 35 is_stmt 0
 857 0510 97070000 		la	a5,_ZN3TCB16runningTimeSliceE
 857      83B70700 
 858 0518 23B00700 		sd	zero,0(a5)
 859              	.L39:
 205:src/interruptRoutine.cpp ****         Riscv::w_sstatus(sstatus);
 860              		.loc 1 205 9 is_stmt 1
 205:src/interruptRoutine.cpp ****         Riscv::w_sstatus(sstatus);
 861              		.loc 1 205 22 is_stmt 0
 862 051c 033504FD 		ld	a0,-48(s0)
 863 0520 97000000 		call	_ZN5Riscv6w_sepcEm
 863      E7800000 
 864              	.LVL84:
 206:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SSIP);
 865              		.loc 1 206 9 is_stmt 1
 206:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SSIP);
 866              		.loc 1 206 25 is_stmt 0
 867 0528 033584FC 		ld	a0,-56(s0)
 868 052c 97000000 		call	_ZN5Riscv9w_sstatusEm
 868      E7800000 
 869              	.LVL85:
 207:src/interruptRoutine.cpp ****     } else {
 870              		.loc 1 207 9 is_stmt 1
GAS LISTING /tmp/cc0MNjWB.s 			page 22


 207:src/interruptRoutine.cpp ****     } else {
 871              		.loc 1 207 22 is_stmt 0
 872 0534 13052000 		li	a0,2
 873 0538 97000000 		call	_ZN5Riscv6mc_sipEm
 873      E7800000 
 874              	.LVL86:
 875              	.LBE6:
 876              	.LBE8:
 877              	.LBE11:
 878              		.loc 1 215 1
 879 0540 6F00C004 		j	.L41
 880              	.LVL87:
 881              	.L38:
 882              	.LBB12:
 883              	.LBB9:
 884              	.LBB7:
 209:src/interruptRoutine.cpp ****         printString("scause: ");
 885              		.loc 1 209 9 is_stmt 1
 209:src/interruptRoutine.cpp ****         printString("scause: ");
 886              		.loc 1 209 20 is_stmt 0
 887 0544 17050000 		lla	a0,.LC4
 887      13050500 
 888 054c 97000000 		call	_Z11printStringPKc@plt
 888      E7800000 
 889              	.LVL88:
 210:src/interruptRoutine.cpp ****         printInteger(scause);
 890              		.loc 1 210 9 is_stmt 1
 210:src/interruptRoutine.cpp ****         printInteger(scause);
 891              		.loc 1 210 20 is_stmt 0
 892 0554 17050000 		lla	a0,.LC5
 892      13050500 
 893 055c 97000000 		call	_Z11printStringPKc@plt
 893      E7800000 
 894              	.LVL89:
 211:src/interruptRoutine.cpp ****         printString("\nsepc: ");
 895              		.loc 1 211 9 is_stmt 1
 211:src/interruptRoutine.cpp ****         printString("\nsepc: ");
 896              		.loc 1 211 21 is_stmt 0
 897 0564 033584FD 		ld	a0,-40(s0)
 898 0568 97000000 		call	_Z12printIntegerm@plt
 898      E7800000 
 899              	.LVL90:
 212:src/interruptRoutine.cpp ****         printInteger(sepc);
 900              		.loc 1 212 9 is_stmt 1
 212:src/interruptRoutine.cpp ****         printInteger(sepc);
 901              		.loc 1 212 20 is_stmt 0
 902 0570 17050000 		lla	a0,.LC2
 902      13050500 
 903 0578 97000000 		call	_Z11printStringPKc@plt
 903      E7800000 
 904              	.LVL91:
 213:src/interruptRoutine.cpp ****     }
 905              		.loc 1 213 9 is_stmt 1
 213:src/interruptRoutine.cpp ****     }
 906              		.loc 1 213 21 is_stmt 0
 907 0580 033504FD 		ld	a0,-48(s0)
 908 0584 97000000 		call	_Z12printIntegerm@plt
GAS LISTING /tmp/cc0MNjWB.s 			page 23


 908      E7800000 
 909              	.LVL92:
 910              	.L41:
 911              	.LBE7:
 912              	.LBE9:
 913              	.LBE12:
 914              		.loc 1 215 1
 915 058c 13000000 		nop
 916 0590 83308107 		ld	ra,120(sp)
 917              		.cfi_restore 1
 918 0594 03340107 		ld	s0,112(sp)
 919              		.cfi_restore 8
 920              		.cfi_def_cfa 2, 128
 921              	.LVL93:
 922 0598 83348106 		ld	s1,104(sp)
 923              		.cfi_restore 9
 924 059c 13010108 		addi	sp,sp,128
 925              		.cfi_def_cfa_offset 0
 926              	.LVL94:
 927 05a0 67800000 		jr	ra
 928              		.cfi_endproc
 929              	.LFE51:
 931              		.section	.text._ZN5Riscv6w_sepcEm,"axG",@progbits,_ZN5Riscv6w_sepcEm,comdat
 932              		.align	2
 933              		.weak	_ZN5Riscv6w_sepcEm
 935              	_ZN5Riscv6w_sepcEm:
 936              	.LFB6:
 937              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	static void popSppSpie();
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp **** 	//stavljanje registara x3-x31 na stek
  16:src/../h/Riscv.hpp **** 	static void pushRegisters();    //implementacija u asm
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp **** 	//skidanje registara x3-x31 sa steka
  19:src/../h/Riscv.hpp **** 	static void popRegisters();     //implementacija u asm
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp **** 	//read scause
  22:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp **** 	//write scause
  25:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp **** 	//read sepc
  28:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  29:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/cc0MNjWB.s 			page 24


  30:src/../h/Riscv.hpp **** 	//write sepc
  31:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp **** 	//read stvec
  34:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp **** 	//write stvec
  37:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  40:src/../h/Riscv.hpp **** 		//postoji zahtev za softverski prekid
  41:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),
  42:src/../h/Riscv.hpp **** 		//postoji prekid od tajmera
  43:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),
  44:src/../h/Riscv.hpp **** 		//postoji zahtev za spoljasnji hardverski prekid
  45:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)
  46:src/../h/Riscv.hpp **** 	};
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp **** 	//mask set sip
  49:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** 	//mask clear sip
  52:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp **** 	//read sip
  55:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  56:src/../h/Riscv.hpp **** 
  57:src/../h/Riscv.hpp **** 	//write sip
  58:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  59:src/../h/Riscv.hpp **** 
  60:src/../h/Riscv.hpp **** 	//kada se pozove sret, SIE dobija vrednost SPIE, SPIE se postavlja na 1,
  61:src/../h/Riscv.hpp **** 	//rezim se postavlja na osnovu SPP bita, SPP se postavlja na 0
  62:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  63:src/../h/Riscv.hpp **** 		//1 - dozvoljeni prekidi; 0- nedozvoljeni prekidi; igonrise se u korisnickom rezimu
  64:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  65:src/../h/Riscv.hpp **** 		//prethodna vrednost bita SIE
  66:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  67:src/../h/Riscv.hpp **** 		//iz kog rezima se desio skok; 0 - iz korisnickog; 1 - iz sistemskog
  68:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  69:src/../h/Riscv.hpp **** 	};
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp **** 	//mask set sstatus
  72:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp **** 	//mask clear sstatus
  75:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp **** 	//read sstatus
  78:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp **** 	//write sstatus
  81:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  84:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  85:src/../h/Riscv.hpp **** 
  86:src/../h/Riscv.hpp **** };
GAS LISTING /tmp/cc0MNjWB.s 			page 25


  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  89:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  90:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  91:src/../h/Riscv.hpp **** 	return scause;
  92:src/../h/Riscv.hpp **** }
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  95:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  99:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
 100:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
 101:src/../h/Riscv.hpp **** 	return sepc;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
 938              		.loc 2 104 40 is_stmt 1
 939              		.cfi_startproc
 940              	.LVL95:
 941 0000 130101FF 		addi	sp,sp,-16
 942              		.cfi_def_cfa_offset 16
 943 0004 23348100 		sd	s0,8(sp)
 944              		.cfi_offset 8, -8
 945 0008 13040101 		addi	s0,sp,16
 946              		.cfi_def_cfa 8, 0
 105:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 947              		.loc 2 105 2
 948              		.loc 2 105 59 is_stmt 0
 949              	#APP
 950              	# 105 "src/../h/Riscv.hpp" 1
 106              	}
 951              		csrw sepc, a0
 952              	# 0 "" 2
 953              		.loc 2 106 1
 954              	#NO_APP
 955 0010 03348100 		ld	s0,8(sp)
 956              		.cfi_restore 8
 957              		.cfi_def_cfa 2, 16
 958 0014 13010101 		addi	sp,sp,16
 959              		.cfi_def_cfa_offset 0
 960 0018 67800000 		jr	ra
 961              		.cfi_endproc
 962              	.LFE6:
 964              		.section	.text._ZN5Riscv6mc_sipEm,"axG",@progbits,_ZN5Riscv6mc_sipEm,comdat
 965              		.align	2
 966              		.weak	_ZN5Riscv6mc_sipEm
 968              	_ZN5Riscv6mc_sipEm:
 969              	.LFB10:
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 109:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 110:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 111:src/../h/Riscv.hpp **** 	return stvec;
 112:src/../h/Riscv.hpp **** }
 113:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/cc0MNjWB.s 			page 26


 114:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 115:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 116:src/../h/Riscv.hpp **** }
 117:src/../h/Riscv.hpp **** 
 118:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 119:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 120:src/../h/Riscv.hpp **** }
 121:src/../h/Riscv.hpp **** 
 122:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 970              		.loc 2 122 40 is_stmt 1
 971              		.cfi_startproc
 972              	.LVL96:
 973 0000 130101FF 		addi	sp,sp,-16
 974              		.cfi_def_cfa_offset 16
 975 0004 23348100 		sd	s0,8(sp)
 976              		.cfi_offset 8, -8
 977 0008 13040101 		addi	s0,sp,16
 978              		.cfi_def_cfa 8, 0
 123:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 979              		.loc 2 123 2
 980              		.loc 2 123 58 is_stmt 0
 981              	#APP
 982              	# 123 "src/../h/Riscv.hpp" 1
 124              	}
 983              		csrc sip, a0
 984              	# 0 "" 2
 985              		.loc 2 124 1
 986              	#NO_APP
 987 0010 03348100 		ld	s0,8(sp)
 988              		.cfi_restore 8
 989              		.cfi_def_cfa 2, 16
 990 0014 13010101 		addi	sp,sp,16
 991              		.cfi_def_cfa_offset 0
 992 0018 67800000 		jr	ra
 993              		.cfi_endproc
 994              	.LFE10:
 996              		.section	.text._ZN5Riscv9w_sstatusEm,"axG",@progbits,_ZN5Riscv9w_sstatusEm,comdat
 997              		.align	2
 998              		.weak	_ZN5Riscv9w_sstatusEm
 1000              	_ZN5Riscv9w_sstatusEm:
 1001              	.LFB16:
 125:src/../h/Riscv.hpp **** 
 126:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 127:src/../h/Riscv.hpp **** 	uint64 volatile sip;
 128:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sip], sip": [sip] "=r"(sip));
 129:src/../h/Riscv.hpp **** 	return sip;
 130:src/../h/Riscv.hpp **** }
 131:src/../h/Riscv.hpp **** 
 132:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 133:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sip, %[sip]": :[sip] "r"(sip));
 134:src/../h/Riscv.hpp **** }
 135:src/../h/Riscv.hpp **** 
 136:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 137:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sstatus, %[mask]": :[mask] "r"(mask));
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
GAS LISTING /tmp/cc0MNjWB.s 			page 27


 141:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sstatus, %[mask]": :[mask] "r"(mask));
 142:src/../h/Riscv.hpp **** }
 143:src/../h/Riscv.hpp **** 
 144:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 145:src/../h/Riscv.hpp **** 	uint64 volatile sstatus;
 146:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sstatus], sstatus": [sstatus] "=r"(sstatus));
 147:src/../h/Riscv.hpp **** 	return sstatus;
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus) {
 1002              		.loc 2 150 46 is_stmt 1
 1003              		.cfi_startproc
 1004              	.LVL97:
 1005 0000 130101FF 		addi	sp,sp,-16
 1006              		.cfi_def_cfa_offset 16
 1007 0004 23348100 		sd	s0,8(sp)
 1008              		.cfi_offset 8, -8
 1009 0008 13040101 		addi	s0,sp,16
 1010              		.cfi_def_cfa 8, 0
 151:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sstatus, %[sstatus]": :[sstatus] "r"(sstatus));
 1011              		.loc 2 151 2
 1012              		.loc 2 151 71 is_stmt 0
 1013              	#APP
 1014              	# 151 "src/../h/Riscv.hpp" 1
 152              	}
 1015              		csrw sstatus, a0
 1016              	# 0 "" 2
 1017              		.loc 2 152 1
 1018              	#NO_APP
 1019 0010 03348100 		ld	s0,8(sp)
 1020              		.cfi_restore 8
 1021              		.cfi_def_cfa 2, 16
 1022 0014 13010101 		addi	sp,sp,16
 1023              		.cfi_def_cfa_offset 0
 1024 0018 67800000 		jr	ra
 1025              		.cfi_endproc
 1026              	.LFE16:
 1028              		.section	.text._ZN3TCB11setFinishedEb,"axG",@progbits,_ZN3TCB11setFinishedEb,comdat
 1029              		.align	2
 1030              		.weak	_ZN3TCB11setFinishedEb
 1032              	_ZN3TCB11setFinishedEb:
 1033              	.LFB33:
 1034              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 5/23/23.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJEKAT2023_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJEKAT2023_TCB_HPP
   7:src/../h/TCB.hpp **** 
   8:src/../h/TCB.hpp **** #include "../lib/hw.h"
   9:src/../h/TCB.hpp **** #include "../h/ThreadQueue.hpp"
  10:src/../h/TCB.hpp **** 
  11:src/../h/TCB.hpp **** class TCB {
  12:src/../h/TCB.hpp **** public:
  13:src/../h/TCB.hpp **** 	friend class Scheduler;
  14:src/../h/TCB.hpp **** 
GAS LISTING /tmp/cc0MNjWB.s 			page 28


  15:src/../h/TCB.hpp **** 	using Body = void (*)(void*);
  16:src/../h/TCB.hpp **** 
  17:src/../h/TCB.hpp **** 	static TCB* createThread(Body function, void* args, uint64* stack);
  18:src/../h/TCB.hpp **** 	static void start(TCB* newTcb);
  19:src/../h/TCB.hpp **** 
  20:src/../h/TCB.hpp **** 	bool isFinished() { return finished; }
  21:src/../h/TCB.hpp **** 
  22:src/../h/TCB.hpp **** 	void setFinished(bool finish) { this->finished = finish; }
 1035              		.loc 3 22 7 is_stmt 1
 1036              		.cfi_startproc
 1037              	.LVL98:
 1038 0000 130101FF 		addi	sp,sp,-16
 1039              		.cfi_def_cfa_offset 16
 1040 0004 23348100 		sd	s0,8(sp)
 1041              		.cfi_offset 8, -8
 1042 0008 13040101 		addi	s0,sp,16
 1043              		.cfi_def_cfa 8, 0
 1044              		.loc 3 22 34
 1045              		.loc 3 22 49 is_stmt 0
 1046 000c 2308B502 		sb	a1,48(a0)
 1047              		.loc 3 22 59
 1048 0010 03348100 		ld	s0,8(sp)
 1049              		.cfi_restore 8
 1050              		.cfi_def_cfa 2, 16
 1051 0014 13010101 		addi	sp,sp,16
 1052              		.cfi_def_cfa_offset 0
 1053 0018 67800000 		jr	ra
 1054              		.cfi_endproc
 1055              	.LFE33:
 1057              		.section	.text._ZN3TCB12getTimeSliceEv,"axG",@progbits,_ZN3TCB12getTimeSliceEv,comdat
 1058              		.align	2
 1059              		.weak	_ZN3TCB12getTimeSliceEv
 1061              	_ZN3TCB12getTimeSliceEv:
 1062              	.LFB36:
  23:src/../h/TCB.hpp **** 
  24:src/../h/TCB.hpp **** 	bool isBlocked() { return blocked; }
  25:src/../h/TCB.hpp **** 
  26:src/../h/TCB.hpp **** 	void setBlocked(bool block) { this->blocked = block; }
  27:src/../h/TCB.hpp **** 
  28:src/../h/TCB.hpp **** 	uint64 getTimeSlice() { return timeSlice; }
 1063              		.loc 3 28 9 is_stmt 1
 1064              		.cfi_startproc
 1065              	.LVL99:
 1066 0000 130101FF 		addi	sp,sp,-16
 1067              		.cfi_def_cfa_offset 16
 1068 0004 23348100 		sd	s0,8(sp)
 1069              		.cfi_offset 8, -8
 1070 0008 13040101 		addi	s0,sp,16
 1071              		.cfi_def_cfa 8, 0
 1072              		.loc 3 28 26
 1073              		.loc 3 28 44 is_stmt 0
 1074 000c 03358502 		ld	a0,40(a0)
 1075              	.LVL100:
 1076 0010 03348100 		ld	s0,8(sp)
 1077              		.cfi_restore 8
 1078              		.cfi_def_cfa 2, 16
 1079 0014 13010101 		addi	sp,sp,16
GAS LISTING /tmp/cc0MNjWB.s 			page 29


 1080              		.cfi_def_cfa_offset 0
 1081 0018 67800000 		jr	ra
 1082              		.cfi_endproc
 1083              	.LFE36:
 1085              		.text
 1086              	.Letext0:
 1087              		.file 4 "src/../lib/hw.h"
 1088              		.file 5 "src/../h/MemoryAllocator.hpp"
 1089              		.file 6 "src/../h/syscall_c.hpp"
 1090              		.file 7 "src/../h/KSem.hpp"
 1091              		.file 8 "src/../h/../h/ThreadQueue.hpp"
 1092              		.file 9 "src/../h/Scheduler.hpp"
 1093              		.file 10 "src/../h/KConsole.hpp"
 1094              		.file 11 "src/../h/../test/printing.hpp"
 1095              		.file 12 "src/../h/helper.hpp"
GAS LISTING /tmp/cc0MNjWB.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 interruptRoutine.cpp
     /tmp/cc0MNjWB.s:29     .text:0000000000000000 interruptRoutine
     /tmp/cc0MNjWB.s:33     .text:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:34     .text:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:35     .text:0000000000000004 .L0 
     /tmp/cc0MNjWB.s:39     .text:0000000000000010 .L0 
     /tmp/cc0MNjWB.s:40     .text:0000000000000010 .L0 
     /tmp/cc0MNjWB.s:41     .text:0000000000000010 .L0 
     /tmp/cc0MNjWB.s:43     .text:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:45     .text:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:46     .text:0000000000000014 .L0 
src/interruptRoutine.cpp:24     .text:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:55     .text:000000000000001c .L0 
src/interruptRoutine.cpp:25     .text:000000000000001c .L0 
     /tmp/cc0MNjWB.s:65     .text:0000000000000024 .L0 
src/interruptRoutine.cpp:26     .text:0000000000000024 .L0 
     /tmp/cc0MNjWB.s:75     .text:000000000000002c .L0 
     /tmp/cc0MNjWB.s:76     .text:000000000000002c .L0 
src/interruptRoutine.cpp:30     .text:000000000000002c .L0 
     /tmp/cc0MNjWB.s:86     .text:0000000000000034 .L0 
src/interruptRoutine.cpp:31     .text:0000000000000034 .L0 
     /tmp/cc0MNjWB.s:96     .text:000000000000003c .L0 
src/interruptRoutine.cpp:32     .text:000000000000003c .L0 
     /tmp/cc0MNjWB.s:106    .text:0000000000000044 .L0 
src/interruptRoutine.cpp:33     .text:0000000000000044 .L0 
     /tmp/cc0MNjWB.s:116    .text:000000000000004c .L0 
src/interruptRoutine.cpp:34     .text:000000000000004c .L0 
     /tmp/cc0MNjWB.s:126    .text:0000000000000054 .L0 
src/interruptRoutine.cpp:35     .text:0000000000000054 .L0 
     /tmp/cc0MNjWB.s:136    .text:000000000000005c .L0 
src/interruptRoutine.cpp:36     .text:000000000000005c .L0 
     /tmp/cc0MNjWB.s:146    .text:0000000000000064 .L0 
src/interruptRoutine.cpp:37     .text:0000000000000064 .L0 
     /tmp/cc0MNjWB.s:157    .text:000000000000006c .L0 
     /tmp/cc0MNjWB.s:161    .text:0000000000000078 .L0 
     /tmp/cc0MNjWB.s:166    .text:0000000000000084 .L0 
     /tmp/cc0MNjWB.s:274    .text:0000000000000110 .L0 
     /tmp/cc0MNjWB.s:275    .text:0000000000000110 .L0 
     /tmp/cc0MNjWB.s:276    .text:0000000000000110 .L0 
     /tmp/cc0MNjWB.s:283    .text:0000000000000128 .L0 
src/interruptRoutine.cpp:46     .text:0000000000000128 .L0 
     /tmp/cc0MNjWB.s:290    .text:000000000000012c .L0 
     /tmp/cc0MNjWB.s:294    .text:0000000000000130 .L0 
     /tmp/cc0MNjWB.s:295    .text:0000000000000130 .L0 
     /tmp/cc0MNjWB.s:296    .text:0000000000000130 .L0 
     /tmp/cc0MNjWB.s:301    .text:0000000000000140 .L0 
src/interruptRoutine.cpp:52     .text:0000000000000140 .L0 
     /tmp/cc0MNjWB.s:308    .text:0000000000000144 .L0 
     /tmp/cc0MNjWB.s:312    .text:0000000000000148 .L0 
     /tmp/cc0MNjWB.s:313    .text:0000000000000148 .L0 
     /tmp/cc0MNjWB.s:314    .text:0000000000000148 .L0 
     /tmp/cc0MNjWB.s:318    .text:0000000000000154 .L0 
     /tmp/cc0MNjWB.s:320    .text:0000000000000158 .L0 
     /tmp/cc0MNjWB.s:327    .text:0000000000000170 .L0 
     /tmp/cc0MNjWB.s:329    .text:0000000000000174 .L0 
     /tmp/cc0MNjWB.s:330    .text:0000000000000174 .L0 
GAS LISTING /tmp/cc0MNjWB.s 			page 31


     /tmp/cc0MNjWB.s:336    .text:0000000000000188 .L0 
     /tmp/cc0MNjWB.s:337    .text:0000000000000188 .L0 
     /tmp/cc0MNjWB.s:340    .text:0000000000000190 .L0 
     /tmp/cc0MNjWB.s:342    .text:0000000000000194 .L0 
src/interruptRoutine.cpp:63     .text:0000000000000194 .L0 
     /tmp/cc0MNjWB.s:351    .text:000000000000019c .L0 
src/interruptRoutine.cpp:65     .text:000000000000019c .L0 
     /tmp/cc0MNjWB.s:359    .text:00000000000001a0 .L0 
src/interruptRoutine.cpp:67     .text:00000000000001a0 .L0 
     /tmp/cc0MNjWB.s:366    .text:00000000000001a4 .L0 
     /tmp/cc0MNjWB.s:370    .text:00000000000001a8 .L0 
     /tmp/cc0MNjWB.s:371    .text:00000000000001a8 .L0 
     /tmp/cc0MNjWB.s:372    .text:00000000000001a8 .L0 
     /tmp/cc0MNjWB.s:1032   .text._ZN3TCB11setFinishedEb:0000000000000000 _ZN3TCB11setFinishedEb
     /tmp/cc0MNjWB.s:379    .text:00000000000001c4 .L0 
     /tmp/cc0MNjWB.s:380    .text:00000000000001c4 .L0 
     /tmp/cc0MNjWB.s:383    .text:00000000000001cc .L0 
     /tmp/cc0MNjWB.s:384    .text:00000000000001cc .L0 
     /tmp/cc0MNjWB.s:387    .text:00000000000001d4 .L0 
     /tmp/cc0MNjWB.s:391    .text:00000000000001d8 .L0 
     /tmp/cc0MNjWB.s:392    .text:00000000000001d8 .L0 
     /tmp/cc0MNjWB.s:393    .text:00000000000001d8 .L0 
     /tmp/cc0MNjWB.s:396    .text:00000000000001e0 .L0 
     /tmp/cc0MNjWB.s:400    .text:00000000000001e4 .L0 
     /tmp/cc0MNjWB.s:401    .text:00000000000001e4 .L0 
     /tmp/cc0MNjWB.s:402    .text:00000000000001e4 .L0 
     /tmp/cc0MNjWB.s:407    .text:00000000000001f4 .L0 
     /tmp/cc0MNjWB.s:408    .text:00000000000001f4 .L0 
     /tmp/cc0MNjWB.s:411    .text:00000000000001fc .L0 
     /tmp/cc0MNjWB.s:415    .text:0000000000000200 .L0 
     /tmp/cc0MNjWB.s:416    .text:0000000000000200 .L0 
     /tmp/cc0MNjWB.s:417    .text:0000000000000200 .L0 
     /tmp/cc0MNjWB.s:420    .text:0000000000000208 .L0 
     /tmp/cc0MNjWB.s:422    .text:000000000000020c .L0 
     /tmp/cc0MNjWB.s:427    .text:000000000000021c .L0 
     /tmp/cc0MNjWB.s:429    .text:0000000000000220 .L0 
     /tmp/cc0MNjWB.s:430    .text:0000000000000220 .L0 
     /tmp/cc0MNjWB.s:433    .text:0000000000000228 .L0 
     /tmp/cc0MNjWB.s:435    .text:000000000000022c .L0 
src/interruptRoutine.cpp:90     .text:000000000000022c .L0 
     /tmp/cc0MNjWB.s:444    .text:0000000000000234 .L0 
src/interruptRoutine.cpp:92     .text:0000000000000234 .L0 
     /tmp/cc0MNjWB.s:452    .text:0000000000000238 .L0 
src/interruptRoutine.cpp:94     .text:0000000000000238 .L0 
     /tmp/cc0MNjWB.s:459    .text:000000000000023c .L0 
     /tmp/cc0MNjWB.s:463    .text:0000000000000240 .L0 
     /tmp/cc0MNjWB.s:464    .text:0000000000000240 .L0 
     /tmp/cc0MNjWB.s:465    .text:0000000000000240 .L0 
     /tmp/cc0MNjWB.s:470    .text:0000000000000250 .L0 
src/interruptRoutine.cpp:100    .text:0000000000000250 .L0 
     /tmp/cc0MNjWB.s:477    .text:0000000000000254 .L0 
     /tmp/cc0MNjWB.s:481    .text:0000000000000258 .L0 
     /tmp/cc0MNjWB.s:482    .text:0000000000000258 .L0 
     /tmp/cc0MNjWB.s:483    .text:0000000000000258 .L0 
     /tmp/cc0MNjWB.s:488    .text:0000000000000268 .L0 
src/interruptRoutine.cpp:106    .text:0000000000000268 .L0 
     /tmp/cc0MNjWB.s:495    .text:000000000000026c .L0 
GAS LISTING /tmp/cc0MNjWB.s 			page 32


     /tmp/cc0MNjWB.s:499    .text:0000000000000270 .L0 
     /tmp/cc0MNjWB.s:500    .text:0000000000000270 .L0 
     /tmp/cc0MNjWB.s:501    .text:0000000000000270 .L0 
     /tmp/cc0MNjWB.s:506    .text:0000000000000280 .L0 
src/interruptRoutine.cpp:112    .text:0000000000000280 .L0 
     /tmp/cc0MNjWB.s:513    .text:0000000000000284 .L0 
     /tmp/cc0MNjWB.s:517    .text:0000000000000288 .L0 
     /tmp/cc0MNjWB.s:518    .text:0000000000000288 .L0 
     /tmp/cc0MNjWB.s:521    .text:0000000000000290 .L0 
src/interruptRoutine.cpp:118    .text:0000000000000290 .L0 
     /tmp/cc0MNjWB.s:530    .text:0000000000000298 .L0 
src/interruptRoutine.cpp:120    .text:0000000000000298 .L0 
     /tmp/cc0MNjWB.s:538    .text:000000000000029c .L0 
src/interruptRoutine.cpp:122    .text:000000000000029c .L0 
     /tmp/cc0MNjWB.s:545    .text:00000000000002a0 .L0 
     /tmp/cc0MNjWB.s:548    .text:00000000000002a8 .L0 
     /tmp/cc0MNjWB.s:549    .text:00000000000002a8 .L0 
     /tmp/cc0MNjWB.s:556    .text:00000000000002c4 .L0 
     /tmp/cc0MNjWB.s:557    .text:00000000000002c4 .L0 
     /tmp/cc0MNjWB.s:560    .text:00000000000002cc .L0 
     /tmp/cc0MNjWB.s:564    .text:00000000000002d0 .L0 
     /tmp/cc0MNjWB.s:565    .text:00000000000002d0 .L0 
     /tmp/cc0MNjWB.s:566    .text:00000000000002d0 .L0 
     /tmp/cc0MNjWB.s:569    .text:00000000000002d8 .L0 
src/interruptRoutine.cpp:131    .text:00000000000002d8 .L0 
     /tmp/cc0MNjWB.s:576    .text:00000000000002dc .L0 
     /tmp/cc0MNjWB.s:580    .text:00000000000002e0 .L0 
     /tmp/cc0MNjWB.s:581    .text:00000000000002e0 .L0 
     /tmp/cc0MNjWB.s:582    .text:00000000000002e0 .L0 
     /tmp/cc0MNjWB.s:588    .text:00000000000002f4 .L0 
     /tmp/cc0MNjWB.s:592    .text:00000000000002f8 .L0 
     /tmp/cc0MNjWB.s:593    .text:00000000000002f8 .L0 
     /tmp/cc0MNjWB.s:594    .text:00000000000002f8 .L0 
     /tmp/cc0MNjWB.s:598    .text:0000000000000304 .L0 
     /tmp/cc0MNjWB.s:600    .text:0000000000000308 .L0 
     /tmp/cc0MNjWB.s:607    .text:0000000000000320 .L0 
     /tmp/cc0MNjWB.s:609    .text:0000000000000324 .L0 
     /tmp/cc0MNjWB.s:610    .text:0000000000000324 .L0 
     /tmp/cc0MNjWB.s:613    .text:000000000000032c .L0 
     /tmp/cc0MNjWB.s:615    .text:0000000000000330 .L0 
src/interruptRoutine.cpp:146    .text:0000000000000330 .L0 
     /tmp/cc0MNjWB.s:624    .text:0000000000000338 .L0 
src/interruptRoutine.cpp:148    .text:0000000000000338 .L0 
     /tmp/cc0MNjWB.s:632    .text:000000000000033c .L0 
src/interruptRoutine.cpp:150    .text:000000000000033c .L0 
     /tmp/cc0MNjWB.s:639    .text:0000000000000340 .L0 
     /tmp/cc0MNjWB.s:643    .text:0000000000000344 .L0 
     /tmp/cc0MNjWB.s:644    .text:0000000000000344 .L0 
     /tmp/cc0MNjWB.s:645    .text:0000000000000344 .L0 
     /tmp/cc0MNjWB.s:650    .text:0000000000000354 .L0 
     /tmp/cc0MNjWB.s:654    .text:0000000000000358 .L0 
     /tmp/cc0MNjWB.s:655    .text:0000000000000358 .L0 
     /tmp/cc0MNjWB.s:656    .text:0000000000000358 .L0 
     /tmp/cc0MNjWB.s:660    .text:0000000000000364 .L0 
     /tmp/cc0MNjWB.s:664    .text:0000000000000368 .L0 
     /tmp/cc0MNjWB.s:665    .text:0000000000000368 .L0 
     /tmp/cc0MNjWB.s:666    .text:0000000000000368 .L0 
GAS LISTING /tmp/cc0MNjWB.s 			page 33


     /tmp/cc0MNjWB.s:670    .text:0000000000000378 .L0 
     /tmp/cc0MNjWB.s:671    .text:0000000000000378 .L0 
     /tmp/cc0MNjWB.s:675    .text:0000000000000384 .L0 
     /tmp/cc0MNjWB.s:676    .text:0000000000000384 .L0 
     /tmp/cc0MNjWB.s:680    .text:0000000000000394 .L0 
     /tmp/cc0MNjWB.s:681    .text:0000000000000394 .L0 
     /tmp/cc0MNjWB.s:685    .text:00000000000003a0 .L0 
     /tmp/cc0MNjWB.s:686    .text:00000000000003a0 .L0 
     /tmp/cc0MNjWB.s:690    .text:00000000000003b0 .L0 
     /tmp/cc0MNjWB.s:691    .text:00000000000003b0 .L0 
     /tmp/cc0MNjWB.s:695    .text:00000000000003bc .L0 
     /tmp/cc0MNjWB.s:698    .text:00000000000003c0 .L0 
     /tmp/cc0MNjWB.s:701    .text:00000000000003c4 .L0 
     /tmp/cc0MNjWB.s:702    .text:00000000000003c4 .L0 
     /tmp/cc0MNjWB.s:712    .text:00000000000003d0 .L0 
     /tmp/cc0MNjWB.s:713    .text:00000000000003d0 .L0 
     /tmp/cc0MNjWB.s:719    .text:00000000000003d8 .L0 
     /tmp/cc0MNjWB.s:721    .text:00000000000003d8 .L0 
     /tmp/cc0MNjWB.s:730    .text:00000000000003e0 .L0 
     /tmp/cc0MNjWB.s:737    .text:00000000000003e4 .L0 
     /tmp/cc0MNjWB.s:745    .text:00000000000003f8 .L0 
     /tmp/cc0MNjWB.s:746    .text:00000000000003f8 .L0 
     /tmp/cc0MNjWB.s:750    .text:0000000000000404 .L0 
     /tmp/cc0MNjWB.s:753    .text:0000000000000408 .L0 
     /tmp/cc0MNjWB.s:757    .text:0000000000000414 .L0 
     /tmp/cc0MNjWB.s:758    .text:0000000000000414 .L0 
     /tmp/cc0MNjWB.s:762    .text:0000000000000424 .L0 
     /tmp/cc0MNjWB.s:764    .text:0000000000000428 .L0 
     /tmp/cc0MNjWB.s:766    .text:000000000000042c .L0 
     /tmp/cc0MNjWB.s:767    .text:000000000000042c .L0 
     /tmp/cc0MNjWB.s:776    .text:0000000000000448 .L0 
     /tmp/cc0MNjWB.s:777    .text:0000000000000448 .L0 
     /tmp/cc0MNjWB.s:786    .text:0000000000000460 .L0 
     /tmp/cc0MNjWB.s:787    .text:0000000000000460 .L0 
     /tmp/cc0MNjWB.s:793    .text:0000000000000470 .L0 
     /tmp/cc0MNjWB.s:794    .text:0000000000000470 .L0 
     /tmp/cc0MNjWB.s:935    .text._ZN5Riscv6w_sepcEm:0000000000000000 _ZN5Riscv6w_sepcEm
     /tmp/cc0MNjWB.s:798    .text:000000000000047c .L0 
     /tmp/cc0MNjWB.s:799    .text:000000000000047c .L0 
     /tmp/cc0MNjWB.s:1000   .text._ZN5Riscv9w_sstatusEm:0000000000000000 _ZN5Riscv9w_sstatusEm
     /tmp/cc0MNjWB.s:803    .text:0000000000000488 .L0 
     /tmp/cc0MNjWB.s:804    .text:0000000000000488 .L0 
     /tmp/cc0MNjWB.s:968    .text._ZN5Riscv6mc_sipEm:0000000000000000 _ZN5Riscv6mc_sipEm
     /tmp/cc0MNjWB.s:812    .text:0000000000000494 .L0 
     /tmp/cc0MNjWB.s:819    .text:0000000000000498 .L0 
     /tmp/cc0MNjWB.s:825    .text:00000000000004ac .L0 
     /tmp/cc0MNjWB.s:826    .text:00000000000004ac .L0 
     /tmp/cc0MNjWB.s:829    .text:00000000000004b4 .L0 
     /tmp/cc0MNjWB.s:830    .text:00000000000004b4 .L0 
     /tmp/cc0MNjWB.s:836    .text:00000000000004d0 .L0 
     /tmp/cc0MNjWB.s:837    .text:00000000000004d0 .L0 
     /tmp/cc0MNjWB.s:1061   .text._ZN3TCB12getTimeSliceEv:0000000000000000 _ZN3TCB12getTimeSliceEv
     /tmp/cc0MNjWB.s:844    .text:00000000000004ec .L0 
     /tmp/cc0MNjWB.s:850    .text:0000000000000504 .L0 
     /tmp/cc0MNjWB.s:852    .text:0000000000000508 .L0 
     /tmp/cc0MNjWB.s:853    .text:0000000000000508 .L0 
     /tmp/cc0MNjWB.s:856    .text:0000000000000510 .L0 
GAS LISTING /tmp/cc0MNjWB.s 			page 34


     /tmp/cc0MNjWB.s:857    .text:0000000000000510 .L0 
     /tmp/cc0MNjWB.s:861    .text:000000000000051c .L0 
     /tmp/cc0MNjWB.s:862    .text:000000000000051c .L0 
     /tmp/cc0MNjWB.s:866    .text:0000000000000528 .L0 
     /tmp/cc0MNjWB.s:867    .text:0000000000000528 .L0 
     /tmp/cc0MNjWB.s:871    .text:0000000000000534 .L0 
     /tmp/cc0MNjWB.s:872    .text:0000000000000534 .L0 
     /tmp/cc0MNjWB.s:879    .text:0000000000000540 .L0 
     /tmp/cc0MNjWB.s:886    .text:0000000000000544 .L0 
     /tmp/cc0MNjWB.s:887    .text:0000000000000544 .L0 
     /tmp/cc0MNjWB.s:891    .text:0000000000000554 .L0 
     /tmp/cc0MNjWB.s:892    .text:0000000000000554 .L0 
     /tmp/cc0MNjWB.s:896    .text:0000000000000564 .L0 
     /tmp/cc0MNjWB.s:897    .text:0000000000000564 .L0 
     /tmp/cc0MNjWB.s:901    .text:0000000000000570 .L0 
     /tmp/cc0MNjWB.s:902    .text:0000000000000570 .L0 
     /tmp/cc0MNjWB.s:906    .text:0000000000000580 .L0 
     /tmp/cc0MNjWB.s:907    .text:0000000000000580 .L0 
     /tmp/cc0MNjWB.s:915    .text:000000000000058c .L0 
     /tmp/cc0MNjWB.s:917    .text:0000000000000594 .L0 
     /tmp/cc0MNjWB.s:919    .text:0000000000000598 .L0 
     /tmp/cc0MNjWB.s:920    .text:0000000000000598 .L0 
     /tmp/cc0MNjWB.s:923    .text:000000000000059c .L0 
     /tmp/cc0MNjWB.s:925    .text:00000000000005a0 .L0 
     /tmp/cc0MNjWB.s:928    .text:00000000000005a4 .L0 
     /tmp/cc0MNjWB.s:939    .text._ZN5Riscv6w_sepcEm:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:941    .text._ZN5Riscv6w_sepcEm:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:942    .text._ZN5Riscv6w_sepcEm:0000000000000004 .L0 
     /tmp/cc0MNjWB.s:944    .text._ZN5Riscv6w_sepcEm:0000000000000008 .L0 
     /tmp/cc0MNjWB.s:946    .text._ZN5Riscv6w_sepcEm:000000000000000c .L0 
     /tmp/cc0MNjWB.s:948    .text._ZN5Riscv6w_sepcEm:000000000000000c .L0 
  src/../h/Riscv.hpp:105    .text._ZN5Riscv6w_sepcEm:000000000000000c .L0 
     /tmp/cc0MNjWB.s:955    .text._ZN5Riscv6w_sepcEm:0000000000000010 .L0 
     /tmp/cc0MNjWB.s:956    .text._ZN5Riscv6w_sepcEm:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:957    .text._ZN5Riscv6w_sepcEm:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:959    .text._ZN5Riscv6w_sepcEm:0000000000000018 .L0 
     /tmp/cc0MNjWB.s:961    .text._ZN5Riscv6w_sepcEm:000000000000001c .L0 
     /tmp/cc0MNjWB.s:971    .text._ZN5Riscv6mc_sipEm:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:973    .text._ZN5Riscv6mc_sipEm:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:974    .text._ZN5Riscv6mc_sipEm:0000000000000004 .L0 
     /tmp/cc0MNjWB.s:976    .text._ZN5Riscv6mc_sipEm:0000000000000008 .L0 
     /tmp/cc0MNjWB.s:978    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
     /tmp/cc0MNjWB.s:980    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
  src/../h/Riscv.hpp:123    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
     /tmp/cc0MNjWB.s:987    .text._ZN5Riscv6mc_sipEm:0000000000000010 .L0 
     /tmp/cc0MNjWB.s:988    .text._ZN5Riscv6mc_sipEm:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:989    .text._ZN5Riscv6mc_sipEm:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:991    .text._ZN5Riscv6mc_sipEm:0000000000000018 .L0 
     /tmp/cc0MNjWB.s:993    .text._ZN5Riscv6mc_sipEm:000000000000001c .L0 
     /tmp/cc0MNjWB.s:1003   .text._ZN5Riscv9w_sstatusEm:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:1005   .text._ZN5Riscv9w_sstatusEm:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:1006   .text._ZN5Riscv9w_sstatusEm:0000000000000004 .L0 
     /tmp/cc0MNjWB.s:1008   .text._ZN5Riscv9w_sstatusEm:0000000000000008 .L0 
     /tmp/cc0MNjWB.s:1010   .text._ZN5Riscv9w_sstatusEm:000000000000000c .L0 
     /tmp/cc0MNjWB.s:1012   .text._ZN5Riscv9w_sstatusEm:000000000000000c .L0 
  src/../h/Riscv.hpp:151    .text._ZN5Riscv9w_sstatusEm:000000000000000c .L0 
     /tmp/cc0MNjWB.s:1019   .text._ZN5Riscv9w_sstatusEm:0000000000000010 .L0 
GAS LISTING /tmp/cc0MNjWB.s 			page 35


     /tmp/cc0MNjWB.s:1020   .text._ZN5Riscv9w_sstatusEm:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:1021   .text._ZN5Riscv9w_sstatusEm:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:1023   .text._ZN5Riscv9w_sstatusEm:0000000000000018 .L0 
     /tmp/cc0MNjWB.s:1025   .text._ZN5Riscv9w_sstatusEm:000000000000001c .L0 
     /tmp/cc0MNjWB.s:1036   .text._ZN3TCB11setFinishedEb:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:1038   .text._ZN3TCB11setFinishedEb:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:1039   .text._ZN3TCB11setFinishedEb:0000000000000004 .L0 
     /tmp/cc0MNjWB.s:1041   .text._ZN3TCB11setFinishedEb:0000000000000008 .L0 
     /tmp/cc0MNjWB.s:1043   .text._ZN3TCB11setFinishedEb:000000000000000c .L0 
     /tmp/cc0MNjWB.s:1045   .text._ZN3TCB11setFinishedEb:000000000000000c .L0 
     /tmp/cc0MNjWB.s:1046   .text._ZN3TCB11setFinishedEb:000000000000000c .L0 
     /tmp/cc0MNjWB.s:1048   .text._ZN3TCB11setFinishedEb:0000000000000010 .L0 
     /tmp/cc0MNjWB.s:1049   .text._ZN3TCB11setFinishedEb:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:1050   .text._ZN3TCB11setFinishedEb:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:1052   .text._ZN3TCB11setFinishedEb:0000000000000018 .L0 
     /tmp/cc0MNjWB.s:1054   .text._ZN3TCB11setFinishedEb:000000000000001c .L0 
     /tmp/cc0MNjWB.s:1064   .text._ZN3TCB12getTimeSliceEv:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:1066   .text._ZN3TCB12getTimeSliceEv:0000000000000000 .L0 
     /tmp/cc0MNjWB.s:1067   .text._ZN3TCB12getTimeSliceEv:0000000000000004 .L0 
     /tmp/cc0MNjWB.s:1069   .text._ZN3TCB12getTimeSliceEv:0000000000000008 .L0 
     /tmp/cc0MNjWB.s:1071   .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/cc0MNjWB.s:1073   .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/cc0MNjWB.s:1074   .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/cc0MNjWB.s:1077   .text._ZN3TCB12getTimeSliceEv:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:1078   .text._ZN3TCB12getTimeSliceEv:0000000000000014 .L0 
     /tmp/cc0MNjWB.s:1080   .text._ZN3TCB12getTimeSliceEv:0000000000000018 .L0 
     /tmp/cc0MNjWB.s:1082   .text._ZN3TCB12getTimeSliceEv:000000000000001c .L0 
     /tmp/cc0MNjWB.s:1096   .text:00000000000005a4 .L0 
     /tmp/cc0MNjWB.s:964    .text._ZN5Riscv6w_sepcEm:000000000000001c .L0 
     /tmp/cc0MNjWB.s:996    .text._ZN5Riscv6mc_sipEm:000000000000001c .L0 
     /tmp/cc0MNjWB.s:1028   .text._ZN5Riscv9w_sstatusEm:000000000000001c .L0 
     /tmp/cc0MNjWB.s:1057   .text._ZN3TCB11setFinishedEb:000000000000001c .L0 
     /tmp/cc0MNjWB.s:1085   .text._ZN3TCB12getTimeSliceEv:000000000000001c .L0 
     /tmp/cc0MNjWB.s:198    .rodata:0000000000000074 .L9
     /tmp/cc0MNjWB.s:188    .text:00000000000000dc .L0 
     /tmp/cc0MNjWB.s:192    .text:00000000000000f0 .L0 
     /tmp/cc0MNjWB.s:372    .text:00000000000001a8 .L0 
     /tmp/cc0MNjWB.s:549    .text:00000000000002a8 .L0 
     /tmp/cc0MNjWB.s:8      .rodata:0000000000000000 .LC0
     /tmp/cc0MNjWB.s:666    .text:0000000000000368 .L0 
     /tmp/cc0MNjWB.s:11     .rodata:0000000000000018 .LC1
     /tmp/cc0MNjWB.s:676    .text:0000000000000384 .L0 
     /tmp/cc0MNjWB.s:14     .rodata:0000000000000028 .LC2
     /tmp/cc0MNjWB.s:686    .text:00000000000003a0 .L0 
     /tmp/cc0MNjWB.s:758    .text:0000000000000414 .L0 
     /tmp/cc0MNjWB.s:767    .text:000000000000042c .L0 
     /tmp/cc0MNjWB.s:17     .rodata:0000000000000030 .LC3
     /tmp/cc0MNjWB.s:787    .text:0000000000000460 .L0 
     /tmp/cc0MNjWB.s:830    .text:00000000000004b4 .L0 
     /tmp/cc0MNjWB.s:833    .text:00000000000004c4 .L0 
     /tmp/cc0MNjWB.s:837    .text:00000000000004d0 .L0 
     /tmp/cc0MNjWB.s:844    .text:00000000000004ec .L0 
     /tmp/cc0MNjWB.s:857    .text:0000000000000510 .L0 
     /tmp/cc0MNjWB.s:20     .rodata:0000000000000048 .LC4
     /tmp/cc0MNjWB.s:887    .text:0000000000000544 .L0 
     /tmp/cc0MNjWB.s:23     .rodata:0000000000000068 .LC5
     /tmp/cc0MNjWB.s:892    .text:0000000000000554 .L0 
GAS LISTING /tmp/cc0MNjWB.s 			page 36


     /tmp/cc0MNjWB.s:902    .text:0000000000000570 .L0 
     /tmp/cc0MNjWB.s:164    .text:0000000000000084 .L2
     /tmp/cc0MNjWB.s:732    .text:00000000000003e4 .L3
     /tmp/cc0MNjWB.s:652    .text:0000000000000358 .L4
     /tmp/cc0MNjWB.s:662    .text:0000000000000368 .L5
     /tmp/cc0MNjWB.s:641    .text:0000000000000344 .L6
     /tmp/cc0MNjWB.s:267    .text:0000000000000100 .L7
     /tmp/cc0MNjWB.s:590    .text:00000000000002f8 .L22
     /tmp/cc0MNjWB.s:699    .text:00000000000003c4 .L23
     /tmp/cc0MNjWB.s:349    .text:000000000000019c .L24
     /tmp/cc0MNjWB.s:357    .text:00000000000001a0 .L25
     /tmp/cc0MNjWB.s:442    .text:0000000000000234 .L26
     /tmp/cc0MNjWB.s:450    .text:0000000000000238 .L27
     /tmp/cc0MNjWB.s:528    .text:0000000000000298 .L28
     /tmp/cc0MNjWB.s:536    .text:000000000000029c .L29
     /tmp/cc0MNjWB.s:696    .text:00000000000003c0 .L40
     /tmp/cc0MNjWB.s:622    .text:0000000000000338 .L31
     /tmp/cc0MNjWB.s:630    .text:000000000000033c .L32
     /tmp/cc0MNjWB.s:910    .text:000000000000058c .L41
     /tmp/cc0MNjWB.s:814    .text:0000000000000498 .L34
     /tmp/cc0MNjWB.s:784    .text:0000000000000460 .L35
     /tmp/cc0MNjWB.s:774    .text:0000000000000448 .L36
     /tmp/cc0MNjWB.s:791    .text:0000000000000470 .L37
     /tmp/cc0MNjWB.s:881    .text:0000000000000544 .L38
     /tmp/cc0MNjWB.s:859    .text:000000000000051c .L39
     /tmp/cc0MNjWB.s:272    .text:0000000000000110 .L21
     /tmp/cc0MNjWB.s:292    .text:0000000000000130 .L20
     /tmp/cc0MNjWB.s:310    .text:0000000000000148 .L19
     /tmp/cc0MNjWB.s:368    .text:00000000000001a8 .L18
     /tmp/cc0MNjWB.s:389    .text:00000000000001d8 .L17
     /tmp/cc0MNjWB.s:398    .text:00000000000001e4 .L16
     /tmp/cc0MNjWB.s:413    .text:0000000000000200 .L15
     /tmp/cc0MNjWB.s:461    .text:0000000000000240 .L14
     /tmp/cc0MNjWB.s:479    .text:0000000000000258 .L13
     /tmp/cc0MNjWB.s:497    .text:0000000000000270 .L12
     /tmp/cc0MNjWB.s:515    .text:0000000000000288 .L11
     /tmp/cc0MNjWB.s:562    .text:00000000000002d0 .L10
     /tmp/cc0MNjWB.s:578    .text:00000000000002e0 .L8
     /tmp/cc0MNjWB.s:3363   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc0MNjWB.s:5350   .debug_str:0000000000000b09 .LASF233
     /tmp/cc0MNjWB.s:5230   .debug_str:0000000000000796 .LASF234
     /tmp/cc0MNjWB.s:5298   .debug_str:0000000000000999 .LASF235
     /tmp/cc0MNjWB.s:4954   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc0MNjWB.s:4970   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc0MNjWB.s:5260   .debug_str:0000000000000875 .LASF3
     /tmp/cc0MNjWB.s:5122   .debug_str:000000000000048e .LASF0
     /tmp/cc0MNjWB.s:5154   .debug_str:0000000000000563 .LASF1
     /tmp/cc0MNjWB.s:5276   .debug_str:00000000000008ef .LASF2
     /tmp/cc0MNjWB.s:5072   .debug_str:000000000000031e .LASF4
     /tmp/cc0MNjWB.s:5288   .debug_str:0000000000000955 .LASF5
     /tmp/cc0MNjWB.s:5136   .debug_str:00000000000004d8 .LASF6
     /tmp/cc0MNjWB.s:4986   .debug_str:0000000000000076 .LASF7
     /tmp/cc0MNjWB.s:5240   .debug_str:00000000000007d6 .LASF8
     /tmp/cc0MNjWB.s:5228   .debug_str:0000000000000783 .LASF9
     /tmp/cc0MNjWB.s:5144   .debug_str:0000000000000523 .LASF10
     /tmp/cc0MNjWB.s:5094   .debug_str:00000000000003c2 .LASF11
     /tmp/cc0MNjWB.s:5104   .debug_str:0000000000000411 .LASF12
GAS LISTING /tmp/cc0MNjWB.s 			page 37


     /tmp/cc0MNjWB.s:5020   .debug_str:0000000000000174 .LASF13
     /tmp/cc0MNjWB.s:5082   .debug_str:000000000000037c .LASF14
     /tmp/cc0MNjWB.s:5036   .debug_str:00000000000001fe .LASF15
     /tmp/cc0MNjWB.s:5018   .debug_str:0000000000000164 .LASF16
     /tmp/cc0MNjWB.s:5320   .debug_str:0000000000000a4d .LASF17
     /tmp/cc0MNjWB.s:5068   .debug_str:00000000000002ed .LASF18
     /tmp/cc0MNjWB.s:5306   .debug_str:00000000000009d6 .LASF19
     /tmp/cc0MNjWB.s:5224   .debug_str:0000000000000755 .LASF42
     /tmp/cc0MNjWB.s:5220   .debug_str:0000000000000741 .LASF44
     /tmp/cc0MNjWB.s:5238   .debug_str:00000000000007d0 .LASF20
     /tmp/cc0MNjWB.s:5428   .debug_str:0000000000000df2 .LASF21
     /tmp/cc0MNjWB.s:5264   .debug_str:000000000000089b .LASF22
     /tmp/cc0MNjWB.s:5376   .debug_str:0000000000000c9a .LASF23
     /tmp/cc0MNjWB.s:5172   .debug_str:00000000000005ba .LASF24
     /tmp/cc0MNjWB.s:5246   .debug_str:00000000000007ef .LASF28
     /tmp/cc0MNjWB.s:5022   .debug_str:0000000000000183 .LASF25
     /tmp/cc0MNjWB.s:5000   .debug_str:00000000000000e4 .LASF26
     /tmp/cc0MNjWB.s:5152   .debug_str:000000000000055e .LASF27
     /tmp/cc0MNjWB.s:5060   .debug_str:00000000000002be .LASF29
     /tmp/cc0MNjWB.s:5258   .debug_str:000000000000086d .LASF30
     /tmp/cc0MNjWB.s:5190   .debug_str:0000000000000654 .LASF31
     /tmp/cc0MNjWB.s:5416   .debug_str:0000000000000d8b .LASF32
     /tmp/cc0MNjWB.s:5358   .debug_str:0000000000000bf8 .LASF34
     /tmp/cc0MNjWB.s:5088   .debug_str:00000000000003a8 .LASF33
     /tmp/cc0MNjWB.s:5216   .debug_str:000000000000071e .LASF35
     /tmp/cc0MNjWB.s:5004   .debug_str:00000000000000f4 .LASF36
     /tmp/cc0MNjWB.s:5252   .debug_str:0000000000000818 .LASF37
     /tmp/cc0MNjWB.s:5414   .debug_str:0000000000000d77 .LASF49
     /tmp/cc0MNjWB.s:5182   .debug_str:00000000000005f3 .LASF51
     /tmp/cc0MNjWB.s:4998   .debug_str:00000000000000cb .LASF58
     /tmp/cc0MNjWB.s:5266   .debug_str:00000000000008a2 .LASF38
     /tmp/cc0MNjWB.s:5388   .debug_str:0000000000000ccf .LASF39
     /tmp/cc0MNjWB.s:5118   .debug_str:000000000000047c .LASF40
     /tmp/cc0MNjWB.s:5132   .debug_str:00000000000004c0 .LASF86
     /tmp/cc0MNjWB.s:5318   .debug_str:0000000000000a18 .LASF88
     /tmp/cc0MNjWB.s:5174   .debug_str:00000000000005c4 .LASF41
     /tmp/cc0MNjWB.s:5404   .debug_str:0000000000000d30 .LASF43
     /tmp/cc0MNjWB.s:5256   .debug_str:0000000000000862 .LASF45
     /tmp/cc0MNjWB.s:5162   .debug_str:0000000000000590 .LASF46
     /tmp/cc0MNjWB.s:4992   .debug_str:000000000000009b .LASF47
     /tmp/cc0MNjWB.s:5418   .debug_str:0000000000000d93 .LASF48
     /tmp/cc0MNjWB.s:5110   .debug_str:000000000000043c .LASF50
     /tmp/cc0MNjWB.s:5200   .debug_str:0000000000000691 .LASF52
     /tmp/cc0MNjWB.s:5296   .debug_str:000000000000098b .LASF53
     /tmp/cc0MNjWB.s:5070   .debug_str:0000000000000303 .LASF54
     /tmp/cc0MNjWB.s:5126   .debug_str:00000000000004a5 .LASF55
     /tmp/cc0MNjWB.s:5390   .debug_str:0000000000000cdb .LASF56
     /tmp/cc0MNjWB.s:5158   .debug_str:0000000000000581 .LASF60
     /tmp/cc0MNjWB.s:5368   .debug_str:0000000000000c53 .LASF62
     /tmp/cc0MNjWB.s:5272   .debug_str:00000000000008db .LASF57
     /tmp/cc0MNjWB.s:5212   .debug_str:00000000000006fe .LASF59
     /tmp/cc0MNjWB.s:5248   .debug_str:00000000000007fe .LASF61
     /tmp/cc0MNjWB.s:5250   .debug_str:0000000000000805 .LASF63
     /tmp/cc0MNjWB.s:5198   .debug_str:000000000000068a .LASF64
     /tmp/cc0MNjWB.s:5146   .debug_str:0000000000000536 .LASF65
     /tmp/cc0MNjWB.s:5188   .debug_str:000000000000064c .LASF66
     /tmp/cc0MNjWB.s:5354   .debug_str:0000000000000bda .LASF67
GAS LISTING /tmp/cc0MNjWB.s 			page 38


     /tmp/cc0MNjWB.s:5192   .debug_str:0000000000000667 .LASF68
     /tmp/cc0MNjWB.s:5210   .debug_str:00000000000006ea .LASF69
     /tmp/cc0MNjWB.s:5316   .debug_str:0000000000000a11 .LASF70
     /tmp/cc0MNjWB.s:5292   .debug_str:0000000000000971 .LASF71
     /tmp/cc0MNjWB.s:5294   .debug_str:0000000000000984 .LASF72
     /tmp/cc0MNjWB.s:5024   .debug_str:0000000000000188 .LASF73
     /tmp/cc0MNjWB.s:5064   .debug_str:00000000000002da .LASF74
     /tmp/cc0MNjWB.s:5116   .debug_str:000000000000046a .LASF75
     /tmp/cc0MNjWB.s:5128   .debug_str:00000000000004b2 .LASF76
     /tmp/cc0MNjWB.s:5050   .debug_str:0000000000000288 .LASF77
     /tmp/cc0MNjWB.s:4988   .debug_str:000000000000007d .LASF78
     /tmp/cc0MNjWB.s:5280   .debug_str:0000000000000907 .LASF79
     /tmp/cc0MNjWB.s:5274   .debug_str:00000000000008e4 .LASF80
     /tmp/cc0MNjWB.s:5442   .debug_str:0000000000000e60 .LASF81
     /tmp/cc0MNjWB.s:5406   .debug_str:0000000000000d36 .LASF82
     /tmp/cc0MNjWB.s:5420   .debug_str:0000000000000d9c .LASF83
     /tmp/cc0MNjWB.s:5398   .debug_str:0000000000000d08 .LASF84
     /tmp/cc0MNjWB.s:5180   .debug_str:00000000000005dd .LASF85
     /tmp/cc0MNjWB.s:5360   .debug_str:0000000000000c23 .LASF87
     /tmp/cc0MNjWB.s:5042   .debug_str:000000000000023e .LASF89
     /tmp/cc0MNjWB.s:5396   .debug_str:0000000000000cff .LASF90
     /tmp/cc0MNjWB.s:5332   .debug_str:0000000000000a9c .LASF157
     /tmp/cc0MNjWB.s:5352   .debug_str:0000000000000bcd .LASF91
     /tmp/cc0MNjWB.s:5412   .debug_str:0000000000000d55 .LASF92
     /tmp/cc0MNjWB.s:5218   .debug_str:000000000000073c .LASF236
     /tmp/cc0MNjWB.s:5432   .debug_str:0000000000000e12 .LASF93
     /tmp/cc0MNjWB.s:5138   .debug_str:00000000000004ea .LASF94
     /tmp/cc0MNjWB.s:5334   .debug_str:0000000000000aa4 .LASF97
     /tmp/cc0MNjWB.s:5326   .debug_str:0000000000000a7a .LASF99
     /tmp/cc0MNjWB.s:5008   .debug_str:0000000000000113 .LASF95
     /tmp/cc0MNjWB.s:5370   .debug_str:0000000000000c68 .LASF96
     /tmp/cc0MNjWB.s:5278   .debug_str:00000000000008fd .LASF98
     /tmp/cc0MNjWB.s:5324   .debug_str:0000000000000a66 .LASF100
     /tmp/cc0MNjWB.s:5338   .debug_str:0000000000000abc .LASF101
     /tmp/cc0MNjWB.s:5076   .debug_str:0000000000000340 .LASF102
     /tmp/cc0MNjWB.s:5178   .debug_str:00000000000005d0 .LASF103
     /tmp/cc0MNjWB.s:5254   .debug_str:000000000000084a .LASF104
     /tmp/cc0MNjWB.s:5054   .debug_str:00000000000002a3 .LASF105
     /tmp/cc0MNjWB.s:5284   .debug_str:000000000000092f .LASF106
     /tmp/cc0MNjWB.s:5374   .debug_str:0000000000000c8f .LASF107
     /tmp/cc0MNjWB.s:5084   .debug_str:000000000000038b .LASF108
     /tmp/cc0MNjWB.s:5446   .debug_str:0000000000000e85 .LASF109
     /tmp/cc0MNjWB.s:5078   .debug_str:0000000000000356 .LASF110
     /tmp/cc0MNjWB.s:5160   .debug_str:000000000000058a .LASF111
     /tmp/cc0MNjWB.s:5270   .debug_str:00000000000008cb .LASF112
     /tmp/cc0MNjWB.s:5056   .debug_str:00000000000002b0 .LASF113
     /tmp/cc0MNjWB.s:5026   .debug_str:000000000000019b .LASF114
     /tmp/cc0MNjWB.s:5164   .debug_str:0000000000000599 .LASF115
     /tmp/cc0MNjWB.s:4994   .debug_str:00000000000000a4 .LASF116
     /tmp/cc0MNjWB.s:5346   .debug_str:0000000000000af1 .LASF117
     /tmp/cc0MNjWB.s:5014   .debug_str:0000000000000144 .LASF118
     /tmp/cc0MNjWB.s:5444   .debug_str:0000000000000e78 .LASF119
     /tmp/cc0MNjWB.s:5100   .debug_str:00000000000003f0 .LASF120
     /tmp/cc0MNjWB.s:4978   .debug_str:0000000000000028 .LASF121
     /tmp/cc0MNjWB.s:5208   .debug_str:00000000000006dd .LASF122
     /tmp/cc0MNjWB.s:5366   .debug_str:0000000000000c4b .LASF123
     /tmp/cc0MNjWB.s:5016   .debug_str:0000000000000155 .LASF124
GAS LISTING /tmp/cc0MNjWB.s 			page 39


     /tmp/cc0MNjWB.s:5438   .debug_str:0000000000000e39 .LASF125
     /tmp/cc0MNjWB.s:5378   .debug_str:0000000000000c9f .LASF126
     /tmp/cc0MNjWB.s:5356   .debug_str:0000000000000bee .LASF127
     /tmp/cc0MNjWB.s:5304   .debug_str:00000000000009cd .LASF128
     /tmp/cc0MNjWB.s:5242   .debug_str:00000000000007dd .LASF129
     /tmp/cc0MNjWB.s:5112   .debug_str:0000000000000447 .LASF130
     /tmp/cc0MNjWB.s:5348   .debug_str:0000000000000af9 .LASF131
     /tmp/cc0MNjWB.s:5222   .debug_str:0000000000000749 .LASF132
     /tmp/cc0MNjWB.s:4976   .debug_str:000000000000001b .LASF133
     /tmp/cc0MNjWB.s:5286   .debug_str:0000000000000947 .LASF134
     /tmp/cc0MNjWB.s:5430   .debug_str:0000000000000dfc .LASF184
     /tmp/cc0MNjWB.s:5044   .debug_str:0000000000000256 .LASF162
     /tmp/cc0MNjWB.s:4982   .debug_str:0000000000000040 .LASF163
     /tmp/cc0MNjWB.s:5096   .debug_str:00000000000003d2 .LASF135
     /tmp/cc0MNjWB.s:5308   .debug_str:00000000000009ec .LASF136
     /tmp/cc0MNjWB.s:5340   .debug_str:0000000000000ac7 .LASF137
     /tmp/cc0MNjWB.s:5206   .debug_str:00000000000006ca .LASF138
     /tmp/cc0MNjWB.s:5058   .debug_str:00000000000002b9 .LASF139
     /tmp/cc0MNjWB.s:5282   .debug_str:000000000000091f .LASF140
     /tmp/cc0MNjWB.s:5330   .debug_str:0000000000000a95 .LASF141
     /tmp/cc0MNjWB.s:5006   .debug_str:0000000000000101 .LASF142
     /tmp/cc0MNjWB.s:5052   .debug_str:000000000000029a .LASF143
     /tmp/cc0MNjWB.s:5196   .debug_str:0000000000000674 .LASF144
     /tmp/cc0MNjWB.s:5066   .debug_str:00000000000002e0 .LASF145
     /tmp/cc0MNjWB.s:4984   .debug_str:0000000000000068 .LASF146
     /tmp/cc0MNjWB.s:5120   .debug_str:0000000000000488 .LASF147
     /tmp/cc0MNjWB.s:5342   .debug_str:0000000000000acf .LASF148
     /tmp/cc0MNjWB.s:4980   .debug_str:0000000000000038 .LASF149
     /tmp/cc0MNjWB.s:4990   .debug_str:0000000000000088 .LASF150
     /tmp/cc0MNjWB.s:5408   .debug_str:0000000000000d40 .LASF151
     /tmp/cc0MNjWB.s:5372   .debug_str:0000000000000c7f .LASF152
     /tmp/cc0MNjWB.s:5048   .debug_str:000000000000027e .LASF153
     /tmp/cc0MNjWB.s:5148   .debug_str:0000000000000549 .LASF154
     /tmp/cc0MNjWB.s:5386   .debug_str:0000000000000cc7 .LASF155
     /tmp/cc0MNjWB.s:5202   .debug_str:00000000000006a9 .LASF156
     /tmp/cc0MNjWB.s:5394   .debug_str:0000000000000cfa .LASF158
     /tmp/cc0MNjWB.s:5362   .debug_str:0000000000000c2e .LASF159
     /tmp/cc0MNjWB.s:5030   .debug_str:00000000000001b8 .LASF160
     /tmp/cc0MNjWB.s:5046   .debug_str:0000000000000264 .LASF161
     /tmp/cc0MNjWB.s:5038   .debug_str:000000000000020e .LASF164
     /tmp/cc0MNjWB.s:5092   .debug_str:00000000000003bc .LASF165
     /tmp/cc0MNjWB.s:5150   .debug_str:0000000000000559 .LASF166
     /tmp/cc0MNjWB.s:4996   .debug_str:00000000000000b6 .LASF167
     /tmp/cc0MNjWB.s:5098   .debug_str:00000000000003d8 .LASF168
     /tmp/cc0MNjWB.s:5364   .debug_str:0000000000000c33 .LASF237
     /tmp/cc0MNjWB.s:5336   .debug_str:0000000000000aaf .LASF169
     /tmp/cc0MNjWB.s:5290   .debug_str:000000000000095c .LASF170
     /tmp/cc0MNjWB.s:5130   .debug_str:00000000000004b8 .LASF171
     /tmp/cc0MNjWB.s:5074   .debug_str:0000000000000324 .LASF172
     /tmp/cc0MNjWB.s:5400   .debug_str:0000000000000d12 .LASF173
     /tmp/cc0MNjWB.s:5186   .debug_str:000000000000062d .LASF174
     /tmp/cc0MNjWB.s:5010   .debug_str:000000000000011f .LASF175
     /tmp/cc0MNjWB.s:5012   .debug_str:0000000000000128 .LASF176
     /tmp/cc0MNjWB.s:5040   .debug_str:0000000000000229 .LASF177
     /tmp/cc0MNjWB.s:5402   .debug_str:0000000000000d1a .LASF178
     /tmp/cc0MNjWB.s:5142   .debug_str:0000000000000519 .LASF179
     /tmp/cc0MNjWB.s:5314   .debug_str:0000000000000a0c .LASF180
GAS LISTING /tmp/cc0MNjWB.s 			page 40


     /tmp/cc0MNjWB.s:5194   .debug_str:000000000000066f .LASF181
     /tmp/cc0MNjWB.s:5436   .debug_str:0000000000000e2c .LASF182
     /tmp/cc0MNjWB.s:5426   .debug_str:0000000000000de0 .LASF183
     /tmp/cc0MNjWB.s:5114   .debug_str:0000000000000452 .LASF185
     /tmp/cc0MNjWB.s:5434   .debug_str:0000000000000e18 .LASF238
     /tmp/cc0MNjWB.s:5106   .debug_str:000000000000041f .LASF186
     /tmp/cc0MNjWB.s:5262   .debug_str:000000000000087a .LASF187
     /tmp/cc0MNjWB.s:5002   .debug_str:00000000000000e9 .LASF188
     /tmp/cc0MNjWB.s:5440   .debug_str:0000000000000e3f .LASF189
     /tmp/cc0MNjWB.s:5166   .debug_str:00000000000005a1 .LASF190
     /tmp/cc0MNjWB.s:5032   .debug_str:00000000000001d6 .LASF191
     /tmp/cc0MNjWB.s:5168   .debug_str:00000000000005a6 .LASF192
     /tmp/cc0MNjWB.s:5300   .debug_str:00000000000009b7 .LASF193
     /tmp/cc0MNjWB.s:5204   .debug_str:00000000000006b5 .LASF194
     /tmp/cc0MNjWB.s:5232   .debug_str:00000000000007af .LASF195
     /tmp/cc0MNjWB.s:5450   .debug_str:0000000000000ea4 .LASF196
     /tmp/cc0MNjWB.s:5344   .debug_str:0000000000000ae0 .LASF197
     /tmp/cc0MNjWB.s:5322   .debug_str:0000000000000a59 .LASF198
     /tmp/cc0MNjWB.s:5140   .debug_str:00000000000004fc .LASF199
     /tmp/cc0MNjWB.s:5382   .debug_str:0000000000000cb0 .LASF200
     /tmp/cc0MNjWB.s:5422   .debug_str:0000000000000db2 .LASF201
     /tmp/cc0MNjWB.s:5134   .debug_str:00000000000004ca .LASF202
     /tmp/cc0MNjWB.s:5226   .debug_str:0000000000000765 .LASF203
     /tmp/cc0MNjWB.s:5108   .debug_str:000000000000042f .LASF204
     /tmp/cc0MNjWB.s:5268   .debug_str:00000000000008ae .LASF205
     /tmp/cc0MNjWB.s:5312   .debug_str:00000000000009f8 .LASF206
     /tmp/cc0MNjWB.s:5102   .debug_str:00000000000003fc .LASF207
     /tmp/cc0MNjWB.s:5090   .debug_str:00000000000003ae .LASF208
     /tmp/cc0MNjWB.s:5080   .debug_str:000000000000036f .LASF209
     /tmp/cc0MNjWB.s:4972   .debug_str:0000000000000000 .LASF239
     /tmp/cc0MNjWB.s:5380   .debug_str:0000000000000ca4 .LASF210
     /tmp/cc0MNjWB.s:5062   .debug_str:00000000000002cd .LASF211
     /tmp/cc0MNjWB.s:5124   .debug_str:000000000000049b .LASF212
     /tmp/cc0MNjWB.s:5244   .debug_str:00000000000007e5 .LASF213
     /tmp/cc0MNjWB.s:5156   .debug_str:0000000000000576 .LASF214
     /tmp/cc0MNjWB.s:5214   .debug_str:0000000000000713 .LASF215
     /tmp/cc0MNjWB.s:5302   .debug_str:00000000000009bd .LASF216
     /tmp/cc0MNjWB.s:5328   .debug_str:0000000000000a90 .LASF217
     /tmp/cc0MNjWB.s:5448   .debug_str:0000000000000e93 .LASF218
     /tmp/cc0MNjWB.s:30     .text:0000000000000000 .LFB51
     /tmp/cc0MNjWB.s:929    .text:00000000000005a4 .LFE51
     /tmp/cc0MNjWB.s:5310   .debug_str:00000000000009f1 .LASF219
     /tmp/cc0MNjWB.s:4457   .debug_loc:0000000000000000 .LLST0
     /tmp/cc0MNjWB.s:5384   .debug_str:0000000000000cc2 .LASF220
     /tmp/cc0MNjWB.s:4488   .debug_loc:0000000000000087 .LLST1
     /tmp/cc0MNjWB.s:5410   .debug_str:0000000000000d4d .LASF221
     /tmp/cc0MNjWB.s:4519   .debug_loc:000000000000010e .LLST2
     /tmp/cc0MNjWB.s:4541   .debug_loc:000000000000016e .LLST3
     /tmp/cc0MNjWB.s:4563   .debug_loc:00000000000001ce .LLST4
     /tmp/cc0MNjWB.s:4585   .debug_loc:000000000000022f .LLST5
     /tmp/cc0MNjWB.s:4607   .debug_loc:0000000000000290 .LLST6
     /tmp/cc0MNjWB.s:4629   .debug_loc:00000000000002f1 .LLST7
     /tmp/cc0MNjWB.s:4651   .debug_loc:0000000000000352 .LLST8
     /tmp/cc0MNjWB.s:4673   .debug_loc:00000000000003b3 .LLST9
     /tmp/cc0MNjWB.s:4695   .debug_loc:0000000000000414 .LLST10
     /tmp/cc0MNjWB.s:743    .text:00000000000003f8 .LBB5
     /tmp/cc0MNjWB.s:807    .text:0000000000000494 .LBE5
GAS LISTING /tmp/cc0MNjWB.s 			page 41


     /tmp/cc0MNjWB.s:4888   .debug_loc:000000000000076d .LLST11
     /tmp/cc0MNjWB.s:747    .text:0000000000000400 .LVL69
     /tmp/cc0MNjWB.s:773    .text:0000000000000448 .LVL72
     /tmp/cc0MNjWB.s:781    .text:000000000000045c .LVL73
     /tmp/cc0MNjWB.s:790    .text:0000000000000470 .LVL76
     /tmp/cc0MNjWB.s:796    .text:000000000000047c .LVL77
     /tmp/cc0MNjWB.s:801    .text:0000000000000488 .LVL78
     /tmp/cc0MNjWB.s:806    .text:0000000000000494 .LVL79
     /tmp/cc0MNjWB.s:281    .text:0000000000000128 .LVL21
     /tmp/cc0MNjWB.s:299    .text:0000000000000140 .LVL23
     /tmp/cc0MNjWB.s:324    .text:000000000000016c .LVL25
     /tmp/cc0MNjWB.s:334    .text:0000000000000188 .LVL26
     /tmp/cc0MNjWB.s:377    .text:00000000000001c4 .LVL28
     /tmp/cc0MNjWB.s:381    .text:00000000000001cc .LVL29
     /tmp/cc0MNjWB.s:385    .text:00000000000001d4 .LVL30
     /tmp/cc0MNjWB.s:394    .text:00000000000001e0 .LVL32
     /tmp/cc0MNjWB.s:405    .text:00000000000001f4 .LVL34
     /tmp/cc0MNjWB.s:409    .text:00000000000001fc .LVL35
     /tmp/cc0MNjWB.s:424    .text:0000000000000218 .LVL37
     /tmp/cc0MNjWB.s:468    .text:0000000000000250 .LVL39
     /tmp/cc0MNjWB.s:486    .text:0000000000000268 .LVL41
     /tmp/cc0MNjWB.s:504    .text:0000000000000280 .LVL43
     /tmp/cc0MNjWB.s:554    .text:00000000000002c4 .LVL45
     /tmp/cc0MNjWB.s:558    .text:00000000000002cc .LVL46
     /tmp/cc0MNjWB.s:567    .text:00000000000002d8 .LVL48
     /tmp/cc0MNjWB.s:586    .text:00000000000002f4 .LVL50
     /tmp/cc0MNjWB.s:604    .text:000000000000031c .LVL52
     /tmp/cc0MNjWB.s:648    .text:0000000000000354 .LVL54
     /tmp/cc0MNjWB.s:658    .text:0000000000000364 .LVL56
     /tmp/cc0MNjWB.s:668    .text:0000000000000378 .LVL58
     /tmp/cc0MNjWB.s:673    .text:0000000000000384 .LVL59
     /tmp/cc0MNjWB.s:678    .text:0000000000000394 .LVL60
     /tmp/cc0MNjWB.s:683    .text:00000000000003a0 .LVL61
     /tmp/cc0MNjWB.s:688    .text:00000000000003b0 .LVL62
     /tmp/cc0MNjWB.s:693    .text:00000000000003bc .LVL63
     /tmp/cc0MNjWB.s:827    .text:00000000000004b4 .LVL81
     /tmp/cc0MNjWB.s:841    .text:00000000000004e8 .LVL82
     /tmp/cc0MNjWB.s:854    .text:0000000000000510 .LVL83
     /tmp/cc0MNjWB.s:864    .text:0000000000000528 .LVL84
     /tmp/cc0MNjWB.s:869    .text:0000000000000534 .LVL85
     /tmp/cc0MNjWB.s:874    .text:0000000000000540 .LVL86
     /tmp/cc0MNjWB.s:889    .text:0000000000000554 .LVL88
     /tmp/cc0MNjWB.s:894    .text:0000000000000564 .LVL89
     /tmp/cc0MNjWB.s:899    .text:0000000000000570 .LVL90
     /tmp/cc0MNjWB.s:904    .text:0000000000000580 .LVL91
     /tmp/cc0MNjWB.s:909    .text:000000000000058c .LVL92
     /tmp/cc0MNjWB.s:1062   .text._ZN3TCB12getTimeSliceEv:0000000000000000 .LFB36
     /tmp/cc0MNjWB.s:1083   .text._ZN3TCB12getTimeSliceEv:000000000000001c .LFE36
     /tmp/cc0MNjWB.s:5086   .debug_str:00000000000003a3 .LASF222
     /tmp/cc0MNjWB.s:4917   .debug_loc:00000000000007f1 .LLST12
     /tmp/cc0MNjWB.s:1033   .text._ZN3TCB11setFinishedEb:0000000000000000 .LFB33
     /tmp/cc0MNjWB.s:1055   .text._ZN3TCB11setFinishedEb:000000000000001c .LFE33
     /tmp/cc0MNjWB.s:5176   .debug_str:00000000000005c9 .LASF223
     /tmp/cc0MNjWB.s:1001   .text._ZN5Riscv9w_sstatusEm:0000000000000000 .LFB16
     /tmp/cc0MNjWB.s:1026   .text._ZN5Riscv9w_sstatusEm:000000000000001c .LFE16
     /tmp/cc0MNjWB.s:969    .text._ZN5Riscv6mc_sipEm:0000000000000000 .LFB10
     /tmp/cc0MNjWB.s:994    .text._ZN5Riscv6mc_sipEm:000000000000001c .LFE10
GAS LISTING /tmp/cc0MNjWB.s 			page 42


     /tmp/cc0MNjWB.s:5392   .debug_str:0000000000000cf5 .LASF224
     /tmp/cc0MNjWB.s:936    .text._ZN5Riscv6w_sepcEm:0000000000000000 .LFB6
     /tmp/cc0MNjWB.s:962    .text._ZN5Riscv6w_sepcEm:000000000000001c .LFE6
     /tmp/cc0MNjWB.s:5170   .debug_str:00000000000005af .LASF225
     /tmp/cc0MNjWB.s:5234   .debug_str:00000000000007b5 .LASF226
     /tmp/cc0MNjWB.s:5034   .debug_str:00000000000001eb .LASF227
     /tmp/cc0MNjWB.s:5424   .debug_str:0000000000000dd4 .LASF228
     /tmp/cc0MNjWB.s:5184   .debug_str:000000000000061f .LASF229
     /tmp/cc0MNjWB.s:5028   .debug_str:00000000000001ae .LASF230
     /tmp/cc0MNjWB.s:4974   .debug_str:0000000000000009 .LASF231
     /tmp/cc0MNjWB.s:5236   .debug_str:00000000000007c3 .LASF232
     /tmp/cc0MNjWB.s:53     .text:000000000000001c .LVL0
     /tmp/cc0MNjWB.s:60     .text:0000000000000020 .LVL1
     /tmp/cc0MNjWB.s:731    .text:00000000000003e4 .LVL67
     /tmp/cc0MNjWB.s:738    .text:00000000000003e8 .LVL68
     /tmp/cc0MNjWB.s:921    .text:0000000000000598 .LVL93
     /tmp/cc0MNjWB.s:926    .text:00000000000005a0 .LVL94
     /tmp/cc0MNjWB.s:63     .text:0000000000000024 .LVL2
     /tmp/cc0MNjWB.s:70     .text:0000000000000028 .LVL3
     /tmp/cc0MNjWB.s:707    .text:00000000000003cc .LVL64
     /tmp/cc0MNjWB.s:710    .text:00000000000003d0 .LVL65
     /tmp/cc0MNjWB.s:722    .text:00000000000003dc .LVL66
     /tmp/cc0MNjWB.s:73     .text:000000000000002c .LVL4
     /tmp/cc0MNjWB.s:81     .text:0000000000000030 .LVL5
     /tmp/cc0MNjWB.s:84     .text:0000000000000034 .LVL6
     /tmp/cc0MNjWB.s:91     .text:0000000000000038 .LVL7
     /tmp/cc0MNjWB.s:94     .text:000000000000003c .LVL8
     /tmp/cc0MNjWB.s:101    .text:0000000000000040 .LVL9
     /tmp/cc0MNjWB.s:104    .text:0000000000000044 .LVL10
     /tmp/cc0MNjWB.s:111    .text:0000000000000048 .LVL11
     /tmp/cc0MNjWB.s:114    .text:000000000000004c .LVL12
     /tmp/cc0MNjWB.s:121    .text:0000000000000050 .LVL13
     /tmp/cc0MNjWB.s:124    .text:0000000000000054 .LVL14
     /tmp/cc0MNjWB.s:131    .text:0000000000000058 .LVL15
     /tmp/cc0MNjWB.s:134    .text:000000000000005c .LVL16
     /tmp/cc0MNjWB.s:141    .text:0000000000000060 .LVL17
     /tmp/cc0MNjWB.s:144    .text:0000000000000064 .LVL18
     /tmp/cc0MNjWB.s:151    .text:0000000000000068 .LVL19
     /tmp/cc0MNjWB.s:154    .text:000000000000006c .LVL20
     /tmp/cc0MNjWB.s:291    .text:0000000000000130 .LVL22
     /tmp/cc0MNjWB.s:309    .text:0000000000000148 .LVL24
     /tmp/cc0MNjWB.s:367    .text:00000000000001a8 .LVL27
     /tmp/cc0MNjWB.s:388    .text:00000000000001d8 .LVL31
     /tmp/cc0MNjWB.s:397    .text:00000000000001e4 .LVL33
     /tmp/cc0MNjWB.s:412    .text:0000000000000200 .LVL36
     /tmp/cc0MNjWB.s:460    .text:0000000000000240 .LVL38
     /tmp/cc0MNjWB.s:478    .text:0000000000000258 .LVL40
     /tmp/cc0MNjWB.s:496    .text:0000000000000270 .LVL42
     /tmp/cc0MNjWB.s:514    .text:0000000000000288 .LVL44
     /tmp/cc0MNjWB.s:561    .text:00000000000002d0 .LVL47
     /tmp/cc0MNjWB.s:577    .text:00000000000002e0 .LVL49
     /tmp/cc0MNjWB.s:589    .text:00000000000002f8 .LVL51
     /tmp/cc0MNjWB.s:640    .text:0000000000000344 .LVL53
     /tmp/cc0MNjWB.s:651    .text:0000000000000358 .LVL55
     /tmp/cc0MNjWB.s:661    .text:0000000000000368 .LVL57
     /tmp/cc0MNjWB.s:813    .text:0000000000000498 .LVL80
     /tmp/cc0MNjWB.s:880    .text:0000000000000544 .LVL87
GAS LISTING /tmp/cc0MNjWB.s 			page 43


     /tmp/cc0MNjWB.s:751    .text:0000000000000408 .LVL70
     /tmp/cc0MNjWB.s:771    .text:0000000000000440 .LVL71
     /tmp/cc0MNjWB.s:783    .text:0000000000000460 .LVL74
     /tmp/cc0MNjWB.s:788    .text:0000000000000468 .LVL75
     /tmp/cc0MNjWB.s:1065   .text._ZN3TCB12getTimeSliceEv:0000000000000000 .LVL99
     /tmp/cc0MNjWB.s:1075   .text._ZN3TCB12getTimeSliceEv:0000000000000010 .LVL100
     /tmp/cc0MNjWB.s:1097   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc0MNjWB.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc0MNjWB.s:1086   .text:00000000000005a4 .Letext0

UNDEFINED SYMBOLS
_ZN15MemoryAllocator7kmallocEmNS_7PurposeE
_ZN15MemoryAllocator5kfreeEPv
_ZN3TCB12createThreadEPFvPvES0_Pm
_ZN3TCB5startEPS_
_ZN3TCB7runningE
_ZN3TCB13releaseJoinedEv
_ZN3TCB5yieldEv
_ZN3TCB10threadJoinEPS_
_ZN4KSem7initSemEj
_ZN4KSem8closeSemEPS_
_ZN4KSem4waitEv
_ZN4KSem6signalEv
_ZN9Scheduler10putToSleepEP3TCBm
_ZN8KConsole5kgetcEv
_ZN8KConsole5kputcEc
_ZN9Scheduler3putEP3TCB
_Z9kPrintIntm
_Z11printStringPKc
_Z12printIntegerm
plic_claim
_ZN8KConsole2srE
_ZN8KConsole2drE
_ZN8KConsole12placeInInputEc
plic_complete
_ZN9Scheduler4wakeEv
_ZN3TCB16runningTimeSliceE
