GAS LISTING /tmp/ccXWPiZd.s 			page 1


   1              		.file	"interruptRoutine.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata
   7              		.align	3
   8              	.LC0:
   9 0000 0A4E6570 		.string	"\nNepostojeci op code: "
   9      6F73746F 
   9      6A656369 
   9      206F7020 
   9      636F6465 
  10 0017 00       		.align	3
  11              	.LC1:
  12 0018 0A736361 		.string	"\nscause: "
  12      7573653A 
  12      2000
  13 0022 00000000 		.align	3
  13      0000
  14              	.LC2:
  15 0028 0A736570 		.string	"\nsepc: "
  15      633A2000 
  16              		.align	3
  17              	.LC3:
  18 0030 4E656B69 		.string	"Neki drugi prekid\n"
  18      20647275 
  18      67692070 
  18      72656B69 
  18      640A00
  19 0043 00000000 		.align	3
  19      00
  20              	.LC4:
  21 0048 0A477265 		.string	"\nGreska u prekidnoj rutini\n"
  21      736B6120 
  21      75207072 
  21      656B6964 
  21      6E6F6A20 
  22 0064 00000000 		.align	3
  23              	.LC5:
  24 0068 73636175 		.string	"scause: "
  24      73653A20 
  24      00
  25              		.text
  26              		.align	2
  27              		.globl	interruptRoutine
  29              	interruptRoutine:
  30              	.LFB54:
  31              		.file 1 "src/interruptRoutine.cpp"
   1:src/interruptRoutine.cpp **** //
   2:src/interruptRoutine.cpp **** // Created by os on 5/22/23.
   3:src/interruptRoutine.cpp **** //
   4:src/interruptRoutine.cpp **** 
   5:src/interruptRoutine.cpp **** #include "../lib/console.h"
   6:src/interruptRoutine.cpp **** #include "../lib/hw.h"
   7:src/interruptRoutine.cpp **** #include "../visak/MemoryAllocator.hpp"
   8:src/interruptRoutine.cpp **** #include "../h/helper.hpp"
GAS LISTING /tmp/ccXWPiZd.s 			page 2


   9:src/interruptRoutine.cpp **** #include "../h/Riscv.hpp"
  10:src/interruptRoutine.cpp **** #include "../h/syscall_c.hpp"
  11:src/interruptRoutine.cpp **** #include "../h/TCB.hpp"
  12:src/interruptRoutine.cpp **** #include "../h/Scheduler.hpp"
  13:src/interruptRoutine.cpp **** #include "../h/KSem.hpp"
  14:src/interruptRoutine.cpp **** #include "../h/KConsole.hpp"
  15:src/interruptRoutine.cpp **** #include "../h/KMemory.hpp"
  16:src/interruptRoutine.cpp **** #include "../test/printing.hpp"
  17:src/interruptRoutine.cpp **** 
  18:src/interruptRoutine.cpp **** //void printInteger(int i);
  19:src/interruptRoutine.cpp **** 
  20:src/interruptRoutine.cpp **** #pragma GCC optimize("O0")
  21:src/interruptRoutine.cpp **** extern "C" void interruptRoutine() {
  32              		.loc 1 21 36
  33              		.cfi_startproc
  34 0000 130101F8 		addi	sp,sp,-128
  35              		.cfi_def_cfa_offset 128
  36 0004 233C1106 		sd	ra,120(sp)
  37 0008 23388106 		sd	s0,112(sp)
  38 000c 23349106 		sd	s1,104(sp)
  39              		.cfi_offset 1, -8
  40              		.cfi_offset 8, -16
  41              		.cfi_offset 9, -24
  42 0010 13040108 		addi	s0,sp,128
  43              		.cfi_def_cfa 8, 0
  22:src/interruptRoutine.cpp ****     //bitni sistemski registri
  23:src/interruptRoutine.cpp ****     uint64 scause, sepc, sstatus;
  44              		.loc 1 23 5
  24:src/interruptRoutine.cpp ****     __asm__ volatile("csrr %[scause], scause":[scause] "=r"(scause): : "a5", "a0", "a1", "a2", "a3"
  45              		.loc 1 24 5
  46              		.loc 1 24 119 is_stmt 0
  47              	#APP
  48              	# 24 "src/interruptRoutine.cpp" 1
  25              	    __asm__ volatile("csrr %[sepc], sepc":[sepc] "=r"(sepc): : "a5", "a0", "a1", "a2", "a3", "a4", 
  49              		csrr t1, scause
  50              	# 0 "" 2
  51              	#NO_APP
  52 0018 233C64FC 		sd	t1,-40(s0)
  53              	.LVL0:
  54              		.loc 1 25 5 is_stmt 1
  55              		.loc 1 25 111 is_stmt 0
  56              	#APP
  57              	# 25 "src/interruptRoutine.cpp" 1
  26              	    __asm__ volatile("csrr %[stat], sstatus":[stat] "=r"(sstatus): : "a5", "a0", "a1", "a2", "a3", 
  58              		csrr t1, sepc
  59              	# 0 "" 2
  60              	.LVL1:
  61              	#NO_APP
  62 0020 233864FC 		sd	t1,-48(s0)
  63              	.LVL2:
  64              		.loc 1 26 5 is_stmt 1
  65              		.loc 1 26 117 is_stmt 0
  66              	#APP
  67              	# 26 "src/interruptRoutine.cpp" 1
  27              	
  68              		csrr t1, sstatus
  69              	# 0 "" 2
GAS LISTING /tmp/ccXWPiZd.s 			page 3


  70              	.LVL3:
  71              	#NO_APP
  72 0028 233464FC 		sd	t1,-56(s0)
  73              	.LVL4:
  28:src/interruptRoutine.cpp ****     //argumenti preneti sistemskom pozivu
  29:src/interruptRoutine.cpp ****     uint64 a0, a1, a2, a3, a4, a5, a6, a7;
  74              		.loc 1 29 5 is_stmt 1
  30:src/interruptRoutine.cpp ****     __asm__ volatile("mv %[ax], a0":[ax] "=r"(a0): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
  75              		.loc 1 30 5
  76              		.loc 1 30 101 is_stmt 0
  77              	#APP
  78              	# 30 "src/interruptRoutine.cpp" 1
  31              	    __asm__ volatile("mv %[ax], a1":[ax] "=r"(a1): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
  79              		mv t1, a0
  80              	# 0 "" 2
  81              	.LVL5:
  82              	#NO_APP
  83 0030 233064FC 		sd	t1,-64(s0)
  84              	.LVL6:
  85              		.loc 1 31 5 is_stmt 1
  86              		.loc 1 31 101 is_stmt 0
  87              	#APP
  88              	# 31 "src/interruptRoutine.cpp" 1
  32              	    __asm__ volatile("mv %[ax], a2":[ax] "=r"(a2): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
  89              		mv t1, a1
  90              	# 0 "" 2
  91              	.LVL7:
  92              	#NO_APP
  93 0038 233C64FA 		sd	t1,-72(s0)
  94              	.LVL8:
  95              		.loc 1 32 5 is_stmt 1
  96              		.loc 1 32 101 is_stmt 0
  97              	#APP
  98              	# 32 "src/interruptRoutine.cpp" 1
  33              	    __asm__ volatile("mv %[ax], a3":[ax] "=r"(a3): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
  99              		mv t1, a2
 100              	# 0 "" 2
 101              	.LVL9:
 102              	#NO_APP
 103 0040 233864FA 		sd	t1,-80(s0)
 104              	.LVL10:
 105              		.loc 1 33 5 is_stmt 1
 106              		.loc 1 33 101 is_stmt 0
 107              	#APP
 108              	# 33 "src/interruptRoutine.cpp" 1
  34              	    __asm__ volatile("mv %[ax], a4":[ax] "=r"(a4): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
 109              		mv t1, a3
 110              	# 0 "" 2
 111              	.LVL11:
 112              	#NO_APP
 113 0048 233464FA 		sd	t1,-88(s0)
 114              	.LVL12:
 115              		.loc 1 34 5 is_stmt 1
 116              		.loc 1 34 101 is_stmt 0
 117              	#APP
 118              	# 34 "src/interruptRoutine.cpp" 1
  35              	    __asm__ volatile("mv %[ax], a5":[ax] "=r"(a5): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
GAS LISTING /tmp/ccXWPiZd.s 			page 4


 119              		mv t1, a4
 120              	# 0 "" 2
 121              	.LVL13:
 122              	#NO_APP
 123 0050 233064FA 		sd	t1,-96(s0)
 124              	.LVL14:
 125              		.loc 1 35 5 is_stmt 1
 126              		.loc 1 35 101 is_stmt 0
 127              	#APP
 128              	# 35 "src/interruptRoutine.cpp" 1
  36              	    __asm__ volatile("mv %[ax], a6":[ax] "=r"(a6): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
 129              		mv t1, a5
 130              	# 0 "" 2
 131              	.LVL15:
 132              	#NO_APP
 133 0058 233C64F8 		sd	t1,-104(s0)
 134              	.LVL16:
 135              		.loc 1 36 5 is_stmt 1
 136              		.loc 1 36 101 is_stmt 0
 137              	#APP
 138              	# 36 "src/interruptRoutine.cpp" 1
  37              	    __asm__ volatile("mv %[ax], a7":[ax] "=r"(a7): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7"
 139              		mv t1, a6
 140              	# 0 "" 2
 141              	.LVL17:
 142              	#NO_APP
 143 0060 233864F8 		sd	t1,-112(s0)
 144              	.LVL18:
 145              		.loc 1 37 5 is_stmt 1
 146              		.loc 1 37 101 is_stmt 0
 147              	#APP
 148              	# 37 "src/interruptRoutine.cpp" 1
  38              	
 149              		mv t1, a7
 150              	# 0 "" 2
 151              	.LVL19:
 152              	#NO_APP
 153 0068 233464F8 		sd	t1,-120(s0)
 154              	.LVL20:
  39:src/interruptRoutine.cpp ****     if (scause == 0x9 || scause == 0x8) {
 155              		.loc 1 39 5 is_stmt 1
 156              	.LBB2:
 157 006c 033784FD 		ld	a4,-40(s0)
 158 0070 93079000 		li	a5,9
 159 0074 6308F700 		beq	a4,a5,.L2
 160              		.loc 1 39 23 is_stmt 0 discriminator 1
 161 0078 033784FD 		ld	a4,-40(s0)
 162 007c 93078000 		li	a5,8
 163 0080 631AF736 		bne	a4,a5,.L3
 164              	.L2:
  40:src/interruptRoutine.cpp ****         //prekid zbog poziva ecall
  41:src/interruptRoutine.cpp ****         switch (a0) {
 165              		.loc 1 41 9 is_stmt 1
 166 0084 033704FC 		ld	a4,-64(s0)
 167 0088 93071009 		li	a5,145
 168 008c 630EF72C 		beq	a4,a5,.L4
 169 0090 033704FC 		ld	a4,-64(s0)
GAS LISTING /tmp/ccXWPiZd.s 			page 5


 170 0094 93071009 		li	a5,145
 171 0098 63E0E72E 		bgtu	a4,a5,.L5
 172 009c 033704FC 		ld	a4,-64(s0)
 173 00a0 93071008 		li	a5,129
 174 00a4 630EF728 		beq	a4,a5,.L6
 175 00a8 033704FC 		ld	a4,-64(s0)
 176 00ac 93071008 		li	a5,129
 177 00b0 63E4E72C 		bgtu	a4,a5,.L5
 178 00b4 033704FC 		ld	a4,-64(s0)
 179 00b8 93072004 		li	a5,66
 180 00bc 63E2E704 		bgtu	a4,a5,.L7
 181 00c0 833704FC 		ld	a5,-64(s0)
 182 00c4 638A072A 		beqz	a5,.L5
 183 00c8 033704FC 		ld	a4,-64(s0)
 184 00cc 93072004 		li	a5,66
 185 00d0 63E4E72A 		bgtu	a4,a5,.L5
 186 00d4 833704FC 		ld	a5,-64(s0)
 187 00d8 13972700 		slli	a4,a5,2
 188 00dc 97070000 		lla	a5,.L9
 188      93870700 
 189 00e4 B307F700 		add	a5,a4,a5
 190 00e8 83A70700 		lw	a5,0(a5)
 191 00ec 1B870700 		sext.w	a4,a5
 192 00f0 97070000 		lla	a5,.L9
 192      93870700 
 193 00f8 B307F700 		add	a5,a4,a5
 194 00fc 67800700 		jr	a5
 195              		.section	.rodata
 196 0071 000000   		.align	2
 197              		.align	2
 198              	.L9:
 199 0074 00000000 		.word	.L5-.L9
 200 0078 00000000 		.word	.L21-.L9
 201 007c 00000000 		.word	.L20-.L9
 202 0080 00000000 		.word	.L5-.L9
 203 0084 00000000 		.word	.L5-.L9
 204 0088 00000000 		.word	.L5-.L9
 205 008c 00000000 		.word	.L5-.L9
 206 0090 00000000 		.word	.L5-.L9
 207 0094 00000000 		.word	.L5-.L9
 208 0098 00000000 		.word	.L5-.L9
 209 009c 00000000 		.word	.L5-.L9
 210 00a0 00000000 		.word	.L5-.L9
 211 00a4 00000000 		.word	.L5-.L9
 212 00a8 00000000 		.word	.L5-.L9
 213 00ac 00000000 		.word	.L5-.L9
 214 00b0 00000000 		.word	.L5-.L9
 215 00b4 00000000 		.word	.L5-.L9
 216 00b8 00000000 		.word	.L19-.L9
 217 00bc 00000000 		.word	.L18-.L9
 218 00c0 00000000 		.word	.L17-.L9
 219 00c4 00000000 		.word	.L16-.L9
 220 00c8 00000000 		.word	.L5-.L9
 221 00cc 00000000 		.word	.L5-.L9
 222 00d0 00000000 		.word	.L5-.L9
 223 00d4 00000000 		.word	.L5-.L9
 224 00d8 00000000 		.word	.L5-.L9
GAS LISTING /tmp/ccXWPiZd.s 			page 6


 225 00dc 00000000 		.word	.L5-.L9
 226 00e0 00000000 		.word	.L5-.L9
 227 00e4 00000000 		.word	.L5-.L9
 228 00e8 00000000 		.word	.L5-.L9
 229 00ec 00000000 		.word	.L5-.L9
 230 00f0 00000000 		.word	.L5-.L9
 231 00f4 00000000 		.word	.L5-.L9
 232 00f8 00000000 		.word	.L15-.L9
 233 00fc 00000000 		.word	.L14-.L9
 234 0100 00000000 		.word	.L13-.L9
 235 0104 00000000 		.word	.L12-.L9
 236 0108 00000000 		.word	.L5-.L9
 237 010c 00000000 		.word	.L5-.L9
 238 0110 00000000 		.word	.L5-.L9
 239 0114 00000000 		.word	.L5-.L9
 240 0118 00000000 		.word	.L5-.L9
 241 011c 00000000 		.word	.L5-.L9
 242 0120 00000000 		.word	.L5-.L9
 243 0124 00000000 		.word	.L5-.L9
 244 0128 00000000 		.word	.L5-.L9
 245 012c 00000000 		.word	.L5-.L9
 246 0130 00000000 		.word	.L5-.L9
 247 0134 00000000 		.word	.L5-.L9
 248 0138 00000000 		.word	.L11-.L9
 249 013c 00000000 		.word	.L5-.L9
 250 0140 00000000 		.word	.L5-.L9
 251 0144 00000000 		.word	.L5-.L9
 252 0148 00000000 		.word	.L5-.L9
 253 014c 00000000 		.word	.L5-.L9
 254 0150 00000000 		.word	.L5-.L9
 255 0154 00000000 		.word	.L5-.L9
 256 0158 00000000 		.word	.L5-.L9
 257 015c 00000000 		.word	.L5-.L9
 258 0160 00000000 		.word	.L5-.L9
 259 0164 00000000 		.word	.L5-.L9
 260 0168 00000000 		.word	.L5-.L9
 261 016c 00000000 		.word	.L5-.L9
 262 0170 00000000 		.word	.L5-.L9
 263 0174 00000000 		.word	.L5-.L9
 264 0178 00000000 		.word	.L10-.L9
 265 017c 00000000 		.word	.L8-.L9
 266              		.text
 267              	.L7:
 268 0100 033704FC 		ld	a4,-64(s0)
 269 0104 93070008 		li	a5,128
 270 0108 6306F71E 		beq	a4,a5,.L22
 271 010c 6F00C026 		j	.L5
 272              	.L21:
  42:src/interruptRoutine.cpp ****             case 0x01:
 273              		.loc 1 42 13
  43:src/interruptRoutine.cpp ****                 //mem_alloc
  44:src/interruptRoutine.cpp ****                 //a1 = broj blokova koje treba alocirati
  45:src/interruptRoutine.cpp ****                 KMemory::kmalloc((size_t)a1);
 274              		.loc 1 45 17
 275              		.loc 1 45 33 is_stmt 0
 276 0110 033584FB 		ld	a0,-72(s0)
 277 0114 97000000 		call	_ZN7KMemory7kmallocEm@plt
GAS LISTING /tmp/ccXWPiZd.s 			page 7


 277      E7800000 
 278              	.LVL21:
  46:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 279              		.loc 1 46 17 is_stmt 1
 280              		.loc 1 46 50 is_stmt 0
 281              	#APP
 282              	# 46 "src/interruptRoutine.cpp" 1
  47              	                break;
 283              		sd a0, 80(s0)
 284              	# 0 "" 2
 285              		.loc 1 47 17 is_stmt 1
 286              	#NO_APP
 287 0120 6F00402B 		j	.L23
 288              	.LVL22:
 289              	.L20:
  48:src/interruptRoutine.cpp ****             case 0x02:
 290              		.loc 1 48 13
  49:src/interruptRoutine.cpp ****                 //mem_free
  50:src/interruptRoutine.cpp ****                 //a1 = pokazivac na memoriju koju dealociramo, dobijen sa mem_alloc
  51:src/interruptRoutine.cpp ****                 KMemory::kfree((void*)a1);
 291              		.loc 1 51 17
 292              		.loc 1 51 31 is_stmt 0
 293 0124 833784FB 		ld	a5,-72(s0)
 294 0128 13850700 		mv	a0,a5
 295 012c 97000000 		call	_ZN7KMemory5kfreeEPv@plt
 295      E7800000 
 296              	.LVL23:
  52:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 297              		.loc 1 52 17 is_stmt 1
 298              		.loc 1 52 50 is_stmt 0
 299              	#APP
 300              	# 52 "src/interruptRoutine.cpp" 1
  53              	                break;
 301              		sd a0, 80(s0)
 302              	# 0 "" 2
 303              		.loc 1 53 17 is_stmt 1
 304              	#NO_APP
 305 0138 6F00C029 		j	.L23
 306              	.LVL24:
 307              	.L19:
  54:src/interruptRoutine.cpp ****             case 0x11:
 308              		.loc 1 54 13
  55:src/interruptRoutine.cpp ****                 //thread_create
  56:src/interruptRoutine.cpp ****                 //a1 = pokazivac na rucku u koju upisujemo identifikator niti(adresa u memoriji)
  57:src/interruptRoutine.cpp ****                 //a2 = pokazivac na funkciju koju nit treba da izvrsava
  58:src/interruptRoutine.cpp ****                 //a3 = argumenti funkcije koju nit treba da izvrsava
  59:src/interruptRoutine.cpp ****                 //a4 = poslednja lokacija alociranog steka(najniza adresa)
  60:src/interruptRoutine.cpp ****                 *((thread_t*)a1) = TCB::createThread((TCB::Body)a2, (void*)a3, (uint64*)a4);
 309              		.loc 1 60 17
 310              		.loc 1 60 53 is_stmt 0
 311 013c 833704FB 		ld	a5,-80(s0)
 312 0140 033784FA 		ld	a4,-88(s0)
 313 0144 833604FA 		ld	a3,-96(s0)
 314              		.loc 1 60 17
 315 0148 833484FB 		ld	s1,-72(s0)
 316              		.loc 1 60 53
 317 014c 13860600 		mv	a2,a3
GAS LISTING /tmp/ccXWPiZd.s 			page 8


 318 0150 93050700 		mv	a1,a4
 319 0154 13850700 		mv	a0,a5
 320 0158 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 320      E7800000 
 321              	.LVL25:
 322 0160 93070500 		mv	a5,a0
 323              		.loc 1 60 34
 324 0164 23B0F400 		sd	a5,0(s1)
  61:src/interruptRoutine.cpp ****                 if ((TCB::Body)a2 != nullptr) {
 325              		.loc 1 61 17 is_stmt 1
 326              		.loc 1 61 35 is_stmt 0
 327 0168 833704FB 		ld	a5,-80(s0)
 328              		.loc 1 61 17
 329 016c 638C0700 		beqz	a5,.L24
  62:src/interruptRoutine.cpp ****                     Scheduler::put(*((thread_t*)a1));
 330              		.loc 1 62 21 is_stmt 1
 331              		.loc 1 62 35 is_stmt 0
 332 0170 833784FB 		ld	a5,-72(s0)
 333 0174 83B70700 		ld	a5,0(a5)
 334 0178 13850700 		mv	a0,a5
 335 017c 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 335      E7800000 
 336              	.LVL26:
 337              	.L24:
  63:src/interruptRoutine.cpp ****                 }
  64:src/interruptRoutine.cpp ****                 if (*((thread_t*)a1) != nullptr) {
 338              		.loc 1 64 17 is_stmt 1
 339              		.loc 1 64 21 is_stmt 0
 340 0184 833784FB 		ld	a5,-72(s0)
 341 0188 83B70700 		ld	a5,0(a5)
 342              		.loc 1 64 17
 343 018c 63860700 		beqz	a5,.L25
  65:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, 0");
 344              		.loc 1 65 21 is_stmt 1
 345              		.loc 1 65 49 is_stmt 0
 346              	#APP
 347              	# 65 "src/interruptRoutine.cpp" 1
  66              	                } else {
 348              		li a0, 0
 349              	# 0 "" 2
 350              	#NO_APP
 351 0194 6F008000 		j	.L26
 352              	.L25:
  67:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, -1");
 353              		.loc 1 67 21 is_stmt 1
 354              		.loc 1 67 50 is_stmt 0
 355              	#APP
 356              	# 67 "src/interruptRoutine.cpp" 1
  68              	                }
 357              		li a0, -1
 358              	# 0 "" 2
 359              	#NO_APP
 360              	.L26:
  69:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 361              		.loc 1 69 17 is_stmt 1
 362              		.loc 1 69 50 is_stmt 0
 363              	#APP
GAS LISTING /tmp/ccXWPiZd.s 			page 9


 364              	# 69 "src/interruptRoutine.cpp" 1
  70              	                break;
 365              		sd a0, 80(s0)
 366              	# 0 "" 2
 367              		.loc 1 70 17 is_stmt 1
 368              	#NO_APP
 369 01a0 6F004023 		j	.L23
 370              	.LVL27:
 371              	.L18:
  71:src/interruptRoutine.cpp ****             case 0x12:
 372              		.loc 1 71 13
  72:src/interruptRoutine.cpp ****                 //thread_exit
  73:src/interruptRoutine.cpp ****                 TCB::getRunning()->setStatus(TCB::FINISHED);
 373              		.loc 1 73 17
 374              		.loc 1 73 45 is_stmt 0
 375 01a4 97000000 		call	_ZN3TCB10getRunningEv
 375      E7800000 
 376              	.LVL28:
 377 01ac 93070500 		mv	a5,a0
 378 01b0 93055000 		li	a1,5
 379 01b4 13850700 		mv	a0,a5
 380 01b8 97000000 		call	_ZN3TCB9setStatusENS_12ThreadStatusE
 380      E7800000 
 381              	.LVL29:
  74:src/interruptRoutine.cpp ****                 TCB::releaseJoined();
 382              		.loc 1 74 17 is_stmt 1
 383              		.loc 1 74 35 is_stmt 0
 384 01c0 97000000 		call	_ZN3TCB13releaseJoinedEv@plt
 384      E7800000 
 385              	.LVL30:
  75:src/interruptRoutine.cpp ****                 TCB::dispatch();
 386              		.loc 1 75 17 is_stmt 1
 387              		.loc 1 75 30 is_stmt 0
 388 01c8 97000000 		call	_ZN3TCB8dispatchEv@plt
 388      E7800000 
 389              	.LVL31:
  76:src/interruptRoutine.cpp ****                 break;
 390              		.loc 1 76 17 is_stmt 1
 391 01d0 6F004020 		j	.L23
 392              	.LVL32:
 393              	.L17:
  77:src/interruptRoutine.cpp ****             case 0x13:
 394              		.loc 1 77 13
  78:src/interruptRoutine.cpp ****                 //thread_dispatch
  79:src/interruptRoutine.cpp ****                 TCB::dispatch();
 395              		.loc 1 79 17
 396              		.loc 1 79 30 is_stmt 0
 397 01d4 97000000 		call	_ZN3TCB8dispatchEv@plt
 397      E7800000 
 398              	.LVL33:
  80:src/interruptRoutine.cpp ****                 //TCB::dispatch();
  81:src/interruptRoutine.cpp ****                 break;
 399              		.loc 1 81 17 is_stmt 1
 400 01dc 6F00801F 		j	.L23
 401              	.LVL34:
 402              	.L16:
  82:src/interruptRoutine.cpp ****             case 0x14:
GAS LISTING /tmp/ccXWPiZd.s 			page 10


 403              		.loc 1 82 13
  83:src/interruptRoutine.cpp ****                 //thread_join
  84:src/interruptRoutine.cpp ****                 //a1 = rucka niti na koju tekuca nit treba da ceka
  85:src/interruptRoutine.cpp ****                 TCB::threadJoin((thread_t)a1);
 404              		.loc 1 85 17
 405              		.loc 1 85 32 is_stmt 0
 406 01e0 833784FB 		ld	a5,-72(s0)
 407 01e4 13850700 		mv	a0,a5
 408 01e8 97000000 		call	_ZN3TCB10threadJoinEPS_@plt
 408      E7800000 
 409              	.LVL35:
  86:src/interruptRoutine.cpp ****                 TCB::dispatch();
 410              		.loc 1 86 17 is_stmt 1
 411              		.loc 1 86 30 is_stmt 0
 412 01f0 97000000 		call	_ZN3TCB8dispatchEv@plt
 412      E7800000 
 413              	.LVL36:
  87:src/interruptRoutine.cpp ****                 break;
 414              		.loc 1 87 17 is_stmt 1
 415 01f8 6F00C01D 		j	.L23
 416              	.LVL37:
 417              	.L15:
  88:src/interruptRoutine.cpp ****             case 0x21:
 418              		.loc 1 88 13
  89:src/interruptRoutine.cpp ****                 //sem_open
  90:src/interruptRoutine.cpp ****                 //a1 = pokazivac na rucku semafora, u koju se upisuje adresa semafora u memoriji
  91:src/interruptRoutine.cpp ****                 *((sem_t*)a1) = KSem::initSem((uint)a2);
 419              		.loc 1 91 17
 420              		.loc 1 91 46 is_stmt 0
 421 01fc 833704FB 		ld	a5,-80(s0)
 422 0200 9B870700 		sext.w	a5,a5
 423              		.loc 1 91 17
 424 0204 833484FB 		ld	s1,-72(s0)
 425              		.loc 1 91 46
 426 0208 13850700 		mv	a0,a5
 427 020c 97000000 		call	_ZN4KSem7initSemEj@plt
 427      E7800000 
 428              	.LVL38:
 429 0214 93070500 		mv	a5,a0
 430              		.loc 1 91 31
 431 0218 23B0F400 		sd	a5,0(s1)
  92:src/interruptRoutine.cpp ****                 if (*((sem_t*)a1) != nullptr) {
 432              		.loc 1 92 17 is_stmt 1
 433              		.loc 1 92 21 is_stmt 0
 434 021c 833784FB 		ld	a5,-72(s0)
 435 0220 83B70700 		ld	a5,0(a5)
 436              		.loc 1 92 17
 437 0224 63860700 		beqz	a5,.L27
  93:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, 0");
 438              		.loc 1 93 21 is_stmt 1
 439              		.loc 1 93 49 is_stmt 0
 440              	#APP
 441              	# 93 "src/interruptRoutine.cpp" 1
  94              	                } else {
 442              		li a0, 0
 443              	# 0 "" 2
 444              	#NO_APP
GAS LISTING /tmp/ccXWPiZd.s 			page 11


 445 022c 6F008000 		j	.L28
 446              	.L27:
  95:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, -1");
 447              		.loc 1 95 21 is_stmt 1
 448              		.loc 1 95 50 is_stmt 0
 449              	#APP
 450              	# 95 "src/interruptRoutine.cpp" 1
  96              	                }
 451              		li a0, -1
 452              	# 0 "" 2
 453              	#NO_APP
 454              	.L28:
  97:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 455              		.loc 1 97 17 is_stmt 1
 456              		.loc 1 97 50 is_stmt 0
 457              	#APP
 458              	# 97 "src/interruptRoutine.cpp" 1
  98              	                break;
 459              		sd a0, 80(s0)
 460              	# 0 "" 2
 461              		.loc 1 98 17 is_stmt 1
 462              	#NO_APP
 463 0238 6F00C019 		j	.L23
 464              	.LVL39:
 465              	.L14:
  99:src/interruptRoutine.cpp ****             case 0x22:
 466              		.loc 1 99 13
 100:src/interruptRoutine.cpp ****                 //sem_close
 101:src/interruptRoutine.cpp ****                 //a1 = rucka semafora
 102:src/interruptRoutine.cpp ****                 KSem::closeSem((sem_t)a1);
 467              		.loc 1 102 17
 468              		.loc 1 102 31 is_stmt 0
 469 023c 833784FB 		ld	a5,-72(s0)
 470 0240 13850700 		mv	a0,a5
 471 0244 97000000 		call	_ZN4KSem8closeSemEPS_@plt
 471      E7800000 
 472              	.LVL40:
 103:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 473              		.loc 1 103 17 is_stmt 1
 474              		.loc 1 103 50 is_stmt 0
 475              	#APP
 476              	# 103 "src/interruptRoutine.cpp" 1
 104              	                break;
 477              		sd a0, 80(s0)
 478              	# 0 "" 2
 479              		.loc 1 104 17 is_stmt 1
 480              	#NO_APP
 481 0250 6F004018 		j	.L23
 482              	.LVL41:
 483              	.L13:
 105:src/interruptRoutine.cpp ****             case 0x23:
 484              		.loc 1 105 13
 106:src/interruptRoutine.cpp ****                 //sem_wait
 107:src/interruptRoutine.cpp ****                 //a1 = rucka semafora
 108:src/interruptRoutine.cpp ****                 ((sem_t)a1)->wait();
 485              		.loc 1 108 17
 486              		.loc 1 108 34 is_stmt 0
GAS LISTING /tmp/ccXWPiZd.s 			page 12


 487 0254 833784FB 		ld	a5,-72(s0)
 488 0258 13850700 		mv	a0,a5
 489 025c 97000000 		call	_ZN4KSem4waitEv@plt
 489      E7800000 
 490              	.LVL42:
 109:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 491              		.loc 1 109 17 is_stmt 1
 492              		.loc 1 109 50 is_stmt 0
 493              	#APP
 494              	# 109 "src/interruptRoutine.cpp" 1
 110              	                break;
 495              		sd a0, 80(s0)
 496              	# 0 "" 2
 497              		.loc 1 110 17 is_stmt 1
 498              	#NO_APP
 499 0268 6F00C016 		j	.L23
 500              	.LVL43:
 501              	.L12:
 111:src/interruptRoutine.cpp ****             case 0x24:
 502              		.loc 1 111 13
 112:src/interruptRoutine.cpp ****                 //sem_signal
 113:src/interruptRoutine.cpp ****                 //a1 = rucka semafora
 114:src/interruptRoutine.cpp ****                 ((sem_t)a1)->signal();
 503              		.loc 1 114 17
 504              		.loc 1 114 36 is_stmt 0
 505 026c 833784FB 		ld	a5,-72(s0)
 506 0270 13850700 		mv	a0,a5
 507 0274 97000000 		call	_ZN4KSem6signalEv@plt
 507      E7800000 
 508              	.LVL44:
 115:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 509              		.loc 1 115 17 is_stmt 1
 510              		.loc 1 115 50 is_stmt 0
 511              	#APP
 512              	# 115 "src/interruptRoutine.cpp" 1
 116              	                break;
 513              		sd a0, 80(s0)
 514              	# 0 "" 2
 515              		.loc 1 116 17 is_stmt 1
 516              	#NO_APP
 517 0280 6F004015 		j	.L23
 518              	.LVL45:
 519              	.L11:
 117:src/interruptRoutine.cpp ****             case 0x31:
 520              		.loc 1 117 13
 118:src/interruptRoutine.cpp ****                 //time_sleep
 119:src/interruptRoutine.cpp ****                 //a1 = broj perioda tajmera na koji se uspavljuje tekuca nit
 120:src/interruptRoutine.cpp ****                 if ((time_t)a1 > 0) {
 521              		.loc 1 120 17
 522 0284 833784FB 		ld	a5,-72(s0)
 523 0288 63860700 		beqz	a5,.L29
 121:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, 0");
 524              		.loc 1 121 21
 525              		.loc 1 121 49 is_stmt 0
 526              	#APP
 527              	# 121 "src/interruptRoutine.cpp" 1
 122              	                } else {
GAS LISTING /tmp/ccXWPiZd.s 			page 13


 528              		li a0, 0
 529              	# 0 "" 2
 530              	#NO_APP
 531 0290 6F008000 		j	.L30
 532              	.L29:
 123:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, -1");
 533              		.loc 1 123 21 is_stmt 1
 534              		.loc 1 123 50 is_stmt 0
 535              	#APP
 536              	# 123 "src/interruptRoutine.cpp" 1
 124              	                }
 537              		li a0, -1
 538              	# 0 "" 2
 539              	#NO_APP
 540              	.L30:
 125:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 541              		.loc 1 125 17 is_stmt 1
 542              		.loc 1 125 50 is_stmt 0
 543              	#APP
 544              	# 125 "src/interruptRoutine.cpp" 1
 126              	                if ((time_t)a1 > 0) {
 545              		sd a0, 80(s0)
 546              	# 0 "" 2
 547              		.loc 1 126 17 is_stmt 1
 548              	#NO_APP
 549 029c 833784FB 		ld	a5,-72(s0)
 550 02a0 63880712 		beqz	a5,.L40
 127:src/interruptRoutine.cpp ****                     Scheduler::putToSleep(TCB::getRunning(), (time_t)a1);
 551              		.loc 1 127 21
 552              		.loc 1 127 42 is_stmt 0
 553 02a4 97000000 		call	_ZN3TCB10getRunningEv
 553      E7800000 
 554              	.LVL46:
 555 02ac 93070500 		mv	a5,a0
 556 02b0 833584FB 		ld	a1,-72(s0)
 557 02b4 13850700 		mv	a0,a5
 558 02b8 97000000 		call	_ZN9Scheduler10putToSleepEP3TCBm@plt
 558      E7800000 
 559              	.LVL47:
 128:src/interruptRoutine.cpp ****                     TCB::dispatch();
 560              		.loc 1 128 21 is_stmt 1
 561              		.loc 1 128 34 is_stmt 0
 562 02c0 97000000 		call	_ZN3TCB8dispatchEv@plt
 562      E7800000 
 563              	.LVL48:
 129:src/interruptRoutine.cpp ****                 }
 130:src/interruptRoutine.cpp ****                 break;
 564              		.loc 1 130 17 is_stmt 1
 565 02c8 6F008010 		j	.L40
 566              	.LVL49:
 567              	.L10:
 131:src/interruptRoutine.cpp ****             case 0x41:
 568              		.loc 1 131 13
 132:src/interruptRoutine.cpp ****                 //getc
 133:src/interruptRoutine.cpp ****                 KConsole::kgetc();
 569              		.loc 1 133 17
 570              		.loc 1 133 32 is_stmt 0
GAS LISTING /tmp/ccXWPiZd.s 			page 14


 571 02cc 97000000 		call	_ZN8KConsole5kgetcEv@plt
 571      E7800000 
 572              	.LVL50:
 134:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 573              		.loc 1 134 17 is_stmt 1
 574              		.loc 1 134 50 is_stmt 0
 575              	#APP
 576              	# 134 "src/interruptRoutine.cpp" 1
 135              	                break;
 577              		sd a0, 80(s0)
 578              	# 0 "" 2
 579              		.loc 1 135 17 is_stmt 1
 580              	#NO_APP
 581 02d8 6F00C00F 		j	.L23
 582              	.LVL51:
 583              	.L8:
 136:src/interruptRoutine.cpp ****             case 0x42:
 584              		.loc 1 136 13
 137:src/interruptRoutine.cpp ****                 //putc
 138:src/interruptRoutine.cpp ****                 //a1 = karakter koji se upisuje u bafer za ispis na konzolu
 139:src/interruptRoutine.cpp ****                 KConsole::kputc((char)a1);
 585              		.loc 1 139 17
 586              		.loc 1 139 32 is_stmt 0
 587 02dc 833784FB 		ld	a5,-72(s0)
 588 02e0 93F7F70F 		andi	a5,a5,0xff
 589 02e4 13850700 		mv	a0,a5
 590 02e8 97000000 		call	_ZN8KConsole5kputcEc@plt
 590      E7800000 
 591              	.LVL52:
 140:src/interruptRoutine.cpp ****                 break;
 592              		.loc 1 140 17 is_stmt 1
 593 02f0 6F00400E 		j	.L23
 594              	.LVL53:
 595              	.L22:
 141:src/interruptRoutine.cpp ****             case 0x80:
 596              		.loc 1 141 13
 142:src/interruptRoutine.cpp ****                 //alloc thread
 143:src/interruptRoutine.cpp ****                 //a1 = pokazivac na rucku u koju upisujemo identifikator niti(adresa u memoriji)
 144:src/interruptRoutine.cpp ****                 //a2 = pokazivac na funkciju koju nit treba da izvrsava
 145:src/interruptRoutine.cpp ****                 //a3 = argumenti funkcije koju nit treba da izvrsava
 146:src/interruptRoutine.cpp ****                 //a4 = poslednja lokacija alociranog steka(najniza adresa)
 147:src/interruptRoutine.cpp ****                 *((thread_t*)a1) = TCB::createThread((TCB::Body)a2, (void*)a3, (uint64*)a4);
 597              		.loc 1 147 17
 598              		.loc 1 147 53 is_stmt 0
 599 02f4 833704FB 		ld	a5,-80(s0)
 600 02f8 033784FA 		ld	a4,-88(s0)
 601 02fc 833604FA 		ld	a3,-96(s0)
 602              		.loc 1 147 17
 603 0300 833484FB 		ld	s1,-72(s0)
 604              		.loc 1 147 53
 605 0304 13860600 		mv	a2,a3
 606 0308 93050700 		mv	a1,a4
 607 030c 13850700 		mv	a0,a5
 608 0310 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 608      E7800000 
 609              	.LVL54:
 610 0318 93070500 		mv	a5,a0
GAS LISTING /tmp/ccXWPiZd.s 			page 15


 611              		.loc 1 147 34
 612 031c 23B0F400 		sd	a5,0(s1)
 148:src/interruptRoutine.cpp ****                 if (*((thread_t*)a1) != nullptr) {
 613              		.loc 1 148 17 is_stmt 1
 614              		.loc 1 148 21 is_stmt 0
 615 0320 833784FB 		ld	a5,-72(s0)
 616 0324 83B70700 		ld	a5,0(a5)
 617              		.loc 1 148 17
 618 0328 63860700 		beqz	a5,.L32
 149:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, 0");
 619              		.loc 1 149 21 is_stmt 1
 620              		.loc 1 149 49 is_stmt 0
 621              	#APP
 622              	# 149 "src/interruptRoutine.cpp" 1
 150              	                } else {
 623              		li a0, 0
 624              	# 0 "" 2
 625              	#NO_APP
 626 0330 6F008000 		j	.L33
 627              	.L32:
 151:src/interruptRoutine.cpp ****                     __asm__ volatile("li a0, -1");
 628              		.loc 1 151 21 is_stmt 1
 629              		.loc 1 151 50 is_stmt 0
 630              	#APP
 631              	# 151 "src/interruptRoutine.cpp" 1
 152              	                }
 632              		li a0, -1
 633              	# 0 "" 2
 634              	#NO_APP
 635              	.L33:
 153:src/interruptRoutine.cpp ****                 __asm__ volatile("sd a0, 80(s0)");
 636              		.loc 1 153 17 is_stmt 1
 637              		.loc 1 153 50 is_stmt 0
 638              	#APP
 639              	# 153 "src/interruptRoutine.cpp" 1
 154              	                break;
 640              		sd a0, 80(s0)
 641              	# 0 "" 2
 642              		.loc 1 154 17 is_stmt 1
 643              	#NO_APP
 644 033c 6F008009 		j	.L23
 645              	.LVL55:
 646              	.L6:
 155:src/interruptRoutine.cpp ****             case 0x81:
 647              		.loc 1 155 13
 156:src/interruptRoutine.cpp ****                 //start thread
 157:src/interruptRoutine.cpp ****                 //a1 = rucka niti koja se stavlja u scheduler
 158:src/interruptRoutine.cpp ****                 //if (((thread_t)a1)->getBody() != nullptr) {
 159:src/interruptRoutine.cpp ****                     Scheduler::put((thread_t)a1);
 648              		.loc 1 159 21
 649              		.loc 1 159 35 is_stmt 0
 650 0340 833784FB 		ld	a5,-72(s0)
 651 0344 13850700 		mv	a0,a5
 652 0348 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 652      E7800000 
 653              	.LVL56:
 160:src/interruptRoutine.cpp ****                     ((thread_t)a1)->setStatus(TCB::ACTIVE);
GAS LISTING /tmp/ccXWPiZd.s 			page 16


 654              		.loc 1 160 21 is_stmt 1
 655              		.loc 1 160 46 is_stmt 0
 656 0350 833784FB 		ld	a5,-72(s0)
 657 0354 93051000 		li	a1,1
 658 0358 13850700 		mv	a0,a5
 659 035c 97000000 		call	_ZN3TCB9setStatusENS_12ThreadStatusE
 659      E7800000 
 660              	.LVL57:
 161:src/interruptRoutine.cpp ****                 //}
 162:src/interruptRoutine.cpp ****                 break;
 661              		.loc 1 162 17 is_stmt 1
 662 0364 6F000007 		j	.L23
 663              	.LVL58:
 664              	.L4:
 163:src/interruptRoutine.cpp ****             case 0x91:
 665              		.loc 1 163 13
 164:src/interruptRoutine.cpp ****                 //printInteger
 165:src/interruptRoutine.cpp ****                 //a1 = integer za ispis
 166:src/interruptRoutine.cpp ****                 kPrintInt(a1);
 666              		.loc 1 166 17
 667              		.loc 1 166 26 is_stmt 0
 668 0368 033584FB 		ld	a0,-72(s0)
 669 036c 97000000 		call	_Z9kPrintIntm@plt
 669      E7800000 
 670              	.LVL59:
 167:src/interruptRoutine.cpp ****                 break;
 671              		.loc 1 167 17 is_stmt 1
 672 0374 6F000006 		j	.L23
 673              	.LVL60:
 674              	.L5:
 168:src/interruptRoutine.cpp ****             default:
 675              		.loc 1 168 13
 169:src/interruptRoutine.cpp ****                 printString("\nNepostojeci op code: ");
 676              		.loc 1 169 17
 677              		.loc 1 169 28 is_stmt 0
 678 0378 17050000 		lla	a0,.LC0
 678      13050500 
 679 0380 97000000 		call	_Z11printStringPKc@plt
 679      E7800000 
 680              	.LVL61:
 170:src/interruptRoutine.cpp ****                 kPrintInt(a0);
 681              		.loc 1 170 17 is_stmt 1
 682              		.loc 1 170 26 is_stmt 0
 683 0388 033504FC 		ld	a0,-64(s0)
 684 038c 97000000 		call	_Z9kPrintIntm@plt
 684      E7800000 
 685              	.LVL62:
 171:src/interruptRoutine.cpp ****                 printString("\nscause: ");
 686              		.loc 1 171 17 is_stmt 1
 687              		.loc 1 171 28 is_stmt 0
 688 0394 17050000 		lla	a0,.LC1
 688      13050500 
 689 039c 97000000 		call	_Z11printStringPKc@plt
 689      E7800000 
 690              	.LVL63:
 172:src/interruptRoutine.cpp ****                 kPrintInt(scause);
 691              		.loc 1 172 17 is_stmt 1
GAS LISTING /tmp/ccXWPiZd.s 			page 17


 692              		.loc 1 172 26 is_stmt 0
 693 03a4 033584FD 		ld	a0,-40(s0)
 694 03a8 97000000 		call	_Z9kPrintIntm@plt
 694      E7800000 
 695              	.LVL64:
 173:src/interruptRoutine.cpp ****                 printString("\nsepc: ");
 696              		.loc 1 173 17 is_stmt 1
 697              		.loc 1 173 28 is_stmt 0
 698 03b0 17050000 		lla	a0,.LC2
 698      13050500 
 699 03b8 97000000 		call	_Z11printStringPKc@plt
 699      E7800000 
 700              	.LVL65:
 174:src/interruptRoutine.cpp ****                 kPrintInt(sepc);
 701              		.loc 1 174 17 is_stmt 1
 702              		.loc 1 174 26 is_stmt 0
 703 03c0 033504FD 		ld	a0,-48(s0)
 704 03c4 97000000 		call	_Z9kPrintIntm@plt
 704      E7800000 
 705              	.LVL66:
 175:src/interruptRoutine.cpp ****                 break;
 706              		.loc 1 175 17 is_stmt 1
 707 03cc 6F008000 		j	.L23
 708              	.L40:
 130:src/interruptRoutine.cpp ****             case 0x41:
 709              		.loc 1 130 17 is_stmt 0
 710 03d0 13000000 		nop
 711              	.L23:
 176:src/interruptRoutine.cpp ****         }
 177:src/interruptRoutine.cpp ****         //sepc pokazuje na ecall instrukciju, treba preci na sledecu instrukciju
 178:src/interruptRoutine.cpp ****         sepc += 4;
 712              		.loc 1 178 9 is_stmt 1
 713              		.loc 1 178 14 is_stmt 0
 714 03d4 833704FD 		ld	a5,-48(s0)
 715 03d8 93874700 		addi	a5,a5,4
 716 03dc 2338F4FC 		sd	a5,-48(s0)
 717              	.LVL67:
 179:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 718              		.loc 1 179 9 is_stmt 1
 719              		.loc 1 179 66 is_stmt 0
 720 03e0 833704FD 		ld	a5,-48(s0)
 721              	#APP
 722              	# 179 "src/interruptRoutine.cpp" 1
 180              	        __asm__ volatile("csrw sstatus, %[stat]": :[stat]"r"(sstatus));
 723              		csrw sepc, a5
 724              	# 0 "" 2
 725              		.loc 1 180 9 is_stmt 1
 726              		.loc 1 180 71 is_stmt 0
 727              	#NO_APP
 728 03e8 833784FC 		ld	a5,-56(s0)
 729              	.LVL68:
 730              	#APP
 731              	# 180 "src/interruptRoutine.cpp" 1
 181              	    } else if (scause == 0x8000000000000009) {
 732              		csrw sstatus, a5
 733              	# 0 "" 2
 734              	#NO_APP
GAS LISTING /tmp/ccXWPiZd.s 			page 18


 735              	.LBE2:
 182:src/interruptRoutine.cpp ****         //spoljasnji hardverski prekid (od konzole)
 183:src/interruptRoutine.cpp ****         uint64 irq = plic_claim();
 184:src/interruptRoutine.cpp ****         if (irq == CONSOLE_IRQ) {
 185:src/interruptRoutine.cpp ****             if (*KConsole::sr & CONSOLE_RX_STATUS_BIT) {
 186:src/interruptRoutine.cpp ****                 KConsole::placeInInput(*KConsole::dr);
 187:src/interruptRoutine.cpp ****             }
 188:src/interruptRoutine.cpp ****             //printString("\nobradjen prekid konzole\n");
 189:src/interruptRoutine.cpp ****         } else {
 190:src/interruptRoutine.cpp ****             printString("Neki drugi prekid\n");
 191:src/interruptRoutine.cpp ****         }
 192:src/interruptRoutine.cpp ****         plic_complete(irq);
 193:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 194:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sstatus, %[stat]": :[stat]"r"(sstatus));
 195:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SEIP);
 196:src/interruptRoutine.cpp ****     } else if (scause == 0x8000000000000001) {
 197:src/interruptRoutine.cpp ****         //prekid od tajmera
 198:src/interruptRoutine.cpp ****         //printString("\nPrekid od tajmera\n");
 199:src/interruptRoutine.cpp ****         Scheduler::wake();
 200:src/interruptRoutine.cpp ****         TCB::getRunningTimeSlice()++;
 201:src/interruptRoutine.cpp ****         if (TCB::getRunningTimeSlice() >= TCB::getRunning()->getTimeSlice()) {
 202:src/interruptRoutine.cpp ****             //printString("\nMenjam kontekst\n");
 203:src/interruptRoutine.cpp ****             TCB::dispatch();
 204:src/interruptRoutine.cpp ****             //TCB::dispatch();
 205:src/interruptRoutine.cpp ****             //TCB::runningTimeSlice = 0;
 206:src/interruptRoutine.cpp ****         }
 207:src/interruptRoutine.cpp **** 
 208:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 209:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sstatus, %[stat]": :[stat]"r"(sstatus));
 210:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SSIP);
 211:src/interruptRoutine.cpp ****     } else {
 212:src/interruptRoutine.cpp ****         printString("\nGreska u prekidnoj rutini\n");
 213:src/interruptRoutine.cpp ****         printString("scause: ");
 214:src/interruptRoutine.cpp ****         kPrintInt(scause);
 215:src/interruptRoutine.cpp ****         printString("\nsepc: ");
 216:src/interruptRoutine.cpp ****         kPrintInt(sepc);
 217:src/interruptRoutine.cpp ****     }
 218:src/interruptRoutine.cpp **** }...
 736              		.loc 1 218 1
 737 03f0 6F000019 		j	.L41
 738              	.LVL69:
 739              	.L3:
 740              	.LBB10:
 741              	.LBB3:
 181:src/interruptRoutine.cpp ****     } else if (scause == 0x8000000000000009) {
 742              		.loc 1 181 12 is_stmt 1
 743              	.LBB4:
 744 03f4 033784FD 		ld	a4,-40(s0)
 745              	.LVL70:
 746 03f8 9307F0FF 		li	a5,-1
 747 03fc 9397F703 		slli	a5,a5,63
 748 0400 93879700 		addi	a5,a5,9
 749 0404 631EF708 		bne	a4,a5,.L35
 750              	.LBB5:
 183:src/interruptRoutine.cpp ****         uint64 irq = plic_claim();
 751              		.loc 1 183 9
 183:src/interruptRoutine.cpp ****         uint64 irq = plic_claim();
GAS LISTING /tmp/ccXWPiZd.s 			page 19


 752              		.loc 1 183 32 is_stmt 0
 753 0408 97000000 		call	plic_claim@plt
 753      E7800000 
 754              	.LVL71:
 755 0410 93070500 		mv	a5,a0
 183:src/interruptRoutine.cpp ****         uint64 irq = plic_claim();
 756              		.loc 1 183 33
 757 0414 2330F4F8 		sd	a5,-128(s0)
 758              	.LVL72:
 184:src/interruptRoutine.cpp ****         if (irq == CONSOLE_IRQ) {
 759              		.loc 1 184 9 is_stmt 1
 760 0418 033704F8 		ld	a4,-128(s0)
 761 041c 9307A000 		li	a5,10
 762 0420 631EF702 		bne	a4,a5,.L36
 185:src/interruptRoutine.cpp ****             if (*KConsole::sr & CONSOLE_RX_STATUS_BIT) {
 763              		.loc 1 185 13
 185:src/interruptRoutine.cpp ****             if (*KConsole::sr & CONSOLE_RX_STATUS_BIT) {
 764              		.loc 1 185 17 is_stmt 0
 765 0424 97070000 		la	a5,_ZN8KConsole2srE
 765      83B70700 
 766 042c 83B70700 		ld	a5,0(a5)
 767 0430 83C70700 		lbu	a5,0(a5)
 185:src/interruptRoutine.cpp ****             if (*KConsole::sr & CONSOLE_RX_STATUS_BIT) {
 768              		.loc 1 185 31
 769 0434 93F71700 		andi	a5,a5,1
 185:src/interruptRoutine.cpp ****             if (*KConsole::sr & CONSOLE_RX_STATUS_BIT) {
 770              		.loc 1 185 13
 771 0438 638A0702 		beqz	a5,.L37
 186:src/interruptRoutine.cpp ****                 KConsole::placeInInput(*KConsole::dr);
 772              		.loc 1 186 17 is_stmt 1
 186:src/interruptRoutine.cpp ****                 KConsole::placeInInput(*KConsole::dr);
 773              		.loc 1 186 39 is_stmt 0
 774 043c 97070000 		la	a5,_ZN8KConsole2drE
 774      83B70700 
 775 0444 83B70700 		ld	a5,0(a5)
 776 0448 83C70700 		lbu	a5,0(a5)
 777 044c 13850700 		mv	a0,a5
 778              	.LVL73:
 779 0450 97000000 		call	_ZN8KConsole12placeInInputEc@plt
 779      E7800000 
 780              	.LVL74:
 781 0458 6F004001 		j	.L37
 782              	.LVL75:
 783              	.L36:
 190:src/interruptRoutine.cpp ****             printString("Neki drugi prekid\n");
 784              		.loc 1 190 13 is_stmt 1
 190:src/interruptRoutine.cpp ****             printString("Neki drugi prekid\n");
 785              		.loc 1 190 24 is_stmt 0
 786 045c 17050000 		lla	a0,.LC3
 786      13050500 
 787              	.LVL76:
 788 0464 97000000 		call	_Z11printStringPKc@plt
 788      E7800000 
 789              	.LVL77:
 790              	.L37:
 192:src/interruptRoutine.cpp ****         plic_complete(irq);
 791              		.loc 1 192 9 is_stmt 1
GAS LISTING /tmp/ccXWPiZd.s 			page 20


 192:src/interruptRoutine.cpp ****         plic_complete(irq);
 792              		.loc 1 192 22 is_stmt 0
 793 046c 833704F8 		ld	a5,-128(s0)
 794 0470 9B870700 		sext.w	a5,a5
 795 0474 13850700 		mv	a0,a5
 796 0478 97000000 		call	plic_complete@plt
 796      E7800000 
 797              	.LVL78:
 193:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 798              		.loc 1 193 9 is_stmt 1
 193:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 799              		.loc 1 193 66 is_stmt 0
 800 0480 833704FD 		ld	a5,-48(s0)
 801              	#APP
 802              	# 193 "src/interruptRoutine.cpp" 1
 194:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sstatus, %[stat]": :[stat]"r"(sstatus));
 803              		csrw sepc, a5
 804              	# 0 "" 2
 805              		.loc 1 194 9 is_stmt 1
 194:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sstatus, %[stat]": :[stat]"r"(sstatus));
 806              		.loc 1 194 71 is_stmt 0
 807              	#NO_APP
 808 0488 833784FC 		ld	a5,-56(s0)
 809              	#APP
 810              	# 194 "src/interruptRoutine.cpp" 1
 195:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SEIP);
 811              		csrw sstatus, a5
 812              	# 0 "" 2
 813              		.loc 1 195 9 is_stmt 1
 195:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SEIP);
 814              		.loc 1 195 22 is_stmt 0
 815              	#NO_APP
 816 0490 13050020 		li	a0,512
 817 0494 97000000 		call	_ZN5Riscv6mc_sipEm
 817      E7800000 
 818              	.LVL79:
 819              	.LBE5:
 820              	.LBE4:
 821              	.LBE3:
 822              	.LBE10:
 823              		.loc 1 218 1
 824 049c 6F00400E 		j	.L41
 825              	.LVL80:
 826              	.L35:
 827              	.LBB11:
 828              	.LBB8:
 829              	.LBB6:
 196:src/interruptRoutine.cpp ****     } else if (scause == 0x8000000000000001) {
 830              		.loc 1 196 12 is_stmt 1
 831 04a0 033784FD 		ld	a4,-40(s0)
 832 04a4 9307F0FF 		li	a5,-1
 833 04a8 9397F703 		slli	a5,a5,63
 834 04ac 93871700 		addi	a5,a5,1
 835 04b0 6314F708 		bne	a4,a5,.L38
 199:src/interruptRoutine.cpp ****         Scheduler::wake();
 836              		.loc 1 199 9
 199:src/interruptRoutine.cpp ****         Scheduler::wake();
GAS LISTING /tmp/ccXWPiZd.s 			page 21


 837              		.loc 1 199 24 is_stmt 0
 838 04b4 97000000 		call	_ZN9Scheduler4wakeEv@plt
 838      E7800000 
 839              	.LVL81:
 200:src/interruptRoutine.cpp ****         TCB::getRunningTimeSlice()++;
 840              		.loc 1 200 9 is_stmt 1
 200:src/interruptRoutine.cpp ****         TCB::getRunningTimeSlice()++;
 841              		.loc 1 200 34 is_stmt 0
 842 04bc 97000000 		call	_ZN3TCB19getRunningTimeSliceEv
 842      E7800000 
 843              	.LVL82:
 844 04c4 93070500 		mv	a5,a0
 200:src/interruptRoutine.cpp ****         TCB::getRunningTimeSlice()++;
 845              		.loc 1 200 33
 846 04c8 03B70700 		ld	a4,0(a5)
 200:src/interruptRoutine.cpp ****         TCB::getRunningTimeSlice()++;
 847              		.loc 1 200 35
 848 04cc 13071700 		addi	a4,a4,1
 849 04d0 23B0E700 		sd	a4,0(a5)
 201:src/interruptRoutine.cpp ****         if (TCB::getRunningTimeSlice() >= TCB::getRunning()->getTimeSlice()) {
 850              		.loc 1 201 9 is_stmt 1
 201:src/interruptRoutine.cpp ****         if (TCB::getRunningTimeSlice() >= TCB::getRunning()->getTimeSlice()) {
 851              		.loc 1 201 38 is_stmt 0
 852 04d4 97000000 		call	_ZN3TCB19getRunningTimeSliceEv
 852      E7800000 
 853              	.LVL83:
 854 04dc 93070500 		mv	a5,a0
 201:src/interruptRoutine.cpp ****         if (TCB::getRunningTimeSlice() >= TCB::getRunning()->getTimeSlice()) {
 855              		.loc 1 201 37
 856 04e0 83B40700 		ld	s1,0(a5)
 201:src/interruptRoutine.cpp ****         if (TCB::getRunningTimeSlice() >= TCB::getRunning()->getTimeSlice()) {
 857              		.loc 1 201 74
 858 04e4 97000000 		call	_ZN3TCB10getRunningEv
 858      E7800000 
 859              	.LVL84:
 860 04ec 93070500 		mv	a5,a0
 861 04f0 13850700 		mv	a0,a5
 862 04f4 97000000 		call	_ZN3TCB12getTimeSliceEv
 862      E7800000 
 863              	.LVL85:
 864 04fc 93070500 		mv	a5,a0
 201:src/interruptRoutine.cpp ****         if (TCB::getRunningTimeSlice() >= TCB::getRunning()->getTimeSlice()) {
 865              		.loc 1 201 40
 866 0500 B3B7F400 		sltu	a5,s1,a5
 867 0504 93C71700 		xori	a5,a5,1
 868 0508 93F7F70F 		andi	a5,a5,0xff
 201:src/interruptRoutine.cpp ****         if (TCB::getRunningTimeSlice() >= TCB::getRunning()->getTimeSlice()) {
 869              		.loc 1 201 9
 870 050c 63860700 		beqz	a5,.L39
 203:src/interruptRoutine.cpp ****             TCB::dispatch();
 871              		.loc 1 203 13 is_stmt 1
 203:src/interruptRoutine.cpp ****             TCB::dispatch();
 872              		.loc 1 203 26 is_stmt 0
 873 0510 97000000 		call	_ZN3TCB8dispatchEv@plt
 873      E7800000 
 874              	.LVL86:
 875              	.L39:
GAS LISTING /tmp/ccXWPiZd.s 			page 22


 208:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 876              		.loc 1 208 9 is_stmt 1
 208:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 877              		.loc 1 208 66 is_stmt 0
 878 0518 833704FD 		ld	a5,-48(s0)
 879              	#APP
 880              	# 208 "src/interruptRoutine.cpp" 1
 209:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sstatus, %[stat]": :[stat]"r"(sstatus));
 881              		csrw sepc, a5
 882              	# 0 "" 2
 883              		.loc 1 209 9 is_stmt 1
 209:src/interruptRoutine.cpp ****         __asm__ volatile("csrw sstatus, %[stat]": :[stat]"r"(sstatus));
 884              		.loc 1 209 71 is_stmt 0
 885              	#NO_APP
 886 0520 833784FC 		ld	a5,-56(s0)
 887              	#APP
 888              	# 209 "src/interruptRoutine.cpp" 1
 210:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SSIP);
 889              		csrw sstatus, a5
 890              	# 0 "" 2
 891              		.loc 1 210 9 is_stmt 1
 210:src/interruptRoutine.cpp ****         Riscv::mc_sip(Riscv::SIP_SSIP);
 892              		.loc 1 210 22 is_stmt 0
 893              	#NO_APP
 894 0528 13052000 		li	a0,2
 895 052c 97000000 		call	_ZN5Riscv6mc_sipEm
 895      E7800000 
 896              	.LVL87:
 897              	.LBE6:
 898              	.LBE8:
 899              	.LBE11:
 900              		.loc 1 218 1
 901 0534 6F00C004 		j	.L41
 902              	.LVL88:
 903              	.L38:
 904              	.LBB12:
 905              	.LBB9:
 906              	.LBB7:
 212:src/interruptRoutine.cpp ****         printString("\nGreska u prekidnoj rutini\n");
 907              		.loc 1 212 9 is_stmt 1
 212:src/interruptRoutine.cpp ****         printString("\nGreska u prekidnoj rutini\n");
 908              		.loc 1 212 20 is_stmt 0
 909 0538 17050000 		lla	a0,.LC4
 909      13050500 
 910 0540 97000000 		call	_Z11printStringPKc@plt
 910      E7800000 
 911              	.LVL89:
 213:src/interruptRoutine.cpp ****         printString("scause: ");
 912              		.loc 1 213 9 is_stmt 1
 213:src/interruptRoutine.cpp ****         printString("scause: ");
 913              		.loc 1 213 20 is_stmt 0
 914 0548 17050000 		lla	a0,.LC5
 914      13050500 
 915 0550 97000000 		call	_Z11printStringPKc@plt
 915      E7800000 
 916              	.LVL90:
 214:src/interruptRoutine.cpp ****         kPrintInt(scause);
GAS LISTING /tmp/ccXWPiZd.s 			page 23


 917              		.loc 1 214 9 is_stmt 1
 214:src/interruptRoutine.cpp ****         kPrintInt(scause);
 918              		.loc 1 214 18 is_stmt 0
 919 0558 033584FD 		ld	a0,-40(s0)
 920 055c 97000000 		call	_Z9kPrintIntm@plt
 920      E7800000 
 921              	.LVL91:
 215:src/interruptRoutine.cpp ****         printString("\nsepc: ");
 922              		.loc 1 215 9 is_stmt 1
 215:src/interruptRoutine.cpp ****         printString("\nsepc: ");
 923              		.loc 1 215 20 is_stmt 0
 924 0564 17050000 		lla	a0,.LC2
 924      13050500 
 925 056c 97000000 		call	_Z11printStringPKc@plt
 925      E7800000 
 926              	.LVL92:
 216:src/interruptRoutine.cpp ****         kPrintInt(sepc);
 927              		.loc 1 216 9 is_stmt 1
 216:src/interruptRoutine.cpp ****         kPrintInt(sepc);
 928              		.loc 1 216 18 is_stmt 0
 929 0574 033504FD 		ld	a0,-48(s0)
 930 0578 97000000 		call	_Z9kPrintIntm@plt
 930      E7800000 
 931              	.LVL93:
 932              	.L41:
 933              	.LBE7:
 934              	.LBE9:
 935              	.LBE12:
 936              		.loc 1 218 1
 937 0580 13000000 		nop
 938 0584 83308107 		ld	ra,120(sp)
 939              		.cfi_restore 1
 940 0588 03340107 		ld	s0,112(sp)
 941              		.cfi_restore 8
 942              		.cfi_def_cfa 2, 128
 943              	.LVL94:
 944 058c 83348106 		ld	s1,104(sp)
 945              		.cfi_restore 9
 946 0590 13010108 		addi	sp,sp,128
 947              		.cfi_def_cfa_offset 0
 948              	.LVL95:
 949 0594 67800000 		jr	ra
 950              		.cfi_endproc
 951              	.LFE54:
 953              		.section	.text._ZN5Riscv6mc_sipEm,"axG",@progbits,_ZN5Riscv6mc_sipEm,comdat
 954              		.align	2
 955              		.weak	_ZN5Riscv6mc_sipEm
 957              	_ZN5Riscv6mc_sipEm:
 958              	.LFB10:
 959              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccXWPiZd.s 			page 24


   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	static void returnFromInterrupt();
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp **** 	//read scause
  16:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp **** 	//write scause
  19:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp **** 	//read sepc
  22:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp **** 	//write sepc
  25:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp **** 	//read stvec
  28:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp **** 	//write stvec
  31:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  34:src/../h/Riscv.hpp **** 		//postoji zahtev za softverski prekid
  35:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),
  36:src/../h/Riscv.hpp **** 		//postoji prekid od tajmera
  37:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),
  38:src/../h/Riscv.hpp **** 		//postoji zahtev za spoljasnji hardverski prekid
  39:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)
  40:src/../h/Riscv.hpp **** 	};
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp **** 	//mask set sip
  43:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  44:src/../h/Riscv.hpp **** 
  45:src/../h/Riscv.hpp **** 	//mask clear sip
  46:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp **** 	//read sip
  49:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** 	//write sip
  52:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp **** 	//kada se pozove sret, SIE dobija vrednost SPIE, SPIE se postavlja na 1,
  55:src/../h/Riscv.hpp **** 	//rezim se postavlja na osnovu SPP bita, SPP se postavlja na 0
  56:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  57:src/../h/Riscv.hpp **** 		//1 - dozvoljeni prekidi; 0- nedozvoljeni prekidi; igonrise se u korisnickom rezimu
  58:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  59:src/../h/Riscv.hpp **** 		//prethodna vrednost bita SIE
  60:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  61:src/../h/Riscv.hpp **** 		//iz kog rezima se desio skok; 0 - iz korisnickog; 1 - iz sistemskog
  62:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  63:src/../h/Riscv.hpp **** 	};
  64:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccXWPiZd.s 			page 25


  65:src/../h/Riscv.hpp **** 	//mask set sstatus
  66:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp **** 	//mask clear sstatus
  69:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp **** 	//read sstatus
  72:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp **** 	//write sstatus
  75:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  78:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp **** };
  81:src/../h/Riscv.hpp **** 
  82:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  83:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  84:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  85:src/../h/Riscv.hpp **** 	return scause;
  86:src/../h/Riscv.hpp **** }
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  89:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  90:src/../h/Riscv.hpp **** }
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  93:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
  94:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
  95:src/../h/Riscv.hpp **** 	return sepc;
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
  99:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 100:src/../h/Riscv.hpp **** }
 101:src/../h/Riscv.hpp **** 
 102:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 103:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 104:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 105:src/../h/Riscv.hpp **** 	return stvec;
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 109:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 110:src/../h/Riscv.hpp **** }
 111:src/../h/Riscv.hpp **** 
 112:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 113:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 960              		.loc 2 116 40 is_stmt 1
 961              		.cfi_startproc
 962              	.LVL96:
 963 0000 130101FF 		addi	sp,sp,-16
 964              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccXWPiZd.s 			page 26


 965 0004 23348100 		sd	s0,8(sp)
 966              		.cfi_offset 8, -8
 967 0008 13040101 		addi	s0,sp,16
 968              		.cfi_def_cfa 8, 0
 117:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 969              		.loc 2 117 2
 970              		.loc 2 117 58 is_stmt 0
 971              	#APP
 972              	# 117 "src/../h/Riscv.hpp" 1
 118              	}
 973              		csrc sip, a0
 974              	# 0 "" 2
 975              		.loc 2 118 1
 976              	#NO_APP
 977 0010 03348100 		ld	s0,8(sp)
 978              		.cfi_restore 8
 979              		.cfi_def_cfa 2, 16
 980 0014 13010101 		addi	sp,sp,16
 981              		.cfi_def_cfa_offset 0
 982 0018 67800000 		jr	ra
 983              		.cfi_endproc
 984              	.LFE10:
 986              		.section	.text._ZN3TCB9setStatusENS_12ThreadStatusE,"axG",@progbits,_ZN3TCB9setStatusENS_12ThreadS
 987              		.align	2
 988              		.weak	_ZN3TCB9setStatusENS_12ThreadStatusE
 990              	_ZN3TCB9setStatusENS_12ThreadStatusE:
 991              	.LFB32:
 992              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 5/23/23.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJEKAT2023_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJEKAT2023_TCB_HPP
   7:src/../h/TCB.hpp **** 
   8:src/../h/TCB.hpp **** #include "../lib/hw.h"
   9:src/../h/TCB.hpp **** #include "../h/ThreadQueue.hpp"
  10:src/../h/TCB.hpp **** 
  11:src/../h/TCB.hpp **** class TCB {
  12:src/../h/TCB.hpp **** public:
  13:src/../h/TCB.hpp ****     friend class Scheduler;
  14:src/../h/TCB.hpp **** 
  15:src/../h/TCB.hpp ****     using Body = void (*)(void*);
  16:src/../h/TCB.hpp **** 
  17:src/../h/TCB.hpp ****     enum ThreadStatus {
  18:src/../h/TCB.hpp ****         CREATED, ACTIVE, BLOCKED, JOINING, SLEEPING, FINISHED
  19:src/../h/TCB.hpp ****     };
  20:src/../h/TCB.hpp **** 
  21:src/../h/TCB.hpp ****     void setStatus(ThreadStatus stat) { this->status = stat; }
 993              		.loc 3 21 10 is_stmt 1
 994              		.cfi_startproc
 995              	.LVL97:
 996 0000 130101FF 		addi	sp,sp,-16
 997              		.cfi_def_cfa_offset 16
 998 0004 23348100 		sd	s0,8(sp)
 999              		.cfi_offset 8, -8
 1000 0008 13040101 		addi	s0,sp,16
GAS LISTING /tmp/ccXWPiZd.s 			page 27


 1001              		.cfi_def_cfa 8, 0
 1002              		.loc 3 21 41
 1003              		.loc 3 21 54 is_stmt 0
 1004 000c 232CB504 		sw	a1,88(a0)
 1005              		.loc 3 21 62
 1006 0010 03348100 		ld	s0,8(sp)
 1007              		.cfi_restore 8
 1008              		.cfi_def_cfa 2, 16
 1009 0014 13010101 		addi	sp,sp,16
 1010              		.cfi_def_cfa_offset 0
 1011 0018 67800000 		jr	ra
 1012              		.cfi_endproc
 1013              	.LFE32:
 1015              		.section	.text._ZN3TCB12getTimeSliceEv,"axG",@progbits,_ZN3TCB12getTimeSliceEv,comdat
 1016              		.align	2
 1017              		.weak	_ZN3TCB12getTimeSliceEv
 1019              	_ZN3TCB12getTimeSliceEv:
 1020              	.LFB34:
  22:src/../h/TCB.hpp **** 
  23:src/../h/TCB.hpp ****     ThreadStatus getStatus() { return this->status; }
  24:src/../h/TCB.hpp **** 
  25:src/../h/TCB.hpp ****     static TCB* createThread(Body function, void* args, uint64* stack);
  26:src/../h/TCB.hpp **** 
  27:src/../h/TCB.hpp ****     static void start(TCB* newTcb);
  28:src/../h/TCB.hpp **** 
  29:src/../h/TCB.hpp ****     uint64 getTimeSlice() { return timeSlice; }
 1021              		.loc 3 29 12 is_stmt 1
 1022              		.cfi_startproc
 1023              	.LVL98:
 1024 0000 130101FF 		addi	sp,sp,-16
 1025              		.cfi_def_cfa_offset 16
 1026 0004 23348100 		sd	s0,8(sp)
 1027              		.cfi_offset 8, -8
 1028 0008 13040101 		addi	s0,sp,16
 1029              		.cfi_def_cfa 8, 0
 1030              		.loc 3 29 29
 1031              		.loc 3 29 47 is_stmt 0
 1032 000c 03358502 		ld	a0,40(a0)
 1033              	.LVL99:
 1034 0010 03348100 		ld	s0,8(sp)
 1035              		.cfi_restore 8
 1036              		.cfi_def_cfa 2, 16
 1037 0014 13010101 		addi	sp,sp,16
 1038              		.cfi_def_cfa_offset 0
 1039 0018 67800000 		jr	ra
 1040              		.cfi_endproc
 1041              	.LFE34:
 1043              		.section	.text._ZN3TCB10getRunningEv,"axG",@progbits,_ZN3TCB10getRunningEv,comdat
 1044              		.align	2
 1045              		.weak	_ZN3TCB10getRunningEv
 1047              	_ZN3TCB10getRunningEv:
 1048              	.LFB37:
  30:src/../h/TCB.hpp **** 
  31:src/../h/TCB.hpp ****     void setTimeSlice(uint64 value) { timeSlice = value; }
  32:src/../h/TCB.hpp **** 
  33:src/../h/TCB.hpp ****     Body getBody() { return threadFunction; }
  34:src/../h/TCB.hpp **** 
GAS LISTING /tmp/ccXWPiZd.s 			page 28


  35:src/../h/TCB.hpp ****     //static void threadSleep(time_t sleepTime);
  36:src/../h/TCB.hpp **** 
  37:src/../h/TCB.hpp ****     static TCB* getRunning() { return running; }
 1049              		.loc 3 37 17 is_stmt 1
 1050              		.cfi_startproc
 1051 0000 130101FF 		addi	sp,sp,-16
 1052              		.cfi_def_cfa_offset 16
 1053 0004 23348100 		sd	s0,8(sp)
 1054              		.cfi_offset 8, -8
 1055 0008 13040101 		addi	s0,sp,16
 1056              		.cfi_def_cfa 8, 0
 1057              		.loc 3 37 32
 1058              		.loc 3 37 48 is_stmt 0
 1059 000c 97070000 		la	a5,_ZN3TCB7runningE
 1059      83B70700 
 1060 0014 03B50700 		ld	a0,0(a5)
 1061 0018 03348100 		ld	s0,8(sp)
 1062              		.cfi_restore 8
 1063              		.cfi_def_cfa 2, 16
 1064 001c 13010101 		addi	sp,sp,16
 1065              		.cfi_def_cfa_offset 0
 1066 0020 67800000 		jr	ra
 1067              		.cfi_endproc
 1068              	.LFE37:
 1070              		.section	.text._ZN3TCB19getRunningTimeSliceEv,"axG",@progbits,_ZN3TCB19getRunningTimeSliceEv,comda
 1071              		.align	2
 1072              		.weak	_ZN3TCB19getRunningTimeSliceEv
 1074              	_ZN3TCB19getRunningTimeSliceEv:
 1075              	.LFB39:
  38:src/../h/TCB.hpp **** 
  39:src/../h/TCB.hpp ****     static void setRunning(TCB* newRunning) { running = newRunning; }
  40:src/../h/TCB.hpp **** 
  41:src/../h/TCB.hpp ****     static uint64 &getRunningTimeSlice() { return runningTimeSlice; }
 1076              		.loc 3 41 20 is_stmt 1
 1077              		.cfi_startproc
 1078 0000 130101FF 		addi	sp,sp,-16
 1079              		.cfi_def_cfa_offset 16
 1080 0004 23348100 		sd	s0,8(sp)
 1081              		.cfi_offset 8, -8
 1082 0008 13040101 		addi	s0,sp,16
 1083              		.cfi_def_cfa 8, 0
 1084              		.loc 3 41 44
 1085              		.loc 3 41 69 is_stmt 0
 1086 000c 17050000 		la	a0,_ZN3TCB16runningTimeSliceE
 1086      03350500 
 1087 0014 03348100 		ld	s0,8(sp)
 1088              		.cfi_restore 8
 1089              		.cfi_def_cfa 2, 16
 1090 0018 13010101 		addi	sp,sp,16
 1091              		.cfi_def_cfa_offset 0
 1092 001c 67800000 		jr	ra
 1093              		.cfi_endproc
 1094              	.LFE39:
 1096              		.text
 1097              	.Letext0:
 1098              		.file 4 "src/../lib/hw.h"
 1099              		.file 5 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/ccXWPiZd.s 			page 29


 1100              		.file 6 "src/../h/KSem.hpp"
 1101              		.file 7 "src/../h/../h/ThreadQueue.hpp"
 1102              		.file 8 "src/../h/Scheduler.hpp"
 1103              		.file 9 "src/../h/KConsole.hpp"
 1104              		.file 10 "src/../h/KMemory.hpp"
 1105              		.file 11 "src/../h/../test/printing.hpp"
 1106              		.file 12 "src/../h/helper.hpp"
GAS LISTING /tmp/ccXWPiZd.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 interruptRoutine.cpp
     /tmp/ccXWPiZd.s:29     .text:0000000000000000 interruptRoutine
     /tmp/ccXWPiZd.s:33     .text:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:34     .text:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:35     .text:0000000000000004 .L0 
     /tmp/ccXWPiZd.s:39     .text:0000000000000010 .L0 
     /tmp/ccXWPiZd.s:40     .text:0000000000000010 .L0 
     /tmp/ccXWPiZd.s:41     .text:0000000000000010 .L0 
     /tmp/ccXWPiZd.s:43     .text:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:45     .text:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:46     .text:0000000000000014 .L0 
src/interruptRoutine.cpp:24     .text:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:55     .text:000000000000001c .L0 
src/interruptRoutine.cpp:25     .text:000000000000001c .L0 
     /tmp/ccXWPiZd.s:65     .text:0000000000000024 .L0 
src/interruptRoutine.cpp:26     .text:0000000000000024 .L0 
     /tmp/ccXWPiZd.s:75     .text:000000000000002c .L0 
     /tmp/ccXWPiZd.s:76     .text:000000000000002c .L0 
src/interruptRoutine.cpp:30     .text:000000000000002c .L0 
     /tmp/ccXWPiZd.s:86     .text:0000000000000034 .L0 
src/interruptRoutine.cpp:31     .text:0000000000000034 .L0 
     /tmp/ccXWPiZd.s:96     .text:000000000000003c .L0 
src/interruptRoutine.cpp:32     .text:000000000000003c .L0 
     /tmp/ccXWPiZd.s:106    .text:0000000000000044 .L0 
src/interruptRoutine.cpp:33     .text:0000000000000044 .L0 
     /tmp/ccXWPiZd.s:116    .text:000000000000004c .L0 
src/interruptRoutine.cpp:34     .text:000000000000004c .L0 
     /tmp/ccXWPiZd.s:126    .text:0000000000000054 .L0 
src/interruptRoutine.cpp:35     .text:0000000000000054 .L0 
     /tmp/ccXWPiZd.s:136    .text:000000000000005c .L0 
src/interruptRoutine.cpp:36     .text:000000000000005c .L0 
     /tmp/ccXWPiZd.s:146    .text:0000000000000064 .L0 
src/interruptRoutine.cpp:37     .text:0000000000000064 .L0 
     /tmp/ccXWPiZd.s:157    .text:000000000000006c .L0 
     /tmp/ccXWPiZd.s:161    .text:0000000000000078 .L0 
     /tmp/ccXWPiZd.s:166    .text:0000000000000084 .L0 
     /tmp/ccXWPiZd.s:274    .text:0000000000000110 .L0 
     /tmp/ccXWPiZd.s:275    .text:0000000000000110 .L0 
     /tmp/ccXWPiZd.s:276    .text:0000000000000110 .L0 
     /tmp/ccXWPiZd.s:280    .text:000000000000011c .L0 
src/interruptRoutine.cpp:46     .text:000000000000011c .L0 
     /tmp/ccXWPiZd.s:287    .text:0000000000000120 .L0 
     /tmp/ccXWPiZd.s:291    .text:0000000000000124 .L0 
     /tmp/ccXWPiZd.s:292    .text:0000000000000124 .L0 
     /tmp/ccXWPiZd.s:293    .text:0000000000000124 .L0 
     /tmp/ccXWPiZd.s:298    .text:0000000000000134 .L0 
src/interruptRoutine.cpp:52     .text:0000000000000134 .L0 
     /tmp/ccXWPiZd.s:305    .text:0000000000000138 .L0 
     /tmp/ccXWPiZd.s:309    .text:000000000000013c .L0 
     /tmp/ccXWPiZd.s:310    .text:000000000000013c .L0 
     /tmp/ccXWPiZd.s:311    .text:000000000000013c .L0 
     /tmp/ccXWPiZd.s:315    .text:0000000000000148 .L0 
     /tmp/ccXWPiZd.s:317    .text:000000000000014c .L0 
     /tmp/ccXWPiZd.s:324    .text:0000000000000164 .L0 
     /tmp/ccXWPiZd.s:326    .text:0000000000000168 .L0 
     /tmp/ccXWPiZd.s:327    .text:0000000000000168 .L0 
GAS LISTING /tmp/ccXWPiZd.s 			page 31


     /tmp/ccXWPiZd.s:329    .text:000000000000016c .L0 
     /tmp/ccXWPiZd.s:331    .text:0000000000000170 .L0 
     /tmp/ccXWPiZd.s:332    .text:0000000000000170 .L0 
     /tmp/ccXWPiZd.s:339    .text:0000000000000184 .L0 
     /tmp/ccXWPiZd.s:340    .text:0000000000000184 .L0 
     /tmp/ccXWPiZd.s:343    .text:000000000000018c .L0 
     /tmp/ccXWPiZd.s:345    .text:0000000000000190 .L0 
src/interruptRoutine.cpp:65     .text:0000000000000190 .L0 
     /tmp/ccXWPiZd.s:354    .text:0000000000000198 .L0 
src/interruptRoutine.cpp:67     .text:0000000000000198 .L0 
     /tmp/ccXWPiZd.s:362    .text:000000000000019c .L0 
src/interruptRoutine.cpp:69     .text:000000000000019c .L0 
     /tmp/ccXWPiZd.s:369    .text:00000000000001a0 .L0 
     /tmp/ccXWPiZd.s:373    .text:00000000000001a4 .L0 
     /tmp/ccXWPiZd.s:374    .text:00000000000001a4 .L0 
     /tmp/ccXWPiZd.s:1047   .text._ZN3TCB10getRunningEv:0000000000000000 _ZN3TCB10getRunningEv
     /tmp/ccXWPiZd.s:375    .text:00000000000001a4 .L0 
     /tmp/ccXWPiZd.s:990    .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000000 _ZN3TCB9setStatusENS_12ThreadStatusE
     /tmp/ccXWPiZd.s:383    .text:00000000000001c0 .L0 
     /tmp/ccXWPiZd.s:384    .text:00000000000001c0 .L0 
     /tmp/ccXWPiZd.s:387    .text:00000000000001c8 .L0 
     /tmp/ccXWPiZd.s:388    .text:00000000000001c8 .L0 
     /tmp/ccXWPiZd.s:391    .text:00000000000001d0 .L0 
     /tmp/ccXWPiZd.s:395    .text:00000000000001d4 .L0 
     /tmp/ccXWPiZd.s:396    .text:00000000000001d4 .L0 
     /tmp/ccXWPiZd.s:397    .text:00000000000001d4 .L0 
     /tmp/ccXWPiZd.s:400    .text:00000000000001dc .L0 
     /tmp/ccXWPiZd.s:404    .text:00000000000001e0 .L0 
     /tmp/ccXWPiZd.s:405    .text:00000000000001e0 .L0 
     /tmp/ccXWPiZd.s:406    .text:00000000000001e0 .L0 
     /tmp/ccXWPiZd.s:411    .text:00000000000001f0 .L0 
     /tmp/ccXWPiZd.s:412    .text:00000000000001f0 .L0 
     /tmp/ccXWPiZd.s:415    .text:00000000000001f8 .L0 
     /tmp/ccXWPiZd.s:419    .text:00000000000001fc .L0 
     /tmp/ccXWPiZd.s:420    .text:00000000000001fc .L0 
     /tmp/ccXWPiZd.s:421    .text:00000000000001fc .L0 
     /tmp/ccXWPiZd.s:424    .text:0000000000000204 .L0 
     /tmp/ccXWPiZd.s:426    .text:0000000000000208 .L0 
     /tmp/ccXWPiZd.s:431    .text:0000000000000218 .L0 
     /tmp/ccXWPiZd.s:433    .text:000000000000021c .L0 
     /tmp/ccXWPiZd.s:434    .text:000000000000021c .L0 
     /tmp/ccXWPiZd.s:437    .text:0000000000000224 .L0 
     /tmp/ccXWPiZd.s:439    .text:0000000000000228 .L0 
src/interruptRoutine.cpp:93     .text:0000000000000228 .L0 
     /tmp/ccXWPiZd.s:448    .text:0000000000000230 .L0 
src/interruptRoutine.cpp:95     .text:0000000000000230 .L0 
     /tmp/ccXWPiZd.s:456    .text:0000000000000234 .L0 
src/interruptRoutine.cpp:97     .text:0000000000000234 .L0 
     /tmp/ccXWPiZd.s:463    .text:0000000000000238 .L0 
     /tmp/ccXWPiZd.s:467    .text:000000000000023c .L0 
     /tmp/ccXWPiZd.s:468    .text:000000000000023c .L0 
     /tmp/ccXWPiZd.s:469    .text:000000000000023c .L0 
     /tmp/ccXWPiZd.s:474    .text:000000000000024c .L0 
src/interruptRoutine.cpp:103    .text:000000000000024c .L0 
     /tmp/ccXWPiZd.s:481    .text:0000000000000250 .L0 
     /tmp/ccXWPiZd.s:485    .text:0000000000000254 .L0 
     /tmp/ccXWPiZd.s:486    .text:0000000000000254 .L0 
GAS LISTING /tmp/ccXWPiZd.s 			page 32


     /tmp/ccXWPiZd.s:487    .text:0000000000000254 .L0 
     /tmp/ccXWPiZd.s:492    .text:0000000000000264 .L0 
src/interruptRoutine.cpp:109    .text:0000000000000264 .L0 
     /tmp/ccXWPiZd.s:499    .text:0000000000000268 .L0 
     /tmp/ccXWPiZd.s:503    .text:000000000000026c .L0 
     /tmp/ccXWPiZd.s:504    .text:000000000000026c .L0 
     /tmp/ccXWPiZd.s:505    .text:000000000000026c .L0 
     /tmp/ccXWPiZd.s:510    .text:000000000000027c .L0 
src/interruptRoutine.cpp:115    .text:000000000000027c .L0 
     /tmp/ccXWPiZd.s:517    .text:0000000000000280 .L0 
     /tmp/ccXWPiZd.s:521    .text:0000000000000284 .L0 
     /tmp/ccXWPiZd.s:522    .text:0000000000000284 .L0 
     /tmp/ccXWPiZd.s:525    .text:000000000000028c .L0 
src/interruptRoutine.cpp:121    .text:000000000000028c .L0 
     /tmp/ccXWPiZd.s:534    .text:0000000000000294 .L0 
src/interruptRoutine.cpp:123    .text:0000000000000294 .L0 
     /tmp/ccXWPiZd.s:542    .text:0000000000000298 .L0 
src/interruptRoutine.cpp:125    .text:0000000000000298 .L0 
     /tmp/ccXWPiZd.s:549    .text:000000000000029c .L0 
     /tmp/ccXWPiZd.s:552    .text:00000000000002a4 .L0 
     /tmp/ccXWPiZd.s:553    .text:00000000000002a4 .L0 
     /tmp/ccXWPiZd.s:561    .text:00000000000002c0 .L0 
     /tmp/ccXWPiZd.s:562    .text:00000000000002c0 .L0 
     /tmp/ccXWPiZd.s:565    .text:00000000000002c8 .L0 
     /tmp/ccXWPiZd.s:569    .text:00000000000002cc .L0 
     /tmp/ccXWPiZd.s:570    .text:00000000000002cc .L0 
     /tmp/ccXWPiZd.s:571    .text:00000000000002cc .L0 
     /tmp/ccXWPiZd.s:574    .text:00000000000002d4 .L0 
src/interruptRoutine.cpp:134    .text:00000000000002d4 .L0 
     /tmp/ccXWPiZd.s:581    .text:00000000000002d8 .L0 
     /tmp/ccXWPiZd.s:585    .text:00000000000002dc .L0 
     /tmp/ccXWPiZd.s:586    .text:00000000000002dc .L0 
     /tmp/ccXWPiZd.s:587    .text:00000000000002dc .L0 
     /tmp/ccXWPiZd.s:593    .text:00000000000002f0 .L0 
     /tmp/ccXWPiZd.s:597    .text:00000000000002f4 .L0 
     /tmp/ccXWPiZd.s:598    .text:00000000000002f4 .L0 
     /tmp/ccXWPiZd.s:599    .text:00000000000002f4 .L0 
     /tmp/ccXWPiZd.s:603    .text:0000000000000300 .L0 
     /tmp/ccXWPiZd.s:605    .text:0000000000000304 .L0 
     /tmp/ccXWPiZd.s:612    .text:000000000000031c .L0 
     /tmp/ccXWPiZd.s:614    .text:0000000000000320 .L0 
     /tmp/ccXWPiZd.s:615    .text:0000000000000320 .L0 
     /tmp/ccXWPiZd.s:618    .text:0000000000000328 .L0 
     /tmp/ccXWPiZd.s:620    .text:000000000000032c .L0 
src/interruptRoutine.cpp:149    .text:000000000000032c .L0 
     /tmp/ccXWPiZd.s:629    .text:0000000000000334 .L0 
src/interruptRoutine.cpp:151    .text:0000000000000334 .L0 
     /tmp/ccXWPiZd.s:637    .text:0000000000000338 .L0 
src/interruptRoutine.cpp:153    .text:0000000000000338 .L0 
     /tmp/ccXWPiZd.s:644    .text:000000000000033c .L0 
     /tmp/ccXWPiZd.s:648    .text:0000000000000340 .L0 
     /tmp/ccXWPiZd.s:649    .text:0000000000000340 .L0 
     /tmp/ccXWPiZd.s:650    .text:0000000000000340 .L0 
     /tmp/ccXWPiZd.s:655    .text:0000000000000350 .L0 
     /tmp/ccXWPiZd.s:656    .text:0000000000000350 .L0 
     /tmp/ccXWPiZd.s:662    .text:0000000000000364 .L0 
     /tmp/ccXWPiZd.s:666    .text:0000000000000368 .L0 
GAS LISTING /tmp/ccXWPiZd.s 			page 33


     /tmp/ccXWPiZd.s:667    .text:0000000000000368 .L0 
     /tmp/ccXWPiZd.s:668    .text:0000000000000368 .L0 
     /tmp/ccXWPiZd.s:672    .text:0000000000000374 .L0 
     /tmp/ccXWPiZd.s:676    .text:0000000000000378 .L0 
     /tmp/ccXWPiZd.s:677    .text:0000000000000378 .L0 
     /tmp/ccXWPiZd.s:678    .text:0000000000000378 .L0 
     /tmp/ccXWPiZd.s:682    .text:0000000000000388 .L0 
     /tmp/ccXWPiZd.s:683    .text:0000000000000388 .L0 
     /tmp/ccXWPiZd.s:687    .text:0000000000000394 .L0 
     /tmp/ccXWPiZd.s:688    .text:0000000000000394 .L0 
     /tmp/ccXWPiZd.s:692    .text:00000000000003a4 .L0 
     /tmp/ccXWPiZd.s:693    .text:00000000000003a4 .L0 
     /tmp/ccXWPiZd.s:697    .text:00000000000003b0 .L0 
     /tmp/ccXWPiZd.s:698    .text:00000000000003b0 .L0 
     /tmp/ccXWPiZd.s:702    .text:00000000000003c0 .L0 
     /tmp/ccXWPiZd.s:703    .text:00000000000003c0 .L0 
     /tmp/ccXWPiZd.s:707    .text:00000000000003cc .L0 
     /tmp/ccXWPiZd.s:710    .text:00000000000003d0 .L0 
     /tmp/ccXWPiZd.s:713    .text:00000000000003d4 .L0 
     /tmp/ccXWPiZd.s:714    .text:00000000000003d4 .L0 
     /tmp/ccXWPiZd.s:719    .text:00000000000003e0 .L0 
     /tmp/ccXWPiZd.s:720    .text:00000000000003e0 .L0 
     /tmp/ccXWPiZd.s:726    .text:00000000000003e8 .L0 
     /tmp/ccXWPiZd.s:728    .text:00000000000003e8 .L0 
     /tmp/ccXWPiZd.s:737    .text:00000000000003f0 .L0 
     /tmp/ccXWPiZd.s:744    .text:00000000000003f4 .L0 
     /tmp/ccXWPiZd.s:752    .text:0000000000000408 .L0 
     /tmp/ccXWPiZd.s:753    .text:0000000000000408 .L0 
     /tmp/ccXWPiZd.s:757    .text:0000000000000414 .L0 
     /tmp/ccXWPiZd.s:760    .text:0000000000000418 .L0 
     /tmp/ccXWPiZd.s:764    .text:0000000000000424 .L0 
     /tmp/ccXWPiZd.s:765    .text:0000000000000424 .L0 
     /tmp/ccXWPiZd.s:769    .text:0000000000000434 .L0 
     /tmp/ccXWPiZd.s:771    .text:0000000000000438 .L0 
     /tmp/ccXWPiZd.s:773    .text:000000000000043c .L0 
     /tmp/ccXWPiZd.s:774    .text:000000000000043c .L0 
     /tmp/ccXWPiZd.s:785    .text:000000000000045c .L0 
     /tmp/ccXWPiZd.s:786    .text:000000000000045c .L0 
     /tmp/ccXWPiZd.s:792    .text:000000000000046c .L0 
     /tmp/ccXWPiZd.s:793    .text:000000000000046c .L0 
     /tmp/ccXWPiZd.s:799    .text:0000000000000480 .L0 
     /tmp/ccXWPiZd.s:800    .text:0000000000000480 .L0 
     /tmp/ccXWPiZd.s:806    .text:0000000000000488 .L0 
     /tmp/ccXWPiZd.s:808    .text:0000000000000488 .L0 
     /tmp/ccXWPiZd.s:814    .text:0000000000000490 .L0 
     /tmp/ccXWPiZd.s:816    .text:0000000000000490 .L0 
     /tmp/ccXWPiZd.s:957    .text._ZN5Riscv6mc_sipEm:0000000000000000 _ZN5Riscv6mc_sipEm
     /tmp/ccXWPiZd.s:824    .text:000000000000049c .L0 
     /tmp/ccXWPiZd.s:831    .text:00000000000004a0 .L0 
     /tmp/ccXWPiZd.s:837    .text:00000000000004b4 .L0 
     /tmp/ccXWPiZd.s:838    .text:00000000000004b4 .L0 
     /tmp/ccXWPiZd.s:841    .text:00000000000004bc .L0 
     /tmp/ccXWPiZd.s:1074   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000000 _ZN3TCB19getRunningTimeSliceEv
     /tmp/ccXWPiZd.s:842    .text:00000000000004bc .L0 
     /tmp/ccXWPiZd.s:846    .text:00000000000004c8 .L0 
     /tmp/ccXWPiZd.s:848    .text:00000000000004cc .L0 
     /tmp/ccXWPiZd.s:851    .text:00000000000004d4 .L0 
GAS LISTING /tmp/ccXWPiZd.s 			page 34


     /tmp/ccXWPiZd.s:852    .text:00000000000004d4 .L0 
     /tmp/ccXWPiZd.s:856    .text:00000000000004e0 .L0 
     /tmp/ccXWPiZd.s:858    .text:00000000000004e4 .L0 
     /tmp/ccXWPiZd.s:1019   .text._ZN3TCB12getTimeSliceEv:0000000000000000 _ZN3TCB12getTimeSliceEv
     /tmp/ccXWPiZd.s:866    .text:0000000000000500 .L0 
     /tmp/ccXWPiZd.s:870    .text:000000000000050c .L0 
     /tmp/ccXWPiZd.s:872    .text:0000000000000510 .L0 
     /tmp/ccXWPiZd.s:873    .text:0000000000000510 .L0 
     /tmp/ccXWPiZd.s:877    .text:0000000000000518 .L0 
     /tmp/ccXWPiZd.s:878    .text:0000000000000518 .L0 
     /tmp/ccXWPiZd.s:884    .text:0000000000000520 .L0 
     /tmp/ccXWPiZd.s:886    .text:0000000000000520 .L0 
     /tmp/ccXWPiZd.s:892    .text:0000000000000528 .L0 
     /tmp/ccXWPiZd.s:894    .text:0000000000000528 .L0 
     /tmp/ccXWPiZd.s:901    .text:0000000000000534 .L0 
     /tmp/ccXWPiZd.s:908    .text:0000000000000538 .L0 
     /tmp/ccXWPiZd.s:909    .text:0000000000000538 .L0 
     /tmp/ccXWPiZd.s:913    .text:0000000000000548 .L0 
     /tmp/ccXWPiZd.s:914    .text:0000000000000548 .L0 
     /tmp/ccXWPiZd.s:918    .text:0000000000000558 .L0 
     /tmp/ccXWPiZd.s:919    .text:0000000000000558 .L0 
     /tmp/ccXWPiZd.s:923    .text:0000000000000564 .L0 
     /tmp/ccXWPiZd.s:924    .text:0000000000000564 .L0 
     /tmp/ccXWPiZd.s:928    .text:0000000000000574 .L0 
     /tmp/ccXWPiZd.s:929    .text:0000000000000574 .L0 
     /tmp/ccXWPiZd.s:937    .text:0000000000000580 .L0 
     /tmp/ccXWPiZd.s:939    .text:0000000000000588 .L0 
     /tmp/ccXWPiZd.s:941    .text:000000000000058c .L0 
     /tmp/ccXWPiZd.s:942    .text:000000000000058c .L0 
     /tmp/ccXWPiZd.s:945    .text:0000000000000590 .L0 
     /tmp/ccXWPiZd.s:947    .text:0000000000000594 .L0 
     /tmp/ccXWPiZd.s:950    .text:0000000000000598 .L0 
     /tmp/ccXWPiZd.s:961    .text._ZN5Riscv6mc_sipEm:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:963    .text._ZN5Riscv6mc_sipEm:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:964    .text._ZN5Riscv6mc_sipEm:0000000000000004 .L0 
     /tmp/ccXWPiZd.s:966    .text._ZN5Riscv6mc_sipEm:0000000000000008 .L0 
     /tmp/ccXWPiZd.s:968    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
     /tmp/ccXWPiZd.s:970    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
  src/../h/Riscv.hpp:117    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
     /tmp/ccXWPiZd.s:977    .text._ZN5Riscv6mc_sipEm:0000000000000010 .L0 
     /tmp/ccXWPiZd.s:978    .text._ZN5Riscv6mc_sipEm:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:979    .text._ZN5Riscv6mc_sipEm:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:981    .text._ZN5Riscv6mc_sipEm:0000000000000018 .L0 
     /tmp/ccXWPiZd.s:983    .text._ZN5Riscv6mc_sipEm:000000000000001c .L0 
     /tmp/ccXWPiZd.s:994    .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:996    .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:997    .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000004 .L0 
     /tmp/ccXWPiZd.s:999    .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000008 .L0 
     /tmp/ccXWPiZd.s:1001   .text._ZN3TCB9setStatusENS_12ThreadStatusE:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1003   .text._ZN3TCB9setStatusENS_12ThreadStatusE:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1004   .text._ZN3TCB9setStatusENS_12ThreadStatusE:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1006   .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000010 .L0 
     /tmp/ccXWPiZd.s:1007   .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:1008   .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:1010   .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000018 .L0 
     /tmp/ccXWPiZd.s:1012   .text._ZN3TCB9setStatusENS_12ThreadStatusE:000000000000001c .L0 
     /tmp/ccXWPiZd.s:1022   .text._ZN3TCB12getTimeSliceEv:0000000000000000 .L0 
GAS LISTING /tmp/ccXWPiZd.s 			page 35


     /tmp/ccXWPiZd.s:1024   .text._ZN3TCB12getTimeSliceEv:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:1025   .text._ZN3TCB12getTimeSliceEv:0000000000000004 .L0 
     /tmp/ccXWPiZd.s:1027   .text._ZN3TCB12getTimeSliceEv:0000000000000008 .L0 
     /tmp/ccXWPiZd.s:1029   .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1031   .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1032   .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1035   .text._ZN3TCB12getTimeSliceEv:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:1036   .text._ZN3TCB12getTimeSliceEv:0000000000000014 .L0 
     /tmp/ccXWPiZd.s:1038   .text._ZN3TCB12getTimeSliceEv:0000000000000018 .L0 
     /tmp/ccXWPiZd.s:1040   .text._ZN3TCB12getTimeSliceEv:000000000000001c .L0 
     /tmp/ccXWPiZd.s:1050   .text._ZN3TCB10getRunningEv:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:1051   .text._ZN3TCB10getRunningEv:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:1052   .text._ZN3TCB10getRunningEv:0000000000000004 .L0 
     /tmp/ccXWPiZd.s:1054   .text._ZN3TCB10getRunningEv:0000000000000008 .L0 
     /tmp/ccXWPiZd.s:1056   .text._ZN3TCB10getRunningEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1058   .text._ZN3TCB10getRunningEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1059   .text._ZN3TCB10getRunningEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1062   .text._ZN3TCB10getRunningEv:000000000000001c .L0 
     /tmp/ccXWPiZd.s:1063   .text._ZN3TCB10getRunningEv:000000000000001c .L0 
     /tmp/ccXWPiZd.s:1065   .text._ZN3TCB10getRunningEv:0000000000000020 .L0 
     /tmp/ccXWPiZd.s:1067   .text._ZN3TCB10getRunningEv:0000000000000024 .L0 
     /tmp/ccXWPiZd.s:1077   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:1078   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000000 .L0 
     /tmp/ccXWPiZd.s:1079   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000004 .L0 
     /tmp/ccXWPiZd.s:1081   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000008 .L0 
     /tmp/ccXWPiZd.s:1083   .text._ZN3TCB19getRunningTimeSliceEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1085   .text._ZN3TCB19getRunningTimeSliceEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1086   .text._ZN3TCB19getRunningTimeSliceEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1088   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000018 .L0 
     /tmp/ccXWPiZd.s:1089   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000018 .L0 
     /tmp/ccXWPiZd.s:1091   .text._ZN3TCB19getRunningTimeSliceEv:000000000000001c .L0 
     /tmp/ccXWPiZd.s:1093   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000020 .L0 
     /tmp/ccXWPiZd.s:1107   .text:0000000000000598 .L0 
     /tmp/ccXWPiZd.s:986    .text._ZN5Riscv6mc_sipEm:000000000000001c .L0 
     /tmp/ccXWPiZd.s:1015   .text._ZN3TCB9setStatusENS_12ThreadStatusE:000000000000001c .L0 
     /tmp/ccXWPiZd.s:1043   .text._ZN3TCB12getTimeSliceEv:000000000000001c .L0 
     /tmp/ccXWPiZd.s:1070   .text._ZN3TCB10getRunningEv:0000000000000024 .L0 
     /tmp/ccXWPiZd.s:1096   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000020 .L0 
     /tmp/ccXWPiZd.s:198    .rodata:0000000000000074 .L9
     /tmp/ccXWPiZd.s:188    .text:00000000000000dc .L0 
     /tmp/ccXWPiZd.s:192    .text:00000000000000f0 .L0 
     /tmp/ccXWPiZd.s:8      .rodata:0000000000000000 .LC0
     /tmp/ccXWPiZd.s:678    .text:0000000000000378 .L0 
     /tmp/ccXWPiZd.s:11     .rodata:0000000000000018 .LC1
     /tmp/ccXWPiZd.s:688    .text:0000000000000394 .L0 
     /tmp/ccXWPiZd.s:14     .rodata:0000000000000028 .LC2
     /tmp/ccXWPiZd.s:698    .text:00000000000003b0 .L0 
     /tmp/ccXWPiZd.s:765    .text:0000000000000424 .L0 
     /tmp/ccXWPiZd.s:774    .text:000000000000043c .L0 
     /tmp/ccXWPiZd.s:17     .rodata:0000000000000030 .LC3
     /tmp/ccXWPiZd.s:786    .text:000000000000045c .L0 
     /tmp/ccXWPiZd.s:20     .rodata:0000000000000048 .LC4
     /tmp/ccXWPiZd.s:909    .text:0000000000000538 .L0 
     /tmp/ccXWPiZd.s:23     .rodata:0000000000000068 .LC5
     /tmp/ccXWPiZd.s:914    .text:0000000000000548 .L0 
     /tmp/ccXWPiZd.s:924    .text:0000000000000564 .L0 
     /tmp/ccXWPiZd.s:164    .text:0000000000000084 .L2
GAS LISTING /tmp/ccXWPiZd.s 			page 36


     /tmp/ccXWPiZd.s:739    .text:00000000000003f4 .L3
     /tmp/ccXWPiZd.s:664    .text:0000000000000368 .L4
     /tmp/ccXWPiZd.s:674    .text:0000000000000378 .L5
     /tmp/ccXWPiZd.s:646    .text:0000000000000340 .L6
     /tmp/ccXWPiZd.s:267    .text:0000000000000100 .L7
     /tmp/ccXWPiZd.s:595    .text:00000000000002f4 .L22
     /tmp/ccXWPiZd.s:711    .text:00000000000003d4 .L23
     /tmp/ccXWPiZd.s:337    .text:0000000000000184 .L24
     /tmp/ccXWPiZd.s:352    .text:0000000000000198 .L25
     /tmp/ccXWPiZd.s:360    .text:000000000000019c .L26
     /tmp/ccXWPiZd.s:446    .text:0000000000000230 .L27
     /tmp/ccXWPiZd.s:454    .text:0000000000000234 .L28
     /tmp/ccXWPiZd.s:532    .text:0000000000000294 .L29
     /tmp/ccXWPiZd.s:540    .text:0000000000000298 .L30
     /tmp/ccXWPiZd.s:708    .text:00000000000003d0 .L40
     /tmp/ccXWPiZd.s:627    .text:0000000000000334 .L32
     /tmp/ccXWPiZd.s:635    .text:0000000000000338 .L33
     /tmp/ccXWPiZd.s:932    .text:0000000000000580 .L41
     /tmp/ccXWPiZd.s:826    .text:00000000000004a0 .L35
     /tmp/ccXWPiZd.s:783    .text:000000000000045c .L36
     /tmp/ccXWPiZd.s:790    .text:000000000000046c .L37
     /tmp/ccXWPiZd.s:903    .text:0000000000000538 .L38
     /tmp/ccXWPiZd.s:875    .text:0000000000000518 .L39
     /tmp/ccXWPiZd.s:272    .text:0000000000000110 .L21
     /tmp/ccXWPiZd.s:289    .text:0000000000000124 .L20
     /tmp/ccXWPiZd.s:307    .text:000000000000013c .L19
     /tmp/ccXWPiZd.s:371    .text:00000000000001a4 .L18
     /tmp/ccXWPiZd.s:393    .text:00000000000001d4 .L17
     /tmp/ccXWPiZd.s:402    .text:00000000000001e0 .L16
     /tmp/ccXWPiZd.s:417    .text:00000000000001fc .L15
     /tmp/ccXWPiZd.s:465    .text:000000000000023c .L14
     /tmp/ccXWPiZd.s:483    .text:0000000000000254 .L13
     /tmp/ccXWPiZd.s:501    .text:000000000000026c .L12
     /tmp/ccXWPiZd.s:519    .text:0000000000000284 .L11
     /tmp/ccXWPiZd.s:567    .text:00000000000002cc .L10
     /tmp/ccXWPiZd.s:583    .text:00000000000002dc .L8
     /tmp/ccXWPiZd.s:1059   .text._ZN3TCB10getRunningEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:1086   .text._ZN3TCB19getRunningTimeSliceEv:000000000000000c .L0 
     /tmp/ccXWPiZd.s:3206   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccXWPiZd.s:5175   .debug_str:0000000000000a72 .LASF221
     /tmp/ccXWPiZd.s:5063   .debug_str:0000000000000750 .LASF222
     /tmp/ccXWPiZd.s:5125   .debug_str:000000000000091e .LASF223
     /tmp/ccXWPiZd.s:4793   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccXWPiZd.s:4809   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccXWPiZd.s:5095   .debug_str:000000000000082a .LASF3
     /tmp/ccXWPiZd.s:4965   .debug_str:0000000000000486 .LASF0
     /tmp/ccXWPiZd.s:4991   .debug_str:000000000000052e .LASF1
     /tmp/ccXWPiZd.s:5105   .debug_str:0000000000000881 .LASF2
     /tmp/ccXWPiZd.s:4909   .debug_str:00000000000002de .LASF4
     /tmp/ccXWPiZd.s:5117   .debug_str:00000000000008e7 .LASF5
     /tmp/ccXWPiZd.s:4977   .debug_str:00000000000004c3 .LASF6
     /tmp/ccXWPiZd.s:4825   .debug_str:000000000000006a .LASF7
     /tmp/ccXWPiZd.s:5071   .debug_str:000000000000078e .LASF8
     /tmp/ccXWPiZd.s:5061   .debug_str:000000000000073d .LASF9
     /tmp/ccXWPiZd.s:4981   .debug_str:00000000000004e7 .LASF10
     /tmp/ccXWPiZd.s:4933   .debug_str:0000000000000380 .LASF11
     /tmp/ccXWPiZd.s:4947   .debug_str:00000000000003e2 .LASF12
GAS LISTING /tmp/ccXWPiZd.s 			page 37


     /tmp/ccXWPiZd.s:4853   .debug_str:0000000000000124 .LASF13
     /tmp/ccXWPiZd.s:4919   .debug_str:000000000000032e .LASF14
     /tmp/ccXWPiZd.s:4869   .debug_str:000000000000018a .LASF15
     /tmp/ccXWPiZd.s:4851   .debug_str:0000000000000114 .LASF16
     /tmp/ccXWPiZd.s:5149   .debug_str:00000000000009c4 .LASF17
     /tmp/ccXWPiZd.s:4903   .debug_str:0000000000000295 .LASF18
     /tmp/ccXWPiZd.s:5135   .debug_str:0000000000000975 .LASF19
     /tmp/ccXWPiZd.s:5009   .debug_str:000000000000059f .LASF20
     /tmp/ccXWPiZd.s:5227   .debug_str:0000000000000c70 .LASF53
     /tmp/ccXWPiZd.s:5091   .debug_str:0000000000000813 .LASF54
     /tmp/ccXWPiZd.s:4997   .debug_str:0000000000000554 .LASF21
     /tmp/ccXWPiZd.s:4831   .debug_str:000000000000008f .LASF22
     /tmp/ccXWPiZd.s:5239   .debug_str:0000000000000cbf .LASF23
     /tmp/ccXWPiZd.s:4955   .debug_str:0000000000000433 .LASF84
     /tmp/ccXWPiZd.s:4961   .debug_str:0000000000000468 .LASF86
     /tmp/ccXWPiZd.s:5203   .debug_str:0000000000000bfa .LASF24
     /tmp/ccXWPiZd.s:5193   .debug_str:0000000000000b99 .LASF26
     /tmp/ccXWPiZd.s:5101   .debug_str:000000000000086d .LASF28
     /tmp/ccXWPiZd.s:5047   .debug_str:00000000000006c7 .LASF30
     /tmp/ccXWPiZd.s:5079   .debug_str:00000000000007af .LASF25
     /tmp/ccXWPiZd.s:5087   .debug_str:00000000000007e8 .LASF27
     /tmp/ccXWPiZd.s:5035   .debug_str:000000000000066b .LASF29
     /tmp/ccXWPiZd.s:4983   .debug_str:00000000000004fa .LASF31
     /tmp/ccXWPiZd.s:5237   .debug_str:0000000000000cb7 .LASF32
     /tmp/ccXWPiZd.s:5179   .debug_str:0000000000000b3b .LASF33
     /tmp/ccXWPiZd.s:5029   .debug_str:0000000000000648 .LASF34
     /tmp/ccXWPiZd.s:5045   .debug_str:00000000000006b3 .LASF35
     /tmp/ccXWPiZd.s:5145   .debug_str:00000000000009b0 .LASF36
     /tmp/ccXWPiZd.s:5119   .debug_str:00000000000008ee .LASF37
     /tmp/ccXWPiZd.s:5121   .debug_str:0000000000000901 .LASF38
     /tmp/ccXWPiZd.s:4859   .debug_str:0000000000000142 .LASF39
     /tmp/ccXWPiZd.s:4899   .debug_str:0000000000000282 .LASF40
     /tmp/ccXWPiZd.s:4959   .debug_str:0000000000000456 .LASF41
     /tmp/ccXWPiZd.s:4971   .debug_str:00000000000004a7 .LASF42
     /tmp/ccXWPiZd.s:4885   .debug_str:0000000000000229 .LASF43
     /tmp/ccXWPiZd.s:4827   .debug_str:0000000000000071 .LASF44
     /tmp/ccXWPiZd.s:5109   .debug_str:0000000000000899 .LASF45
     /tmp/ccXWPiZd.s:5103   .debug_str:0000000000000876 .LASF46
     /tmp/ccXWPiZd.s:5261   .debug_str:0000000000000d82 .LASF47
     /tmp/ccXWPiZd.s:5229   .debug_str:0000000000000c76 .LASF48
     /tmp/ccXWPiZd.s:5241   .debug_str:0000000000000cc8 .LASF49
     /tmp/ccXWPiZd.s:5223   .debug_str:0000000000000c50 .LASF50
     /tmp/ccXWPiZd.s:5017   .debug_str:00000000000005cf .LASF51
     /tmp/ccXWPiZd.s:5185   .debug_str:0000000000000b69 .LASF153
     /tmp/ccXWPiZd.s:4875   .debug_str:00000000000001ca .LASF154
     /tmp/ccXWPiZd.s:5221   .debug_str:0000000000000c47 .LASF52
     /tmp/ccXWPiZd.s:5131   .debug_str:0000000000000952 .LASF55
     /tmp/ccXWPiZd.s:5077   .debug_str:00000000000007a7 .LASF56
     /tmp/ccXWPiZd.s:4883   .debug_str:0000000000000222 .LASF57
     /tmp/ccXWPiZd.s:4811   .debug_str:0000000000000000 .LASF58
     /tmp/ccXWPiZd.s:4939   .debug_str:00000000000003a1 .LASF59
     /tmp/ccXWPiZd.s:4987   .debug_str:000000000000051d .LASF60
     /tmp/ccXWPiZd.s:4845   .debug_str:00000000000000eb .LASF61
     /tmp/ccXWPiZd.s:5157   .debug_str:00000000000009f9 .LASF131
     /tmp/ccXWPiZd.s:4857   .debug_str:0000000000000138 .LASF62
     /tmp/ccXWPiZd.s:4949   .debug_str:00000000000003f0 .LASF64
     /tmp/ccXWPiZd.s:4969   .debug_str:000000000000049d .LASF68
GAS LISTING /tmp/ccXWPiZd.s 			page 38


     /tmp/ccXWPiZd.s:5005   .debug_str:0000000000000580 .LASF70
     /tmp/ccXWPiZd.s:5147   .debug_str:00000000000009b7 .LASF63
     /tmp/ccXWPiZd.s:5235   .debug_str:0000000000000c95 .LASF65
     /tmp/ccXWPiZd.s:5053   .debug_str:0000000000000706 .LASF224
     /tmp/ccXWPiZd.s:5251   .debug_str:0000000000000d34 .LASF66
     /tmp/ccXWPiZd.s:4979   .debug_str:00000000000004d5 .LASF67
     /tmp/ccXWPiZd.s:5015   .debug_str:00000000000005c2 .LASF69
     /tmp/ccXWPiZd.s:5089   .debug_str:00000000000007fb .LASF71
     /tmp/ccXWPiZd.s:4889   .debug_str:0000000000000244 .LASF72
     /tmp/ccXWPiZd.s:5113   .debug_str:00000000000008c1 .LASF73
     /tmp/ccXWPiZd.s:5083   .debug_str:00000000000007d6 .LASF74
     /tmp/ccXWPiZd.s:5011   .debug_str:00000000000005a4 .LASF75
     /tmp/ccXWPiZd.s:4937   .debug_str:0000000000000396 .LASF76
     /tmp/ccXWPiZd.s:5133   .debug_str:000000000000095f .LASF77
     /tmp/ccXWPiZd.s:4815   .debug_str:0000000000000011 .LASF78
     /tmp/ccXWPiZd.s:5165   .debug_str:0000000000000a20 .LASF79
     /tmp/ccXWPiZd.s:5201   .debug_str:0000000000000be6 .LASF80
     /tmp/ccXWPiZd.s:5049   .debug_str:00000000000006dc .LASF81
     /tmp/ccXWPiZd.s:5199   .debug_str:0000000000000bdb .LASF82
     /tmp/ccXWPiZd.s:4921   .debug_str:000000000000033d .LASF83
     /tmp/ccXWPiZd.s:5265   .debug_str:0000000000000da7 .LASF85
     /tmp/ccXWPiZd.s:4917   .debug_str:0000000000000315 .LASF87
     /tmp/ccXWPiZd.s:4891   .debug_str:0000000000000251 .LASF88
     /tmp/ccXWPiZd.s:4861   .debug_str:0000000000000155 .LASF89
     /tmp/ccXWPiZd.s:5213   .debug_str:0000000000000c2e .LASF90
     /tmp/ccXWPiZd.s:4833   .debug_str:0000000000000098 .LASF91
     /tmp/ccXWPiZd.s:5263   .debug_str:0000000000000d9a .LASF92
     /tmp/ccXWPiZd.s:4943   .debug_str:00000000000003c1 .LASF93
     /tmp/ccXWPiZd.s:4817   .debug_str:000000000000001c .LASF94
     /tmp/ccXWPiZd.s:5043   .debug_str:00000000000006a6 .LASF95
     /tmp/ccXWPiZd.s:5191   .debug_str:0000000000000b91 .LASF96
     /tmp/ccXWPiZd.s:4849   .debug_str:0000000000000105 .LASF97
     /tmp/ccXWPiZd.s:5257   .debug_str:0000000000000d5b .LASF98
     /tmp/ccXWPiZd.s:5205   .debug_str:0000000000000c03 .LASF99
     /tmp/ccXWPiZd.s:5181   .debug_str:0000000000000b4f .LASF100
     /tmp/ccXWPiZd.s:5173   .debug_str:0000000000000a62 .LASF101
     /tmp/ccXWPiZd.s:5057   .debug_str:0000000000000713 .LASF102
     /tmp/ccXWPiZd.s:4915   .debug_str:0000000000000308 .LASF103
     /tmp/ccXWPiZd.s:5115   .debug_str:00000000000008d9 .LASF104
     /tmp/ccXWPiZd.s:5217   .debug_str:0000000000000c3b .LASF105
     /tmp/ccXWPiZd.s:5249   .debug_str:0000000000000d1e .LASF161
     /tmp/ccXWPiZd.s:5171   .debug_str:0000000000000a5a .LASF106
     /tmp/ccXWPiZd.s:4847   .debug_str:00000000000000f4 .LASF107
     /tmp/ccXWPiZd.s:4877   .debug_str:00000000000001e2 .LASF137
     /tmp/ccXWPiZd.s:4821   .debug_str:0000000000000034 .LASF138
     /tmp/ccXWPiZd.s:4935   .debug_str:0000000000000390 .LASF108
     /tmp/ccXWPiZd.s:5137   .debug_str:000000000000098b .LASF109
     /tmp/ccXWPiZd.s:4989   .debug_str:0000000000000526 .LASF110
     /tmp/ccXWPiZd.s:5041   .debug_str:0000000000000693 .LASF111
     /tmp/ccXWPiZd.s:4893   .debug_str:000000000000025a .LASF112
     /tmp/ccXWPiZd.s:5111   .debug_str:00000000000008b1 .LASF113
     /tmp/ccXWPiZd.s:5153   .debug_str:00000000000009dd .LASF114
     /tmp/ccXWPiZd.s:4841   .debug_str:00000000000000d0 .LASF115
     /tmp/ccXWPiZd.s:4887   .debug_str:000000000000023b .LASF116
     /tmp/ccXWPiZd.s:5033   .debug_str:0000000000000655 .LASF117
     /tmp/ccXWPiZd.s:4901   .debug_str:0000000000000288 .LASF118
     /tmp/ccXWPiZd.s:4823   .debug_str:000000000000005c .LASF119
GAS LISTING /tmp/ccXWPiZd.s 			page 39


     /tmp/ccXWPiZd.s:4963   .debug_str:0000000000000480 .LASF120
     /tmp/ccXWPiZd.s:5167   .debug_str:0000000000000a38 .LASF121
     /tmp/ccXWPiZd.s:4819   .debug_str:000000000000002c .LASF122
     /tmp/ccXWPiZd.s:4829   .debug_str:000000000000007c .LASF123
     /tmp/ccXWPiZd.s:5231   .debug_str:0000000000000c80 .LASF124
     /tmp/ccXWPiZd.s:5197   .debug_str:0000000000000bcb .LASF125
     /tmp/ccXWPiZd.s:5107   .debug_str:000000000000088f .LASF126
     /tmp/ccXWPiZd.s:4985   .debug_str:000000000000050d .LASF127
     /tmp/ccXWPiZd.s:5073   .debug_str:0000000000000795 .LASF128
     /tmp/ccXWPiZd.s:5211   .debug_str:0000000000000c26 .LASF129
     /tmp/ccXWPiZd.s:5037   .debug_str:0000000000000672 .LASF130
     /tmp/ccXWPiZd.s:5219   .debug_str:0000000000000c42 .LASF132
     /tmp/ccXWPiZd.s:5187   .debug_str:0000000000000b74 .LASF133
     /tmp/ccXWPiZd.s:4855   .debug_str:0000000000000133 .LASF134
     /tmp/ccXWPiZd.s:4907   .debug_str:00000000000002c0 .LASF135
     /tmp/ccXWPiZd.s:4879   .debug_str:00000000000001f0 .LASF136
     /tmp/ccXWPiZd.s:4871   .debug_str:000000000000019a .LASF139
     /tmp/ccXWPiZd.s:4837   .debug_str:00000000000000bf .LASF140
     /tmp/ccXWPiZd.s:5023   .debug_str:000000000000060f .LASF141
     /tmp/ccXWPiZd.s:4835   .debug_str:00000000000000aa .LASF142
     /tmp/ccXWPiZd.s:4941   .debug_str:00000000000003a9 .LASF143
     /tmp/ccXWPiZd.s:5189   .debug_str:0000000000000b79 .LASF225
     /tmp/ccXWPiZd.s:5159   .debug_str:0000000000000a01 .LASF144
     /tmp/ccXWPiZd.s:4999   .debug_str:000000000000055d .LASF145
     /tmp/ccXWPiZd.s:4973   .debug_str:00000000000004ad .LASF146
     /tmp/ccXWPiZd.s:4911   .debug_str:00000000000002e4 .LASF147
     /tmp/ccXWPiZd.s:4995   .debug_str:000000000000054c .LASF148
     /tmp/ccXWPiZd.s:5025   .debug_str:0000000000000614 .LASF149
     /tmp/ccXWPiZd.s:4843   .debug_str:00000000000000e2 .LASF150
     /tmp/ccXWPiZd.s:5019   .debug_str:00000000000005e5 .LASF151
     /tmp/ccXWPiZd.s:4873   .debug_str:00000000000001b5 .LASF152
     /tmp/ccXWPiZd.s:5225   .debug_str:0000000000000c5a .LASF155
     /tmp/ccXWPiZd.s:4931   .debug_str:0000000000000376 .LASF156
     /tmp/ccXWPiZd.s:5143   .debug_str:00000000000009ab .LASF157
     /tmp/ccXWPiZd.s:5031   .debug_str:0000000000000650 .LASF158
     /tmp/ccXWPiZd.s:5255   .debug_str:0000000000000d4e .LASF159
     /tmp/ccXWPiZd.s:5247   .debug_str:0000000000000d0c .LASF160
     /tmp/ccXWPiZd.s:4957   .debug_str:000000000000043e .LASF162
     /tmp/ccXWPiZd.s:5253   .debug_str:0000000000000d3a .LASF226
     /tmp/ccXWPiZd.s:5183   .debug_str:0000000000000b59 .LASF163
     /tmp/ccXWPiZd.s:5097   .debug_str:000000000000082f .LASF164
     /tmp/ccXWPiZd.s:4839   .debug_str:00000000000000c5 .LASF165
     /tmp/ccXWPiZd.s:5259   .debug_str:0000000000000d61 .LASF166
     /tmp/ccXWPiZd.s:5001   .debug_str:0000000000000572 .LASF167
     /tmp/ccXWPiZd.s:5155   .debug_str:00000000000009e4 .LASF168
     /tmp/ccXWPiZd.s:5003   .debug_str:0000000000000577 .LASF169
     /tmp/ccXWPiZd.s:5127   .debug_str:000000000000093c .LASF170
     /tmp/ccXWPiZd.s:5039   .debug_str:000000000000067e .LASF171
     /tmp/ccXWPiZd.s:5065   .debug_str:0000000000000769 .LASF172
     /tmp/ccXWPiZd.s:5027   .debug_str:0000000000000633 .LASF173
     /tmp/ccXWPiZd.s:5169   .debug_str:0000000000000a49 .LASF174
     /tmp/ccXWPiZd.s:5151   .debug_str:00000000000009d0 .LASF175
     /tmp/ccXWPiZd.s:5195   .debug_str:0000000000000bae .LASF176
     /tmp/ccXWPiZd.s:5209   .debug_str:0000000000000c14 .LASF177
     /tmp/ccXWPiZd.s:5243   .debug_str:0000000000000cde .LASF178
     /tmp/ccXWPiZd.s:4975   .debug_str:00000000000004b5 .LASF179
     /tmp/ccXWPiZd.s:5059   .debug_str:000000000000071f .LASF180
GAS LISTING /tmp/ccXWPiZd.s 			page 40


     /tmp/ccXWPiZd.s:4953   .debug_str:0000000000000426 .LASF181
     /tmp/ccXWPiZd.s:5099   .debug_str:0000000000000850 .LASF182
     /tmp/ccXWPiZd.s:5141   .debug_str:0000000000000997 .LASF183
     /tmp/ccXWPiZd.s:4945   .debug_str:00000000000003cd .LASF184
     /tmp/ccXWPiZd.s:4929   .debug_str:0000000000000368 .LASF185
     /tmp/ccXWPiZd.s:5161   .debug_str:0000000000000a0e .LASF186
     /tmp/ccXWPiZd.s:5093   .debug_str:000000000000081e .LASF187
     /tmp/ccXWPiZd.s:4813   .debug_str:0000000000000008 .LASF227
     /tmp/ccXWPiZd.s:5207   .debug_str:0000000000000c08 .LASF188
     /tmp/ccXWPiZd.s:4895   .debug_str:000000000000025f .LASF189
     /tmp/ccXWPiZd.s:4967   .debug_str:0000000000000493 .LASF190
     /tmp/ccXWPiZd.s:5075   .debug_str:000000000000079d .LASF191
     /tmp/ccXWPiZd.s:4993   .debug_str:0000000000000541 .LASF192
     /tmp/ccXWPiZd.s:5051   .debug_str:00000000000006fb .LASF193
     /tmp/ccXWPiZd.s:5129   .debug_str:0000000000000942 .LASF194
     /tmp/ccXWPiZd.s:5163   .debug_str:0000000000000a1b .LASF195
     /tmp/ccXWPiZd.s:4913   .debug_str:0000000000000300 .LASF196
     /tmp/ccXWPiZd.s:4951   .debug_str:0000000000000415 .LASF197
     /tmp/ccXWPiZd.s:5081   .debug_str:00000000000007b6 .LASF198
     /tmp/ccXWPiZd.s:4923   .debug_str:0000000000000355 .LASF199
     /tmp/ccXWPiZd.s:4897   .debug_str:000000000000026c .LASF200
     /tmp/ccXWPiZd.s:4927   .debug_str:0000000000000362 .LASF201
     /tmp/ccXWPiZd.s:4905   .debug_str:00000000000002ab .LASF202
     /tmp/ccXWPiZd.s:5013   .debug_str:00000000000005b6 .LASF203
     /tmp/ccXWPiZd.s:4881   .debug_str:000000000000020a .LASF204
     /tmp/ccXWPiZd.s:5085   .debug_str:00000000000007de .LASF205
     /tmp/ccXWPiZd.s:5055   .debug_str:000000000000070b .LASF206
     /tmp/ccXWPiZd.s:5123   .debug_str:0000000000000908 .LASF207
     /tmp/ccXWPiZd.s:5069   .debug_str:000000000000077d .LASF208
     /tmp/ccXWPiZd.s:30     .text:0000000000000000 .LFB54
     /tmp/ccXWPiZd.s:951    .text:0000000000000598 .LFE54
     /tmp/ccXWPiZd.s:5139   .debug_str:0000000000000990 .LASF209
     /tmp/ccXWPiZd.s:4296   .debug_loc:0000000000000000 .LLST0
     /tmp/ccXWPiZd.s:5177   .debug_str:0000000000000b36 .LASF210
     /tmp/ccXWPiZd.s:4327   .debug_loc:0000000000000087 .LLST1
     /tmp/ccXWPiZd.s:5233   .debug_str:0000000000000c8d .LASF211
     /tmp/ccXWPiZd.s:4358   .debug_loc:000000000000010e .LLST2
     /tmp/ccXWPiZd.s:4380   .debug_loc:000000000000016e .LLST3
     /tmp/ccXWPiZd.s:4402   .debug_loc:00000000000001ce .LLST4
     /tmp/ccXWPiZd.s:4424   .debug_loc:000000000000022f .LLST5
     /tmp/ccXWPiZd.s:4446   .debug_loc:0000000000000290 .LLST6
     /tmp/ccXWPiZd.s:4468   .debug_loc:00000000000002f1 .LLST7
     /tmp/ccXWPiZd.s:4490   .debug_loc:0000000000000352 .LLST8
     /tmp/ccXWPiZd.s:4512   .debug_loc:00000000000003b3 .LLST9
     /tmp/ccXWPiZd.s:4534   .debug_loc:0000000000000414 .LLST10
     /tmp/ccXWPiZd.s:750    .text:0000000000000408 .LBB5
     /tmp/ccXWPiZd.s:819    .text:000000000000049c .LBE5
     /tmp/ccXWPiZd.s:4727   .debug_loc:000000000000076d .LLST11
     /tmp/ccXWPiZd.s:754    .text:0000000000000410 .LVL71
     /tmp/ccXWPiZd.s:780    .text:0000000000000458 .LVL74
     /tmp/ccXWPiZd.s:789    .text:000000000000046c .LVL77
     /tmp/ccXWPiZd.s:797    .text:0000000000000480 .LVL78
     /tmp/ccXWPiZd.s:818    .text:000000000000049c .LVL79
     /tmp/ccXWPiZd.s:278    .text:000000000000011c .LVL21
     /tmp/ccXWPiZd.s:296    .text:0000000000000134 .LVL23
     /tmp/ccXWPiZd.s:321    .text:0000000000000160 .LVL25
     /tmp/ccXWPiZd.s:336    .text:0000000000000184 .LVL26
GAS LISTING /tmp/ccXWPiZd.s 			page 41


     /tmp/ccXWPiZd.s:376    .text:00000000000001ac .LVL28
     /tmp/ccXWPiZd.s:381    .text:00000000000001c0 .LVL29
     /tmp/ccXWPiZd.s:385    .text:00000000000001c8 .LVL30
     /tmp/ccXWPiZd.s:389    .text:00000000000001d0 .LVL31
     /tmp/ccXWPiZd.s:398    .text:00000000000001dc .LVL33
     /tmp/ccXWPiZd.s:409    .text:00000000000001f0 .LVL35
     /tmp/ccXWPiZd.s:413    .text:00000000000001f8 .LVL36
     /tmp/ccXWPiZd.s:428    .text:0000000000000214 .LVL38
     /tmp/ccXWPiZd.s:472    .text:000000000000024c .LVL40
     /tmp/ccXWPiZd.s:490    .text:0000000000000264 .LVL42
     /tmp/ccXWPiZd.s:508    .text:000000000000027c .LVL44
     /tmp/ccXWPiZd.s:554    .text:00000000000002ac .LVL46
     /tmp/ccXWPiZd.s:559    .text:00000000000002c0 .LVL47
     /tmp/ccXWPiZd.s:563    .text:00000000000002c8 .LVL48
     /tmp/ccXWPiZd.s:572    .text:00000000000002d4 .LVL50
     /tmp/ccXWPiZd.s:591    .text:00000000000002f0 .LVL52
     /tmp/ccXWPiZd.s:609    .text:0000000000000318 .LVL54
     /tmp/ccXWPiZd.s:653    .text:0000000000000350 .LVL56
     /tmp/ccXWPiZd.s:660    .text:0000000000000364 .LVL57
     /tmp/ccXWPiZd.s:670    .text:0000000000000374 .LVL59
     /tmp/ccXWPiZd.s:680    .text:0000000000000388 .LVL61
     /tmp/ccXWPiZd.s:685    .text:0000000000000394 .LVL62
     /tmp/ccXWPiZd.s:690    .text:00000000000003a4 .LVL63
     /tmp/ccXWPiZd.s:695    .text:00000000000003b0 .LVL64
     /tmp/ccXWPiZd.s:700    .text:00000000000003c0 .LVL65
     /tmp/ccXWPiZd.s:705    .text:00000000000003cc .LVL66
     /tmp/ccXWPiZd.s:839    .text:00000000000004bc .LVL81
     /tmp/ccXWPiZd.s:843    .text:00000000000004c4 .LVL82
     /tmp/ccXWPiZd.s:853    .text:00000000000004dc .LVL83
     /tmp/ccXWPiZd.s:859    .text:00000000000004ec .LVL84
     /tmp/ccXWPiZd.s:863    .text:00000000000004fc .LVL85
     /tmp/ccXWPiZd.s:874    .text:0000000000000518 .LVL86
     /tmp/ccXWPiZd.s:896    .text:0000000000000534 .LVL87
     /tmp/ccXWPiZd.s:911    .text:0000000000000548 .LVL89
     /tmp/ccXWPiZd.s:916    .text:0000000000000558 .LVL90
     /tmp/ccXWPiZd.s:921    .text:0000000000000564 .LVL91
     /tmp/ccXWPiZd.s:926    .text:0000000000000574 .LVL92
     /tmp/ccXWPiZd.s:931    .text:0000000000000580 .LVL93
     /tmp/ccXWPiZd.s:1075   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000000 .LFB39
     /tmp/ccXWPiZd.s:1094   .text._ZN3TCB19getRunningTimeSliceEv:0000000000000020 .LFE39
     /tmp/ccXWPiZd.s:1048   .text._ZN3TCB10getRunningEv:0000000000000000 .LFB37
     /tmp/ccXWPiZd.s:1068   .text._ZN3TCB10getRunningEv:0000000000000024 .LFE37
     /tmp/ccXWPiZd.s:1020   .text._ZN3TCB12getTimeSliceEv:0000000000000000 .LFB34
     /tmp/ccXWPiZd.s:1041   .text._ZN3TCB12getTimeSliceEv:000000000000001c .LFE34
     /tmp/ccXWPiZd.s:4925   .debug_str:000000000000035d .LASF212
     /tmp/ccXWPiZd.s:4756   .debug_loc:00000000000007f1 .LLST12
     /tmp/ccXWPiZd.s:991    .text._ZN3TCB9setStatusENS_12ThreadStatusE:0000000000000000 .LFB32
     /tmp/ccXWPiZd.s:1013   .text._ZN3TCB9setStatusENS_12ThreadStatusE:000000000000001c .LFE32
     /tmp/ccXWPiZd.s:4865   .debug_str:0000000000000172 .LASF213
     /tmp/ccXWPiZd.s:958    .text._ZN5Riscv6mc_sipEm:0000000000000000 .LFB10
     /tmp/ccXWPiZd.s:984    .text._ZN5Riscv6mc_sipEm:000000000000001c .LFE10
     /tmp/ccXWPiZd.s:5215   .debug_str:0000000000000c36 .LASF214
     /tmp/ccXWPiZd.s:5007   .debug_str:0000000000000594 .LASF215
     /tmp/ccXWPiZd.s:4867   .debug_str:0000000000000177 .LASF216
     /tmp/ccXWPiZd.s:5245   .debug_str:0000000000000d00 .LASF217
     /tmp/ccXWPiZd.s:5067   .debug_str:000000000000076f .LASF218
     /tmp/ccXWPiZd.s:5021   .debug_str:0000000000000601 .LASF219
GAS LISTING /tmp/ccXWPiZd.s 			page 42


     /tmp/ccXWPiZd.s:4863   .debug_str:0000000000000168 .LASF220
     /tmp/ccXWPiZd.s:53     .text:000000000000001c .LVL0
     /tmp/ccXWPiZd.s:60     .text:0000000000000020 .LVL1
     /tmp/ccXWPiZd.s:738    .text:00000000000003f4 .LVL69
     /tmp/ccXWPiZd.s:745    .text:00000000000003f8 .LVL70
     /tmp/ccXWPiZd.s:943    .text:000000000000058c .LVL94
     /tmp/ccXWPiZd.s:948    .text:0000000000000594 .LVL95
     /tmp/ccXWPiZd.s:63     .text:0000000000000024 .LVL2
     /tmp/ccXWPiZd.s:70     .text:0000000000000028 .LVL3
     /tmp/ccXWPiZd.s:717    .text:00000000000003e0 .LVL67
     /tmp/ccXWPiZd.s:729    .text:00000000000003ec .LVL68
     /tmp/ccXWPiZd.s:73     .text:000000000000002c .LVL4
     /tmp/ccXWPiZd.s:81     .text:0000000000000030 .LVL5
     /tmp/ccXWPiZd.s:84     .text:0000000000000034 .LVL6
     /tmp/ccXWPiZd.s:91     .text:0000000000000038 .LVL7
     /tmp/ccXWPiZd.s:94     .text:000000000000003c .LVL8
     /tmp/ccXWPiZd.s:101    .text:0000000000000040 .LVL9
     /tmp/ccXWPiZd.s:104    .text:0000000000000044 .LVL10
     /tmp/ccXWPiZd.s:111    .text:0000000000000048 .LVL11
     /tmp/ccXWPiZd.s:114    .text:000000000000004c .LVL12
     /tmp/ccXWPiZd.s:121    .text:0000000000000050 .LVL13
     /tmp/ccXWPiZd.s:124    .text:0000000000000054 .LVL14
     /tmp/ccXWPiZd.s:131    .text:0000000000000058 .LVL15
     /tmp/ccXWPiZd.s:134    .text:000000000000005c .LVL16
     /tmp/ccXWPiZd.s:141    .text:0000000000000060 .LVL17
     /tmp/ccXWPiZd.s:144    .text:0000000000000064 .LVL18
     /tmp/ccXWPiZd.s:151    .text:0000000000000068 .LVL19
     /tmp/ccXWPiZd.s:154    .text:000000000000006c .LVL20
     /tmp/ccXWPiZd.s:288    .text:0000000000000124 .LVL22
     /tmp/ccXWPiZd.s:306    .text:000000000000013c .LVL24
     /tmp/ccXWPiZd.s:370    .text:00000000000001a4 .LVL27
     /tmp/ccXWPiZd.s:392    .text:00000000000001d4 .LVL32
     /tmp/ccXWPiZd.s:401    .text:00000000000001e0 .LVL34
     /tmp/ccXWPiZd.s:416    .text:00000000000001fc .LVL37
     /tmp/ccXWPiZd.s:464    .text:000000000000023c .LVL39
     /tmp/ccXWPiZd.s:482    .text:0000000000000254 .LVL41
     /tmp/ccXWPiZd.s:500    .text:000000000000026c .LVL43
     /tmp/ccXWPiZd.s:518    .text:0000000000000284 .LVL45
     /tmp/ccXWPiZd.s:566    .text:00000000000002cc .LVL49
     /tmp/ccXWPiZd.s:582    .text:00000000000002dc .LVL51
     /tmp/ccXWPiZd.s:594    .text:00000000000002f4 .LVL53
     /tmp/ccXWPiZd.s:645    .text:0000000000000340 .LVL55
     /tmp/ccXWPiZd.s:663    .text:0000000000000368 .LVL58
     /tmp/ccXWPiZd.s:673    .text:0000000000000378 .LVL60
     /tmp/ccXWPiZd.s:825    .text:00000000000004a0 .LVL80
     /tmp/ccXWPiZd.s:902    .text:0000000000000538 .LVL88
     /tmp/ccXWPiZd.s:758    .text:0000000000000418 .LVL72
     /tmp/ccXWPiZd.s:778    .text:0000000000000450 .LVL73
     /tmp/ccXWPiZd.s:782    .text:000000000000045c .LVL75
     /tmp/ccXWPiZd.s:787    .text:0000000000000464 .LVL76
     /tmp/ccXWPiZd.s:1023   .text._ZN3TCB12getTimeSliceEv:0000000000000000 .LVL98
     /tmp/ccXWPiZd.s:1033   .text._ZN3TCB12getTimeSliceEv:0000000000000010 .LVL99
     /tmp/ccXWPiZd.s:1108   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccXWPiZd.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccXWPiZd.s:1097   .text:0000000000000598 .Letext0

UNDEFINED SYMBOLS
GAS LISTING /tmp/ccXWPiZd.s 			page 43


_ZN7KMemory7kmallocEm
_ZN7KMemory5kfreeEPv
_ZN3TCB12createThreadEPFvPvES0_Pm
_ZN9Scheduler3putEP3TCB
_ZN3TCB13releaseJoinedEv
_ZN3TCB8dispatchEv
_ZN3TCB10threadJoinEPS_
_ZN4KSem7initSemEj
_ZN4KSem8closeSemEPS_
_ZN4KSem4waitEv
_ZN4KSem6signalEv
_ZN9Scheduler10putToSleepEP3TCBm
_ZN8KConsole5kgetcEv
_ZN8KConsole5kputcEc
_Z9kPrintIntm
_Z11printStringPKc
plic_claim
_ZN8KConsole2srE
_ZN8KConsole2drE
_ZN8KConsole12placeInInputEc
plic_complete
_ZN9Scheduler4wakeEv
_ZN3TCB7runningE
_ZN3TCB16runningTimeSliceE
