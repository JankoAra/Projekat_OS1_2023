GAS LISTING /tmp/ccrNznQK.s 			page 1


   1              		.file	"interruptRoutine.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata
   7              		.align	3
   8              	.LC0:
   9 0000 0A507265 		.string	"\nPrekid od tajmera\n"
   9      6B696420 
   9      6F642074 
   9      616A6D65 
   9      72610A00 
  10 0014 00000000 		.align	3
  11              	.LC1:
  12 0018 0A4D656E 		.string	"\nMenjam kontekst\n"
  12      6A616D20 
  12      6B6F6E74 
  12      656B7374 
  12      0A00
  13              		.text
  14              		.align	2
  15              		.globl	interruptRoutine
  17              	interruptRoutine:
  18              	.LFB27:
  19              		.file 1 "src/interruptRoutine.cpp"
   1:src/interruptRoutine.cpp **** //
   2:src/interruptRoutine.cpp **** // Created by os on 5/22/23.
   3:src/interruptRoutine.cpp **** //
   4:src/interruptRoutine.cpp **** 
   5:src/interruptRoutine.cpp **** #include "../lib/console.h"
   6:src/interruptRoutine.cpp **** #include "../lib/hw.h"
   7:src/interruptRoutine.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/interruptRoutine.cpp **** #include "../h/helper.hpp"
   9:src/interruptRoutine.cpp **** #include "../h/Riscv.hpp"
  10:src/interruptRoutine.cpp **** #include "../h/syscall_c.hpp"
  11:src/interruptRoutine.cpp **** #include "../h/TCB.hpp"
  12:src/interruptRoutine.cpp **** 
  13:src/interruptRoutine.cpp **** #pragma GCC optimize("O0")
  14:src/interruptRoutine.cpp **** extern "C" void interruptRoutine() {
  20              		.loc 1 14 36
  21              		.cfi_startproc
  22 0000 130101F3 		addi	sp,sp,-208
  23              		.cfi_def_cfa_offset 208
  24 0004 2334110C 		sd	ra,200(sp)
  25 0008 2330810C 		sd	s0,192(sp)
  26              		.cfi_offset 1, -8
  27              		.cfi_offset 8, -16
  28 000c 1304010D 		addi	s0,sp,208
  29              		.cfi_def_cfa 8, 0
  15:src/interruptRoutine.cpp **** 	uint64 scause, sepc, sstatus;
  30              		.loc 1 15 2
  16:src/interruptRoutine.cpp **** 	__asm__ volatile("csrr %[scause], scause":[scause] "=r"(scause): : "a5", "a0", "a1", "a2", "a3", "
  31              		.loc 1 16 2
  32              		.loc 1 16 116 is_stmt 0
  33              	#APP
  34              	# 16 "src/interruptRoutine.cpp" 1
GAS LISTING /tmp/ccrNznQK.s 			page 2


  17              		__asm__ volatile("csrr %[sepc], sepc":[sepc] "=r"(sepc): : "a5", "a0", "a1", "a2", "a3", "a4", "a6
  35              		csrr t1, scause
  36              	# 0 "" 2
  37              	#NO_APP
  38 0014 233C64FC 		sd	t1,-40(s0)
  39              	.LVL0:
  40              		.loc 1 17 2 is_stmt 1
  41              		.loc 1 17 108 is_stmt 0
  42              	#APP
  43              	# 17 "src/interruptRoutine.cpp" 1
  18              		__asm__ volatile("csrr %[status], sstatus":[status] "=r"(
  44              		csrr t1, sepc
  45              	# 0 "" 2
  46              	.LVL1:
  47              	#NO_APP
  48 001c 233864FC 		sd	t1,-48(s0)
  49              	.LVL2:
  50              		.loc 1 18 2 is_stmt 1
  19:src/interruptRoutine.cpp **** 			sstatus): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  51              		.loc 1 19 63 is_stmt 0
  52              	#APP
  53              	# 19 "src/interruptRoutine.cpp" 1
  20              		uint64 a0, a1, a2, a3, a4, a5, a6, a7;
  54              		csrr t1, sstatus
  55              	# 0 "" 2
  56              	.LVL3:
  57              	#NO_APP
  58 0024 233464FC 		sd	t1,-56(s0)
  59              	.LVL4:
  60              		.loc 1 20 2 is_stmt 1
  21:src/interruptRoutine.cpp **** 	__asm__ volatile("mv %[ax], a0":[ax] "=r"(a0): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  61              		.loc 1 21 2
  62              		.loc 1 21 98 is_stmt 0
  63              	#APP
  64              	# 21 "src/interruptRoutine.cpp" 1
  22              		__asm__ volatile("mv %[ax], a1":[ax] "=r"(a1): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  65              		mv t1, a0
  66              	# 0 "" 2
  67              	.LVL5:
  68              	#NO_APP
  69 002c 233064FC 		sd	t1,-64(s0)
  70              	.LVL6:
  71              		.loc 1 22 2 is_stmt 1
  72              		.loc 1 22 98 is_stmt 0
  73              	#APP
  74              	# 22 "src/interruptRoutine.cpp" 1
  23              		__asm__ volatile("mv %[ax], a2":[ax] "=r"(a2): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  75              		mv t1, a1
  76              	# 0 "" 2
  77              	.LVL7:
  78              	#NO_APP
  79 0034 233C64FA 		sd	t1,-72(s0)
  80              	.LVL8:
  81              		.loc 1 23 2 is_stmt 1
  82              		.loc 1 23 98 is_stmt 0
  83              	#APP
  84              	# 23 "src/interruptRoutine.cpp" 1
GAS LISTING /tmp/ccrNznQK.s 			page 3


  24              		__asm__ volatile("mv %[ax], a3":[ax] "=r"(a3): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  85              		mv t1, a2
  86              	# 0 "" 2
  87              	.LVL9:
  88              	#NO_APP
  89 003c 233864FA 		sd	t1,-80(s0)
  90              	.LVL10:
  91              		.loc 1 24 2 is_stmt 1
  92              		.loc 1 24 98 is_stmt 0
  93              	#APP
  94              	# 24 "src/interruptRoutine.cpp" 1
  25              		__asm__ volatile("mv %[ax], a4":[ax] "=r"(a4): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  95              		mv t1, a3
  96              	# 0 "" 2
  97              	.LVL11:
  98              	#NO_APP
  99 0044 233464FA 		sd	t1,-88(s0)
 100              	.LVL12:
 101              		.loc 1 25 2 is_stmt 1
 102              		.loc 1 25 98 is_stmt 0
 103              	#APP
 104              	# 25 "src/interruptRoutine.cpp" 1
  26              		__asm__ volatile("mv %[ax], a5":[ax] "=r"(a5): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 105              		mv t1, a4
 106              	# 0 "" 2
 107              	.LVL13:
 108              	#NO_APP
 109 004c 233064FA 		sd	t1,-96(s0)
 110              	.LVL14:
 111              		.loc 1 26 2 is_stmt 1
 112              		.loc 1 26 98 is_stmt 0
 113              	#APP
 114              	# 26 "src/interruptRoutine.cpp" 1
  27              		__asm__ volatile("mv %[ax], a6":[ax] "=r"(a6): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 115              		mv t1, a5
 116              	# 0 "" 2
 117              	.LVL15:
 118              	#NO_APP
 119 0054 233C64F8 		sd	t1,-104(s0)
 120              	.LVL16:
 121              		.loc 1 27 2 is_stmt 1
 122              		.loc 1 27 98 is_stmt 0
 123              	#APP
 124              	# 27 "src/interruptRoutine.cpp" 1
  28              		__asm__ volatile("mv %[ax], a7":[ax] "=r"(a7): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 125              		mv t1, a6
 126              	# 0 "" 2
 127              	.LVL17:
 128              	#NO_APP
 129 005c 233864F8 		sd	t1,-112(s0)
 130              	.LVL18:
 131              		.loc 1 28 2 is_stmt 1
 132              		.loc 1 28 98 is_stmt 0
 133              	#APP
 134              	# 28 "src/interruptRoutine.cpp" 1
  29              	
 135              		mv t1, a7
GAS LISTING /tmp/ccrNznQK.s 			page 4


 136              	# 0 "" 2
 137              	.LVL19:
 138              	#NO_APP
 139 0064 233464F8 		sd	t1,-120(s0)
 140              	.LVL20:
  30:src/interruptRoutine.cpp **** 	if (scause == 0x09 || scause == 0x08) {
 141              		.loc 1 30 2 is_stmt 1
 142              	.LBB2:
 143 0068 033784FD 		ld	a4,-40(s0)
 144 006c 93079000 		li	a5,9
 145 0070 6308F700 		beq	a4,a5,.L2
 146              		.loc 1 30 21 is_stmt 0 discriminator 1
 147 0074 033784FD 		ld	a4,-40(s0)
 148 0078 93078000 		li	a5,8
 149 007c 6314F72A 		bne	a4,a5,.L3
 150              	.L2:
 151              	.LBB3:
  31:src/interruptRoutine.cpp **** 		//prekid zbog poziva ecall
  32:src/interruptRoutine.cpp **** 		uint64 opCode = a0;
 152              		.loc 1 32 3 is_stmt 1
 153              		.loc 1 32 10 is_stmt 0
 154 0080 833704FC 		ld	a5,-64(s0)
 155 0084 2330F4F8 		sd	a5,-128(s0)
 156              	.LVL21:
  33:src/interruptRoutine.cpp **** 		switch (opCode) {
 157              		.loc 1 33 3 is_stmt 1
 158              	.LBB4:
 159 0088 033704F8 		ld	a4,-128(s0)
 160 008c 93071009 		li	a5,145
 161              	.LVL22:
 162 0090 630EF716 		beq	a4,a5,.L4
 163 0094 033704F8 		ld	a4,-128(s0)
 164 0098 93071009 		li	a5,145
 165 009c 63ECE724 		bgtu	a4,a5,.L35
 166 00a0 033704F8 		ld	a4,-128(s0)
 167 00a4 93072004 		li	a5,66
 168 00a8 63E2E704 		bgtu	a4,a5,.L6
 169 00ac 833704F8 		ld	a5,-128(s0)
 170 00b0 63820724 		beqz	a5,.L35
 171 00b4 033704F8 		ld	a4,-128(s0)
 172 00b8 93072004 		li	a5,66
 173 00bc 63ECE722 		bgtu	a4,a5,.L35
 174 00c0 833704F8 		ld	a5,-128(s0)
 175 00c4 13972700 		slli	a4,a5,2
 176              	.LVL23:
 177 00c8 97070000 		lla	a5,.L8
 177      93870700 
 178              	.LVL24:
 179 00d0 B307F700 		add	a5,a4,a5
 180 00d4 83A70700 		lw	a5,0(a5)
 181 00d8 1B870700 		sext.w	a4,a5
 182 00dc 97070000 		lla	a5,.L8
 182      93870700 
 183 00e4 B307F700 		add	a5,a4,a5
 184 00e8 67800700 		jr	a5
 185              		.section	.rodata
 186 002a 0000     		.align	2
GAS LISTING /tmp/ccrNznQK.s 			page 5


 187              		.align	2
 188              	.L8:
 189 002c 00000000 		.word	.L35-.L8
 190 0030 00000000 		.word	.L20-.L8
 191 0034 00000000 		.word	.L19-.L8
 192 0038 00000000 		.word	.L35-.L8
 193 003c 00000000 		.word	.L35-.L8
 194 0040 00000000 		.word	.L35-.L8
 195 0044 00000000 		.word	.L35-.L8
 196 0048 00000000 		.word	.L35-.L8
 197 004c 00000000 		.word	.L35-.L8
 198 0050 00000000 		.word	.L35-.L8
 199 0054 00000000 		.word	.L35-.L8
 200 0058 00000000 		.word	.L35-.L8
 201 005c 00000000 		.word	.L35-.L8
 202 0060 00000000 		.word	.L35-.L8
 203 0064 00000000 		.word	.L35-.L8
 204 0068 00000000 		.word	.L35-.L8
 205 006c 00000000 		.word	.L35-.L8
 206 0070 00000000 		.word	.L18-.L8
 207 0074 00000000 		.word	.L17-.L8
 208 0078 00000000 		.word	.L16-.L8
 209 007c 00000000 		.word	.L35-.L8
 210 0080 00000000 		.word	.L35-.L8
 211 0084 00000000 		.word	.L35-.L8
 212 0088 00000000 		.word	.L35-.L8
 213 008c 00000000 		.word	.L35-.L8
 214 0090 00000000 		.word	.L35-.L8
 215 0094 00000000 		.word	.L35-.L8
 216 0098 00000000 		.word	.L35-.L8
 217 009c 00000000 		.word	.L35-.L8
 218 00a0 00000000 		.word	.L35-.L8
 219 00a4 00000000 		.word	.L35-.L8
 220 00a8 00000000 		.word	.L35-.L8
 221 00ac 00000000 		.word	.L35-.L8
 222 00b0 00000000 		.word	.L35-.L8
 223 00b4 00000000 		.word	.L35-.L8
 224 00b8 00000000 		.word	.L35-.L8
 225 00bc 00000000 		.word	.L35-.L8
 226 00c0 00000000 		.word	.L35-.L8
 227 00c4 00000000 		.word	.L35-.L8
 228 00c8 00000000 		.word	.L35-.L8
 229 00cc 00000000 		.word	.L35-.L8
 230 00d0 00000000 		.word	.L35-.L8
 231 00d4 00000000 		.word	.L35-.L8
 232 00d8 00000000 		.word	.L35-.L8
 233 00dc 00000000 		.word	.L35-.L8
 234 00e0 00000000 		.word	.L35-.L8
 235 00e4 00000000 		.word	.L35-.L8
 236 00e8 00000000 		.word	.L35-.L8
 237 00ec 00000000 		.word	.L35-.L8
 238 00f0 00000000 		.word	.L35-.L8
 239 00f4 00000000 		.word	.L35-.L8
 240 00f8 00000000 		.word	.L35-.L8
 241 00fc 00000000 		.word	.L35-.L8
 242 0100 00000000 		.word	.L35-.L8
 243 0104 00000000 		.word	.L35-.L8
GAS LISTING /tmp/ccrNznQK.s 			page 6


 244 0108 00000000 		.word	.L35-.L8
 245 010c 00000000 		.word	.L35-.L8
 246 0110 00000000 		.word	.L35-.L8
 247 0114 00000000 		.word	.L35-.L8
 248 0118 00000000 		.word	.L35-.L8
 249 011c 00000000 		.word	.L35-.L8
 250 0120 00000000 		.word	.L35-.L8
 251 0124 00000000 		.word	.L35-.L8
 252 0128 00000000 		.word	.L35-.L8
 253 012c 00000000 		.word	.L35-.L8
 254 0130 00000000 		.word	.L35-.L8
 255 0134 00000000 		.word	.L35-.L8
 256              		.text
 257              	.LVL25:
 258              	.L6:
 259 00ec 033704F8 		ld	a4,-128(s0)
 260              	.LVL26:
 261 00f0 93070009 		li	a5,144
 262 00f4 6300F70E 		beq	a4,a5,.L21
 263              	.LBB5:
  34:src/interruptRoutine.cpp **** 			case 0x01:
  35:src/interruptRoutine.cpp **** 				//mem_alloc
  36:src/interruptRoutine.cpp **** 				size_t size;
  37:src/interruptRoutine.cpp **** 				size = (size_t)a1;
  38:src/interruptRoutine.cpp **** 				//__asm__ volatile("mv %[size], a1":[size] "=r"(size));
  39:src/interruptRoutine.cpp **** 				size = size * MEM_BLOCK_SIZE;
  40:src/interruptRoutine.cpp **** 				MemoryAllocator::kmalloc(size);
  41:src/interruptRoutine.cpp **** 				__asm__ volatile("sd a0, 80(s0)");
  42:src/interruptRoutine.cpp **** 				break;
  43:src/interruptRoutine.cpp **** 			case 0x02:
  44:src/interruptRoutine.cpp **** 				//mem_free
  45:src/interruptRoutine.cpp **** 				void* ptr;
  46:src/interruptRoutine.cpp **** 				ptr = (void*)a1;
  47:src/interruptRoutine.cpp **** 				//__asm__ volatile("mv %[ptr], a1" :[ptr]"=r"(ptr));
  48:src/interruptRoutine.cpp **** 				MemoryAllocator::kfree(ptr);
  49:src/interruptRoutine.cpp **** 				__asm__ volatile("sd a0, 80(s0)");
  50:src/interruptRoutine.cpp **** 				break;
  51:src/interruptRoutine.cpp **** 			case 0x11:
  52:src/interruptRoutine.cpp **** 				//thread_create
  53:src/interruptRoutine.cpp **** 				thread_t* handle;
  54:src/interruptRoutine.cpp **** 				handle = (thread_t*)a1;
  55:src/interruptRoutine.cpp **** 				void (* function)(void*);
  56:src/interruptRoutine.cpp **** 				function = (void (*)(void*))a2;
  57:src/interruptRoutine.cpp **** 				void* args;
  58:src/interruptRoutine.cpp **** 				args = (void*)a3;
  59:src/interruptRoutine.cpp **** 				uint64* sp;
  60:src/interruptRoutine.cpp **** 				sp = (uint64*)a4;
  61:src/interruptRoutine.cpp **** 
  62:src/interruptRoutine.cpp **** 				*handle = TCB::createThread(function, args, sp);
  63:src/interruptRoutine.cpp **** 				if (*handle != nullptr) {
  64:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, 0");
  65:src/interruptRoutine.cpp **** 				} else {
  66:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, -1");
  67:src/interruptRoutine.cpp **** 				}
  68:src/interruptRoutine.cpp **** 				__asm__ volatile("sd a0, 80(s0)");
  69:src/interruptRoutine.cpp **** 				break;
  70:src/interruptRoutine.cpp **** 			case 0x12:
GAS LISTING /tmp/ccrNznQK.s 			page 7


  71:src/interruptRoutine.cpp **** 				//thread_exit
  72:src/interruptRoutine.cpp **** 				TCB::running->setFinished(true);
  73:src/interruptRoutine.cpp **** 				TCB::yield();
  74:src/interruptRoutine.cpp **** 				break;
  75:src/interruptRoutine.cpp **** 			case 0x13:
  76:src/interruptRoutine.cpp **** 				//thread_dispatch
  77:src/interruptRoutine.cpp **** 				TCB::yield();
  78:src/interruptRoutine.cpp **** 				break;
  79:src/interruptRoutine.cpp **** 			case 0x14:
  80:src/interruptRoutine.cpp **** 				//thread_join
  81:src/interruptRoutine.cpp **** 				break;
  82:src/interruptRoutine.cpp **** 			case 0x21:
  83:src/interruptRoutine.cpp **** 				//sem_open
  84:src/interruptRoutine.cpp **** 				break;
  85:src/interruptRoutine.cpp **** 			case 0x22:
  86:src/interruptRoutine.cpp **** 				//sem_close
  87:src/interruptRoutine.cpp **** 				break;
  88:src/interruptRoutine.cpp **** 			case 0x23:
  89:src/interruptRoutine.cpp **** 				//sem_wait
  90:src/interruptRoutine.cpp **** 				break;
  91:src/interruptRoutine.cpp **** 			case 0x24:
  92:src/interruptRoutine.cpp **** 				//sem_signal
  93:src/interruptRoutine.cpp **** 				break;
  94:src/interruptRoutine.cpp **** 			case 0x31:
  95:src/interruptRoutine.cpp **** 				//time_sleep
  96:src/interruptRoutine.cpp **** 				break;
  97:src/interruptRoutine.cpp **** 			case 0x41:
  98:src/interruptRoutine.cpp **** 				//getc
  99:src/interruptRoutine.cpp **** 				break;
 100:src/interruptRoutine.cpp **** 			case 0x42:
 101:src/interruptRoutine.cpp **** 				//putc
 102:src/interruptRoutine.cpp **** 				break;
 103:src/interruptRoutine.cpp **** 			case 0x90:
 104:src/interruptRoutine.cpp **** 				//printString
 105:src/interruptRoutine.cpp **** 				const char* string;
 106:src/interruptRoutine.cpp **** 				string = (const char*)a1;
 107:src/interruptRoutine.cpp **** 				while (*string != '\0') {
 108:src/interruptRoutine.cpp **** 					__putc(*string);
 109:src/interruptRoutine.cpp **** 					string++;
 110:src/interruptRoutine.cpp **** 				}
 111:src/interruptRoutine.cpp **** 				break;
 112:src/interruptRoutine.cpp **** 			case 0x91:
 113:src/interruptRoutine.cpp **** 				//printInteger
 114:src/interruptRoutine.cpp **** 				uint64 integer;
 115:src/interruptRoutine.cpp **** 				integer = a1;
 116:src/interruptRoutine.cpp **** 				static char digits[] = "0123456789";
 117:src/interruptRoutine.cpp **** 				char buf[16];
 118:src/interruptRoutine.cpp **** 				int i, neg;
 119:src/interruptRoutine.cpp **** 				uint x;
 120:src/interruptRoutine.cpp **** 
 121:src/interruptRoutine.cpp **** 				neg = 0;
 122:src/interruptRoutine.cpp **** 				if (integer < 0) {
 123:src/interruptRoutine.cpp **** 					neg = 1;
 124:src/interruptRoutine.cpp **** 					x = -integer;
 125:src/interruptRoutine.cpp **** 				} else {
 126:src/interruptRoutine.cpp **** 					x = integer;
 127:src/interruptRoutine.cpp **** 				}
GAS LISTING /tmp/ccrNznQK.s 			page 8


 128:src/interruptRoutine.cpp **** 
 129:src/interruptRoutine.cpp **** 				i = 0;
 130:src/interruptRoutine.cpp **** 				do {
 131:src/interruptRoutine.cpp **** 					buf[i++] = digits[x % 10];
 132:src/interruptRoutine.cpp **** 				} while ((x /= 10) != 0);
 133:src/interruptRoutine.cpp **** 				if (neg) buf[i++] = '-';
 134:src/interruptRoutine.cpp **** 
 135:src/interruptRoutine.cpp **** 				while (--i >= 0) {
 136:src/interruptRoutine.cpp **** 					__putc(buf[i]);
 137:src/interruptRoutine.cpp **** 				}
 138:src/interruptRoutine.cpp **** 				break;
 139:src/interruptRoutine.cpp **** 			default:
 140:src/interruptRoutine.cpp **** //				printString("\nNepostojeci op code: ");
 141:src/interruptRoutine.cpp **** //				printInteger(opCode);
 142:src/interruptRoutine.cpp **** //				printString("\nscause: ");
 143:src/interruptRoutine.cpp **** //				printInteger(scause);
 144:src/interruptRoutine.cpp **** //				printString("\nsepc: ");
 145:src/interruptRoutine.cpp **** //				printInteger(sepc);
 146:src/interruptRoutine.cpp **** 				break;
 264              		.loc 1 146 5 is_stmt 0
 265 00f8 6F00C01F 		j	.L35
 266              	.L20:
  34:src/interruptRoutine.cpp **** 			case 0x01:
 267              		.loc 1 34 4 is_stmt 1
  36:src/interruptRoutine.cpp **** 				size = (size_t)a1;
 268              		.loc 1 36 5
  37:src/interruptRoutine.cpp **** 				//__asm__ volatile("mv %[size], a1":[size] "=r"(size));
 269              		.loc 1 37 5
  37:src/interruptRoutine.cpp **** 				//__asm__ volatile("mv %[size], a1":[size] "=r"(size));
 270              		.loc 1 37 10 is_stmt 0
 271 00fc 833784FB 		ld	a5,-72(s0)
 272 0100 2330F4F4 		sd	a5,-192(s0)
 273              	.LVL27:
  39:src/interruptRoutine.cpp **** 				MemoryAllocator::kmalloc(size);
 274              		.loc 1 39 5 is_stmt 1
  39:src/interruptRoutine.cpp **** 				MemoryAllocator::kmalloc(size);
 275              		.loc 1 39 10 is_stmt 0
 276 0104 833704F4 		ld	a5,-192(s0)
 277 0108 93976700 		slli	a5,a5,6
 278              	.LVL28:
 279 010c 2330F4F4 		sd	a5,-192(s0)
 280              	.LVL29:
  40:src/interruptRoutine.cpp **** 				__asm__ volatile("sd a0, 80(s0)");
 281              		.loc 1 40 5 is_stmt 1
  40:src/interruptRoutine.cpp **** 				__asm__ volatile("sd a0, 80(s0)");
 282              		.loc 1 40 29 is_stmt 0
 283 0110 033504F4 		ld	a0,-192(s0)
 284 0114 97000000 		call	_ZN15MemoryAllocator7kmallocEm@plt
 284      E7800000 
 285              	.LVL30:
  41:src/interruptRoutine.cpp **** 				break;
 286              		.loc 1 41 5 is_stmt 1
  41:src/interruptRoutine.cpp **** 				break;
 287              		.loc 1 41 38 is_stmt 0
 288              	#APP
 289              	# 41 "src/interruptRoutine.cpp" 1
  42:src/interruptRoutine.cpp **** 			case 0x02:
GAS LISTING /tmp/ccrNznQK.s 			page 9


 290              		sd a0, 80(s0)
 291              	# 0 "" 2
 292              		.loc 1 42 5 is_stmt 1
 293              	#NO_APP
 294 0120 6F00801E 		j	.L22
 295              	.LVL31:
 296              	.L19:
  43:src/interruptRoutine.cpp **** 				//mem_free
 297              		.loc 1 43 4
  45:src/interruptRoutine.cpp **** 				ptr = (void*)a1;
 298              		.loc 1 45 5
  46:src/interruptRoutine.cpp **** 				//__asm__ volatile("mv %[ptr], a1" :[ptr]"=r"(ptr));
 299              		.loc 1 46 5
  46:src/interruptRoutine.cpp **** 				//__asm__ volatile("mv %[ptr], a1" :[ptr]"=r"(ptr));
 300              		.loc 1 46 9 is_stmt 0
 301 0124 833784FB 		ld	a5,-72(s0)
 302 0128 2334F4F4 		sd	a5,-184(s0)
 303              	.LVL32:
  48:src/interruptRoutine.cpp **** 				__asm__ volatile("sd a0, 80(s0)");
 304              		.loc 1 48 5 is_stmt 1
  48:src/interruptRoutine.cpp **** 				__asm__ volatile("sd a0, 80(s0)");
 305              		.loc 1 48 27 is_stmt 0
 306 012c 033584F4 		ld	a0,-184(s0)
 307 0130 97000000 		call	_ZN15MemoryAllocator5kfreeEPv@plt
 307      E7800000 
 308              	.LVL33:
  49:src/interruptRoutine.cpp **** 				break;
 309              		.loc 1 49 5 is_stmt 1
  49:src/interruptRoutine.cpp **** 				break;
 310              		.loc 1 49 38 is_stmt 0
 311              	#APP
 312              	# 49 "src/interruptRoutine.cpp" 1
  50:src/interruptRoutine.cpp **** 			case 0x11:
 313              		sd a0, 80(s0)
 314              	# 0 "" 2
 315              		.loc 1 50 5 is_stmt 1
 316              	#NO_APP
 317 013c 6F00C01C 		j	.L22
 318              	.LVL34:
 319              	.L18:
  51:src/interruptRoutine.cpp **** 				//thread_create
 320              		.loc 1 51 4
  53:src/interruptRoutine.cpp **** 				handle = (thread_t*)a1;
 321              		.loc 1 53 5
  54:src/interruptRoutine.cpp **** 				void (* function)(void*);
 322              		.loc 1 54 5
  54:src/interruptRoutine.cpp **** 				void (* function)(void*);
 323              		.loc 1 54 12 is_stmt 0
 324 0140 833784FB 		ld	a5,-72(s0)
 325 0144 2334F4F6 		sd	a5,-152(s0)
 326              	.LVL35:
  55:src/interruptRoutine.cpp **** 				function = (void (*)(void*))a2;
 327              		.loc 1 55 5 is_stmt 1
  56:src/interruptRoutine.cpp **** 				void* args;
 328              		.loc 1 56 5
  56:src/interruptRoutine.cpp **** 				void* args;
 329              		.loc 1 56 14 is_stmt 0
GAS LISTING /tmp/ccrNznQK.s 			page 10


 330 0148 833704FB 		ld	a5,-80(s0)
 331              	.LVL36:
 332 014c 2330F4F6 		sd	a5,-160(s0)
 333              	.LVL37:
  57:src/interruptRoutine.cpp **** 				args = (void*)a3;
 334              		.loc 1 57 5 is_stmt 1
  58:src/interruptRoutine.cpp **** 				uint64* sp;
 335              		.loc 1 58 5
  58:src/interruptRoutine.cpp **** 				uint64* sp;
 336              		.loc 1 58 10 is_stmt 0
 337 0150 833784FA 		ld	a5,-88(s0)
 338              	.LVL38:
 339 0154 233CF4F4 		sd	a5,-168(s0)
 340              	.LVL39:
  59:src/interruptRoutine.cpp **** 				sp = (uint64*)a4;
 341              		.loc 1 59 5 is_stmt 1
  60:src/interruptRoutine.cpp **** 
 342              		.loc 1 60 5
  60:src/interruptRoutine.cpp **** 
 343              		.loc 1 60 8 is_stmt 0
 344 0158 833704FA 		ld	a5,-96(s0)
 345              	.LVL40:
 346 015c 2338F4F4 		sd	a5,-176(s0)
 347              	.LVL41:
  62:src/interruptRoutine.cpp **** 				if (*handle != nullptr) {
 348              		.loc 1 62 5 is_stmt 1
  62:src/interruptRoutine.cpp **** 				if (*handle != nullptr) {
 349              		.loc 1 62 32 is_stmt 0
 350 0160 033604F5 		ld	a2,-176(s0)
 351 0164 833584F5 		ld	a1,-168(s0)
 352 0168 033504F6 		ld	a0,-160(s0)
 353 016c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 353      E7800000 
 354              	.LVL42:
 355 0174 13070500 		mv	a4,a0
  62:src/interruptRoutine.cpp **** 				if (*handle != nullptr) {
 356              		.loc 1 62 13
 357 0178 833784F6 		ld	a5,-152(s0)
 358 017c 23B0E700 		sd	a4,0(a5)
  63:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, 0");
 359              		.loc 1 63 5 is_stmt 1
  63:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, 0");
 360              		.loc 1 63 9 is_stmt 0
 361 0180 833784F6 		ld	a5,-152(s0)
 362 0184 83B70700 		ld	a5,0(a5)
  63:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, 0");
 363              		.loc 1 63 5
 364 0188 63860700 		beqz	a5,.L23
  64:src/interruptRoutine.cpp **** 				} else {
 365              		.loc 1 64 6 is_stmt 1
  64:src/interruptRoutine.cpp **** 				} else {
 366              		.loc 1 64 34 is_stmt 0
 367              	#APP
 368              	# 64 "src/interruptRoutine.cpp" 1
 369              		li a0, 0
 370              	# 0 "" 2
 371              	#NO_APP
GAS LISTING /tmp/ccrNznQK.s 			page 11


 372 0190 6F008000 		j	.L24
 373              	.L23:
  66:src/interruptRoutine.cpp **** 				}
 374              		.loc 1 66 6 is_stmt 1
  66:src/interruptRoutine.cpp **** 				}
 375              		.loc 1 66 35 is_stmt 0
 376              	#APP
 377              	# 66 "src/interruptRoutine.cpp" 1
 378              		li a0, -1
 379              	# 0 "" 2
 380              	#NO_APP
 381              	.L24:
  68:src/interruptRoutine.cpp **** 				break;
 382              		.loc 1 68 5 is_stmt 1
  68:src/interruptRoutine.cpp **** 				break;
 383              		.loc 1 68 38 is_stmt 0
 384              	#APP
 385              	# 68 "src/interruptRoutine.cpp" 1
  69:src/interruptRoutine.cpp **** 			case 0x12:
 386              		sd a0, 80(s0)
 387              	# 0 "" 2
 388              		.loc 1 69 5 is_stmt 1
 389              	#NO_APP
 390 019c 6F00C016 		j	.L22
 391              	.LVL43:
 392              	.L17:
  70:src/interruptRoutine.cpp **** 				//thread_exit
 393              		.loc 1 70 4
  72:src/interruptRoutine.cpp **** 				TCB::yield();
 394              		.loc 1 72 5
  72:src/interruptRoutine.cpp **** 				TCB::yield();
 395              		.loc 1 72 30 is_stmt 0
 396 01a0 97070000 		la	a5,_ZN3TCB7runningE
 396      83B70700 
 397 01a8 83B70700 		ld	a5,0(a5)
 398 01ac 93051000 		li	a1,1
 399 01b0 13850700 		mv	a0,a5
 400 01b4 97000000 		call	_ZN3TCB11setFinishedEb
 400      E7800000 
 401              	.LVL44:
  73:src/interruptRoutine.cpp **** 				break;
 402              		.loc 1 73 5 is_stmt 1
  73:src/interruptRoutine.cpp **** 				break;
 403              		.loc 1 73 15 is_stmt 0
 404 01bc 97000000 		call	_ZN3TCB5yieldEv@plt
 404      E7800000 
 405              	.LVL45:
  74:src/interruptRoutine.cpp **** 			case 0x13:
 406              		.loc 1 74 5 is_stmt 1
 407 01c4 6F004014 		j	.L22
 408              	.LVL46:
 409              	.L16:
  75:src/interruptRoutine.cpp **** 				//thread_dispatch
 410              		.loc 1 75 4
  77:src/interruptRoutine.cpp **** 				break;
 411              		.loc 1 77 5
  77:src/interruptRoutine.cpp **** 				break;
GAS LISTING /tmp/ccrNznQK.s 			page 12


 412              		.loc 1 77 15 is_stmt 0
 413 01c8 97000000 		call	_ZN3TCB5yieldEv@plt
 413      E7800000 
 414              	.LVL47:
  78:src/interruptRoutine.cpp **** 			case 0x14:
 415              		.loc 1 78 5 is_stmt 1
 416 01d0 6F008013 		j	.L22
 417              	.LVL48:
 418              	.L21:
 103:src/interruptRoutine.cpp **** 				//printString
 419              		.loc 1 103 4
 105:src/interruptRoutine.cpp **** 				string = (const char*)a1;
 420              		.loc 1 105 5
 106:src/interruptRoutine.cpp **** 				while (*string != '\0') {
 421              		.loc 1 106 5
 106:src/interruptRoutine.cpp **** 				while (*string != '\0') {
 422              		.loc 1 106 12 is_stmt 0
 423 01d4 833784FB 		ld	a5,-72(s0)
 424 01d8 2334F4FE 		sd	a5,-24(s0)
 425              	.LVL49:
 426              	.L26:
 107:src/interruptRoutine.cpp **** 					__putc(*string);
 427              		.loc 1 107 5 is_stmt 1
 107:src/interruptRoutine.cpp **** 					__putc(*string);
 428              		.loc 1 107 20
 107:src/interruptRoutine.cpp **** 					__putc(*string);
 429              		.loc 1 107 12 is_stmt 0
 430 01dc 833784FE 		ld	a5,-24(s0)
 431 01e0 83C70700 		lbu	a5,0(a5)
 107:src/interruptRoutine.cpp **** 					__putc(*string);
 432              		.loc 1 107 20
 433 01e4 638C0710 		beqz	a5,.L36
 108:src/interruptRoutine.cpp **** 					string++;
 434              		.loc 1 108 6 is_stmt 1
 108:src/interruptRoutine.cpp **** 					string++;
 435              		.loc 1 108 12 is_stmt 0
 436 01e8 833784FE 		ld	a5,-24(s0)
 437 01ec 83C70700 		lbu	a5,0(a5)
 438 01f0 13850700 		mv	a0,a5
 439 01f4 97000000 		call	__putc@plt
 439      E7800000 
 440              	.LVL50:
 109:src/interruptRoutine.cpp **** 				}
 441              		.loc 1 109 6 is_stmt 1
 109:src/interruptRoutine.cpp **** 				}
 442              		.loc 1 109 12 is_stmt 0
 443 01fc 833784FE 		ld	a5,-24(s0)
 444 0200 93871700 		addi	a5,a5,1
 445 0204 2334F4FE 		sd	a5,-24(s0)
 446              	.LVL51:
 107:src/interruptRoutine.cpp **** 					__putc(*string);
 447              		.loc 1 107 5
 448 0208 6FF05FFD 		j	.L26
 449              	.LVL52:
 450              	.L4:
 112:src/interruptRoutine.cpp **** 				//printInteger
 451              		.loc 1 112 4 is_stmt 1
GAS LISTING /tmp/ccrNznQK.s 			page 13


 114:src/interruptRoutine.cpp **** 				integer = a1;
 452              		.loc 1 114 5
 115:src/interruptRoutine.cpp **** 				static char digits[] = "0123456789";
 453              		.loc 1 115 5
 115:src/interruptRoutine.cpp **** 				static char digits[] = "0123456789";
 454              		.loc 1 115 13 is_stmt 0
 455 020c 833784FB 		ld	a5,-72(s0)
 456 0210 233CF4F6 		sd	a5,-136(s0)
 457              	.LVL53:
 116:src/interruptRoutine.cpp **** 				char buf[16];
 458              		.loc 1 116 5 is_stmt 1
 117:src/interruptRoutine.cpp **** 				int i, neg;
 459              		.loc 1 117 5
 118:src/interruptRoutine.cpp **** 				uint x;
 460              		.loc 1 118 5
 119:src/interruptRoutine.cpp **** 
 461              		.loc 1 119 5
 121:src/interruptRoutine.cpp **** 				if (integer < 0) {
 462              		.loc 1 121 5
 121:src/interruptRoutine.cpp **** 				if (integer < 0) {
 463              		.loc 1 121 9 is_stmt 0
 464 0214 232A04F6 		sw	zero,-140(s0)
 465              	.LVL54:
 122:src/interruptRoutine.cpp **** 					neg = 1;
 466              		.loc 1 122 5 is_stmt 1
 126:src/interruptRoutine.cpp **** 				}
 467              		.loc 1 126 6
 126:src/interruptRoutine.cpp **** 				}
 468              		.loc 1 126 8 is_stmt 0
 469 0218 833784F7 		ld	a5,-136(s0)
 470 021c 2320F4FE 		sw	a5,-32(s0)
 471              	.LVL55:
 129:src/interruptRoutine.cpp **** 				do {
 472              		.loc 1 129 5 is_stmt 1
 129:src/interruptRoutine.cpp **** 				do {
 473              		.loc 1 129 7 is_stmt 0
 474 0220 232204FE 		sw	zero,-28(s0)
 475              	.LVL56:
 476              	.L28:
 130:src/interruptRoutine.cpp **** 					buf[i++] = digits[x % 10];
 477              		.loc 1 130 5 is_stmt 1
 131:src/interruptRoutine.cpp **** 				} while ((x /= 10) != 0);
 478              		.loc 1 131 6
 131:src/interruptRoutine.cpp **** 				} while ((x /= 10) != 0);
 479              		.loc 1 131 26 is_stmt 0
 480 0224 032704FE 		lw	a4,-32(s0)
 481 0228 9307A000 		li	a5,10
 482 022c BB77F702 		remuw	a5,a4,a5
 483 0230 1B860700 		sext.w	a2,a5
 131:src/interruptRoutine.cpp **** 				} while ((x /= 10) != 0);
 484              		.loc 1 131 11
 485 0234 832744FE 		lw	a5,-28(s0)
 486 0238 1B871700 		addiw	a4,a5,1
 487 023c 2322E4FE 		sw	a4,-28(s0)
 488              	.LVL57:
 131:src/interruptRoutine.cpp **** 				} while ((x /= 10) != 0);
 489              		.loc 1 131 30
GAS LISTING /tmp/ccrNznQK.s 			page 14


 490 0240 97060000 		lla	a3,_ZZ16interruptRoutineE6digits
 490      93860600 
 491 0248 13170602 		slli	a4,a2,32
 492 024c 13570702 		srli	a4,a4,32
 493              	.LVL58:
 494 0250 3387E600 		add	a4,a3,a4
 495 0254 03470700 		lbu	a4,0(a4)
 131:src/interruptRoutine.cpp **** 				} while ((x /= 10) != 0);
 496              		.loc 1 131 15
 497 0258 930604FF 		addi	a3,s0,-16
 498 025c B387F600 		add	a5,a3,a5
 499 0260 2380E7F4 		sb	a4,-192(a5)
 132:src/interruptRoutine.cpp **** 				if (neg) buf[i++] = '-';
 500              		.loc 1 132 24 is_stmt 1
 132:src/interruptRoutine.cpp **** 				if (neg) buf[i++] = '-';
 501              		.loc 1 132 17 is_stmt 0
 502 0264 032704FE 		lw	a4,-32(s0)
 503 0268 9307A000 		li	a5,10
 504 026c BB57F702 		divuw	a5,a4,a5
 505 0270 2320F4FE 		sw	a5,-32(s0)
 506              	.LVL59:
 132:src/interruptRoutine.cpp **** 				if (neg) buf[i++] = '-';
 507              		.loc 1 132 24
 508 0274 832704FE 		lw	a5,-32(s0)
 509 0278 9B870700 		sext.w	a5,a5
 510              	.LVL60:
 511 027c B337F000 		snez	a5,a5
 512 0280 93F7F70F 		andi	a5,a5,0xff
 513 0284 63840700 		beqz	a5,.L27
 130:src/interruptRoutine.cpp **** 					buf[i++] = digits[x % 10];
 514              		.loc 1 130 5
 515 0288 6FF0DFF9 		j	.L28
 516              	.L27:
 133:src/interruptRoutine.cpp **** 
 517              		.loc 1 133 5 is_stmt 1
 518 028c 832744F7 		lw	a5,-140(s0)
 519 0290 9B870700 		sext.w	a5,a5
 520 0294 63800702 		beqz	a5,.L31
 133:src/interruptRoutine.cpp **** 
 521              		.loc 1 133 14 discriminator 1
 133:src/interruptRoutine.cpp **** 
 522              		.loc 1 133 19 is_stmt 0 discriminator 1
 523 0298 832744FE 		lw	a5,-28(s0)
 524 029c 1B871700 		addiw	a4,a5,1
 525 02a0 2322E4FE 		sw	a4,-28(s0)
 526              	.LVL61:
 133:src/interruptRoutine.cpp **** 
 527              		.loc 1 133 23 discriminator 1
 528 02a4 130704FF 		addi	a4,s0,-16
 529              	.LVL62:
 530 02a8 B307F700 		add	a5,a4,a5
 531 02ac 1307D002 		li	a4,45
 532 02b0 2380E7F4 		sb	a4,-192(a5)
 533              	.LVL63:
 534              	.L31:
 135:src/interruptRoutine.cpp **** 					__putc(buf[i]);
 535              		.loc 1 135 5 is_stmt 1
GAS LISTING /tmp/ccrNznQK.s 			page 15


 135:src/interruptRoutine.cpp **** 					__putc(buf[i]);
 536              		.loc 1 135 16
 537 02b4 832744FE 		lw	a5,-28(s0)
 538 02b8 9B87F7FF 		addiw	a5,a5,-1
 539 02bc 2322F4FE 		sw	a5,-28(s0)
 540              	.LVL64:
 541 02c0 832744FE 		lw	a5,-28(s0)
 542 02c4 93C7F7FF 		not	a5,a5
 543              	.LVL65:
 544 02c8 9BD7F701 		srliw	a5,a5,31
 545 02cc 93F7F70F 		andi	a5,a5,0xff
 546 02d0 638A0702 		beqz	a5,.L37
 136:src/interruptRoutine.cpp **** 				}
 547              		.loc 1 136 6
 136:src/interruptRoutine.cpp **** 				}
 548              		.loc 1 136 12 is_stmt 0
 549 02d4 832744FE 		lw	a5,-28(s0)
 550 02d8 130704FF 		addi	a4,s0,-16
 551 02dc B307F700 		add	a5,a4,a5
 552 02e0 83C707F4 		lbu	a5,-192(a5)
 553 02e4 13850700 		mv	a0,a5
 554 02e8 97000000 		call	__putc@plt
 554      E7800000 
 555              	.LVL66:
 135:src/interruptRoutine.cpp **** 					__putc(buf[i]);
 556              		.loc 1 135 5
 557 02f0 6FF05FFC 		j	.L31
 558              	.LVL67:
 559              	.L35:
 560              		.loc 1 146 5
 561 02f4 13000000 		nop
 562 02f8 6F000001 		j	.L22
 563              	.LVL68:
 564              	.L36:
 111:src/interruptRoutine.cpp **** 			case 0x91:
 565              		.loc 1 111 5
 566 02fc 13000000 		nop
 567 0300 6F008000 		j	.L22
 568              	.LVL69:
 569              	.L37:
 138:src/interruptRoutine.cpp **** 			default:
 570              		.loc 1 138 5
 571 0304 13000000 		nop
 572              	.LVL70:
 573              	.L22:
 574              	.LBE5:
 575              	.LBE4:
 147:src/interruptRoutine.cpp **** 		}
 148:src/interruptRoutine.cpp **** 		//sepc pokazuje na ecall instrukciju, treba preci na sledecu instrukciju
 149:src/interruptRoutine.cpp **** 		//sepc += 4;
 150:src/interruptRoutine.cpp **** 		__asm__ volatile("addi %[dst], %[src], 0x4":[dst]"=r"(sepc):[src]"r"(
 576              		.loc 1 150 3 is_stmt 1 discriminator 1
 151:src/interruptRoutine.cpp **** 				sepc):"a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 577              		.loc 1 151 58 is_stmt 0 discriminator 1
 578 0308 033304FD 		ld	t1,-48(s0)
 579              	#APP
 580              	# 151 "src/interruptRoutine.cpp" 1
GAS LISTING /tmp/ccrNznQK.s 			page 16


 152              			__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc):"a5", "a0", "a1", "a2", "a3", "a4", "a6"
 581              		addi t1, t1, 0x4
 582              	# 0 "" 2
 583              	.LVL71:
 584              	#NO_APP
 585 0310 233864FC 		sd	t1,-48(s0)
 586              	.LVL72:
 587              		.loc 1 152 3 is_stmt 1 discriminator 1
 588              		.loc 1 152 107 is_stmt 0 discriminator 1
 589 0314 033304FD 		ld	t1,-48(s0)
 590              	#APP
 591              	# 152 "src/interruptRoutine.cpp" 1
 153              			//Riscv::w_sepc(sepc + 4);
 592              		csrw sepc, t1
 593              	# 0 "" 2
 594              	#NO_APP
 595              	.LBE3:
 596 031c 13000000 		nop
 597              	.LBE2:
 154:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 9)) {
 155:src/interruptRoutine.cpp **** 		//spoljasnji hardverski prekid (od konzole)
 156:src/interruptRoutine.cpp **** 		console_handler();
 157:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
 158:src/interruptRoutine.cpp **** 		//prekid od tajmera
 159:src/interruptRoutine.cpp **** 		printString("\nPrekid od tajmera\n");
 160:src/interruptRoutine.cpp **** 		TCB::runningTimeSlice++;
 161:src/interruptRoutine.cpp **** 		if (TCB::runningTimeSlice >= TCB::running->getTimeSlice()) {
 162:src/interruptRoutine.cpp **** 			printString("\nMenjam kontekst\n");
 163:src/interruptRoutine.cpp **** 			TCB::yield();
 164:src/interruptRoutine.cpp **** 			TCB::runningTimeSlice = 0;
 165:src/interruptRoutine.cpp **** 		}
 166:src/interruptRoutine.cpp **** 
 167:src/interruptRoutine.cpp **** 		Riscv::w_sepc(sepc);
 168:src/interruptRoutine.cpp **** 		Riscv::w_sstatus(sstatus);
 169:src/interruptRoutine.cpp **** 		Riscv::mc_sip(Riscv::SIP_SSIP);
 170:src/interruptRoutine.cpp **** 	} else {
 171:src/interruptRoutine.cpp **** //		println("\nGreska u prekidnoj rutini");
 172:src/interruptRoutine.cpp **** //		printString("scause: ");
 173:src/interruptRoutine.cpp **** //		printInteger(scause);
 174:src/interruptRoutine.cpp **** //		printString("\nsepc: ");
 175:src/interruptRoutine.cpp **** //		printInteger(sepc);
 176:src/interruptRoutine.cpp **** 	}
 177:src/interruptRoutine.cpp **** }
 598              		.loc 1 177 1 discriminator 1
 599 0320 6F00400E 		j	.L38
 600              	.LVL73:
 601              	.L3:
 602              	.LBB6:
 154:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 9)) {
 603              		.loc 1 154 9 is_stmt 1
 604 0324 033784FD 		ld	a4,-40(s0)
 605              	.LVL74:
 606 0328 9307F0FF 		li	a5,-1
 607 032c 9397F703 		slli	a5,a5,63
 608 0330 93879700 		addi	a5,a5,9
 609 0334 6318F700 		bne	a4,a5,.L33
 156:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
GAS LISTING /tmp/ccrNznQK.s 			page 17


 610              		.loc 1 156 3
 156:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
 611              		.loc 1 156 18 is_stmt 0
 612 0338 97000000 		call	console_handler@plt
 612      E7800000 
 613              	.LVL75:
 614              	.LBE6:
 615              		.loc 1 177 1
 616 0340 6F00400C 		j	.L38
 617              	.LVL76:
 618              	.L33:
 619              	.LBB7:
 157:src/interruptRoutine.cpp **** 		//prekid od tajmera
 620              		.loc 1 157 9 is_stmt 1
 621 0344 033784FD 		ld	a4,-40(s0)
 622 0348 9307F0FF 		li	a5,-1
 623 034c 9397F703 		slli	a5,a5,63
 624 0350 93871700 		addi	a5,a5,1
 625 0354 6318F70A 		bne	a4,a5,.L38
 159:src/interruptRoutine.cpp **** 		TCB::runningTimeSlice++;
 626              		.loc 1 159 3
 159:src/interruptRoutine.cpp **** 		TCB::runningTimeSlice++;
 627              		.loc 1 159 14 is_stmt 0
 628 0358 17050000 		lla	a0,.LC0
 628      13050500 
 629 0360 97000000 		call	_Z11printStringPKc@plt
 629      E7800000 
 630              	.LVL77:
 160:src/interruptRoutine.cpp **** 		if (TCB::runningTimeSlice >= TCB::running->getTimeSlice()) {
 631              		.loc 1 160 3 is_stmt 1
 160:src/interruptRoutine.cpp **** 		if (TCB::runningTimeSlice >= TCB::running->getTimeSlice()) {
 632              		.loc 1 160 24 is_stmt 0
 633 0368 97070000 		la	a5,_ZN3TCB16runningTimeSliceE
 633      83B70700 
 634 0370 83B70700 		ld	a5,0(a5)
 635 0374 13871700 		addi	a4,a5,1
 636 0378 97070000 		la	a5,_ZN3TCB16runningTimeSliceE
 636      83B70700 
 637 0380 23B0E700 		sd	a4,0(a5)
 161:src/interruptRoutine.cpp **** 			printString("\nMenjam kontekst\n");
 638              		.loc 1 161 3 is_stmt 1
 161:src/interruptRoutine.cpp **** 			printString("\nMenjam kontekst\n");
 639              		.loc 1 161 58 is_stmt 0
 640 0384 97070000 		la	a5,_ZN3TCB7runningE
 640      83B70700 
 641 038c 83B70700 		ld	a5,0(a5)
 642 0390 13850700 		mv	a0,a5
 643 0394 97000000 		call	_ZN3TCB12getTimeSliceEv
 643      E7800000 
 644              	.LVL78:
 645 039c 13070500 		mv	a4,a0
 161:src/interruptRoutine.cpp **** 			printString("\nMenjam kontekst\n");
 646              		.loc 1 161 29
 647 03a0 97070000 		la	a5,_ZN3TCB16runningTimeSliceE
 647      83B70700 
 648 03a8 83B70700 		ld	a5,0(a5)
 649 03ac B3B7E700 		sgtu	a5,a4,a5
GAS LISTING /tmp/ccrNznQK.s 			page 18


 650 03b0 93C71700 		xori	a5,a5,1
 651 03b4 93F7F70F 		andi	a5,a5,0xff
 161:src/interruptRoutine.cpp **** 			printString("\nMenjam kontekst\n");
 652              		.loc 1 161 3
 653 03b8 63840702 		beqz	a5,.L34
 162:src/interruptRoutine.cpp **** 			TCB::yield();
 654              		.loc 1 162 4 is_stmt 1
 162:src/interruptRoutine.cpp **** 			TCB::yield();
 655              		.loc 1 162 15 is_stmt 0
 656 03bc 17050000 		lla	a0,.LC1
 656      13050500 
 657 03c4 97000000 		call	_Z11printStringPKc@plt
 657      E7800000 
 658              	.LVL79:
 163:src/interruptRoutine.cpp **** 			TCB::runningTimeSlice = 0;
 659              		.loc 1 163 4 is_stmt 1
 163:src/interruptRoutine.cpp **** 			TCB::runningTimeSlice = 0;
 660              		.loc 1 163 14 is_stmt 0
 661 03cc 97000000 		call	_ZN3TCB5yieldEv@plt
 661      E7800000 
 662              	.LVL80:
 164:src/interruptRoutine.cpp **** 		}
 663              		.loc 1 164 4 is_stmt 1
 164:src/interruptRoutine.cpp **** 		}
 664              		.loc 1 164 26 is_stmt 0
 665 03d4 97070000 		la	a5,_ZN3TCB16runningTimeSliceE
 665      83B70700 
 666 03dc 23B00700 		sd	zero,0(a5)
 667              	.L34:
 167:src/interruptRoutine.cpp **** 		Riscv::w_sstatus(sstatus);
 668              		.loc 1 167 3 is_stmt 1
 167:src/interruptRoutine.cpp **** 		Riscv::w_sstatus(sstatus);
 669              		.loc 1 167 16 is_stmt 0
 670 03e0 033504FD 		ld	a0,-48(s0)
 671 03e4 97000000 		call	_ZN5Riscv6w_sepcEm
 671      E7800000 
 672              	.LVL81:
 168:src/interruptRoutine.cpp **** 		Riscv::mc_sip(Riscv::SIP_SSIP);
 673              		.loc 1 168 3 is_stmt 1
 168:src/interruptRoutine.cpp **** 		Riscv::mc_sip(Riscv::SIP_SSIP);
 674              		.loc 1 168 19 is_stmt 0
 675 03ec 033584FC 		ld	a0,-56(s0)
 676 03f0 97000000 		call	_ZN5Riscv9w_sstatusEm
 676      E7800000 
 677              	.LVL82:
 169:src/interruptRoutine.cpp **** 	} else {
 678              		.loc 1 169 3 is_stmt 1
 169:src/interruptRoutine.cpp **** 	} else {
 679              		.loc 1 169 16 is_stmt 0
 680 03f8 13052000 		li	a0,2
 681 03fc 97000000 		call	_ZN5Riscv6mc_sipEm
 681      E7800000 
 682              	.LVL83:
 683              	.L38:
 684              	.LBE7:
 685              		.loc 1 177 1
 686 0404 13000000 		nop
GAS LISTING /tmp/ccrNznQK.s 			page 19


 687 0408 8330810C 		ld	ra,200(sp)
 688              		.cfi_restore 1
 689 040c 0334010C 		ld	s0,192(sp)
 690              		.cfi_restore 8
 691              		.cfi_def_cfa 2, 208
 692              	.LVL84:
 693 0410 1301010D 		addi	sp,sp,208
 694              		.cfi_def_cfa_offset 0
 695              	.LVL85:
 696 0414 67800000 		jr	ra
 697              		.cfi_endproc
 698              	.LFE27:
 700              		.section	.text._ZN5Riscv6w_sepcEm,"axG",@progbits,_ZN5Riscv6w_sepcEm,comdat
 701              		.align	2
 702              		.weak	_ZN5Riscv6w_sepcEm
 704              	_ZN5Riscv6w_sepcEm:
 705              	.LFB6:
 706              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	static void popSppSpie();
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp **** 	//stavljanje registara x3-x31 na stek
  16:src/../h/Riscv.hpp **** 	static void pushRegisters();    //implementacija u asm
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp **** 	//skidanje registara x3-x31 sa steka
  19:src/../h/Riscv.hpp **** 	static void popRegisters();     //implementacija u asm
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp **** 	//read scause
  22:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp **** 	//write scause
  25:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp **** 	//read sepc
  28:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp **** 	//write sepc
  31:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp **** 	//read stvec
  34:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp **** 	//write stvec
  37:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp **** 	enum BitMaskSip {
GAS LISTING /tmp/ccrNznQK.s 			page 20


  40:src/../h/Riscv.hpp **** 		//postoji zahtev za softverski prekid
  41:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),
  42:src/../h/Riscv.hpp **** 		//postoji prekid od tajmera
  43:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),
  44:src/../h/Riscv.hpp **** 		//postoji zahtev za spoljasnji hardverski prekid
  45:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)
  46:src/../h/Riscv.hpp **** 	};
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp **** 	//mask set sip
  49:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** 	//mask clear sip
  52:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp **** 	//read sip
  55:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  56:src/../h/Riscv.hpp **** 
  57:src/../h/Riscv.hpp **** 	//write sip
  58:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  59:src/../h/Riscv.hpp **** 
  60:src/../h/Riscv.hpp **** 	//kada se pozove sret, SIE dobija vrednost SPIE, SPIE se postavlja na 1,
  61:src/../h/Riscv.hpp **** 	//rezim se postavlja na osnovu SPP bita, SPP se postavlja na 0
  62:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  63:src/../h/Riscv.hpp **** 		//1 - dozvoljeni prekidi; 0- nedozvoljeni prekidi; igonrise se u korisnickom rezimu
  64:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  65:src/../h/Riscv.hpp **** 		//prethodna vrednost bita SIE
  66:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  67:src/../h/Riscv.hpp **** 		//iz kog rezima se desio skok; 0 - iz korisnickog; 1 - iz sistemskog
  68:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  69:src/../h/Riscv.hpp **** 	};
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp **** 	//mask set sstatus
  72:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp **** 	//mask clear sstatus
  75:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp **** 	//read sstatus
  78:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp **** 	//write sstatus
  81:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  84:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  85:src/../h/Riscv.hpp **** 
  86:src/../h/Riscv.hpp **** };
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  89:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  90:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  91:src/../h/Riscv.hpp **** 	return scause;
  92:src/../h/Riscv.hpp **** }
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  95:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  96:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccrNznQK.s 			page 21


  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  99:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
 100:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
 101:src/../h/Riscv.hpp **** 	return sepc;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
 707              		.loc 2 104 40 is_stmt 1
 708              		.cfi_startproc
 709              	.LVL86:
 710 0000 130101FF 		addi	sp,sp,-16
 711              		.cfi_def_cfa_offset 16
 712 0004 23348100 		sd	s0,8(sp)
 713              		.cfi_offset 8, -8
 714 0008 13040101 		addi	s0,sp,16
 715              		.cfi_def_cfa 8, 0
 105:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 716              		.loc 2 105 2
 717              		.loc 2 105 59 is_stmt 0
 718              	#APP
 719              	# 105 "src/../h/Riscv.hpp" 1
 106              	}
 720              		csrw sepc, a0
 721              	# 0 "" 2
 722              		.loc 2 106 1
 723              	#NO_APP
 724 0010 03348100 		ld	s0,8(sp)
 725              		.cfi_restore 8
 726              		.cfi_def_cfa 2, 16
 727 0014 13010101 		addi	sp,sp,16
 728              		.cfi_def_cfa_offset 0
 729 0018 67800000 		jr	ra
 730              		.cfi_endproc
 731              	.LFE6:
 733              		.section	.text._ZN5Riscv6mc_sipEm,"axG",@progbits,_ZN5Riscv6mc_sipEm,comdat
 734              		.align	2
 735              		.weak	_ZN5Riscv6mc_sipEm
 737              	_ZN5Riscv6mc_sipEm:
 738              	.LFB10:
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 109:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 110:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 111:src/../h/Riscv.hpp **** 	return stvec;
 112:src/../h/Riscv.hpp **** }
 113:src/../h/Riscv.hpp **** 
 114:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 115:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 116:src/../h/Riscv.hpp **** }
 117:src/../h/Riscv.hpp **** 
 118:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 119:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 120:src/../h/Riscv.hpp **** }
 121:src/../h/Riscv.hpp **** 
 122:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 739              		.loc 2 122 40 is_stmt 1
GAS LISTING /tmp/ccrNznQK.s 			page 22


 740              		.cfi_startproc
 741              	.LVL87:
 742 0000 130101FF 		addi	sp,sp,-16
 743              		.cfi_def_cfa_offset 16
 744 0004 23348100 		sd	s0,8(sp)
 745              		.cfi_offset 8, -8
 746 0008 13040101 		addi	s0,sp,16
 747              		.cfi_def_cfa 8, 0
 123:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 748              		.loc 2 123 2
 749              		.loc 2 123 58 is_stmt 0
 750              	#APP
 751              	# 123 "src/../h/Riscv.hpp" 1
 124              	}
 752              		csrc sip, a0
 753              	# 0 "" 2
 754              		.loc 2 124 1
 755              	#NO_APP
 756 0010 03348100 		ld	s0,8(sp)
 757              		.cfi_restore 8
 758              		.cfi_def_cfa 2, 16
 759 0014 13010101 		addi	sp,sp,16
 760              		.cfi_def_cfa_offset 0
 761 0018 67800000 		jr	ra
 762              		.cfi_endproc
 763              	.LFE10:
 765              		.section	.text._ZN5Riscv9w_sstatusEm,"axG",@progbits,_ZN5Riscv9w_sstatusEm,comdat
 766              		.align	2
 767              		.weak	_ZN5Riscv9w_sstatusEm
 769              	_ZN5Riscv9w_sstatusEm:
 770              	.LFB16:
 125:src/../h/Riscv.hpp **** 
 126:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 127:src/../h/Riscv.hpp **** 	uint64 volatile sip;
 128:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sip], sip": [sip] "=r"(sip));
 129:src/../h/Riscv.hpp **** 	return sip;
 130:src/../h/Riscv.hpp **** }
 131:src/../h/Riscv.hpp **** 
 132:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 133:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sip, %[sip]": :[sip] "r"(sip));
 134:src/../h/Riscv.hpp **** }
 135:src/../h/Riscv.hpp **** 
 136:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 137:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sstatus, %[mask]": :[mask] "r"(mask));
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 141:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sstatus, %[mask]": :[mask] "r"(mask));
 142:src/../h/Riscv.hpp **** }
 143:src/../h/Riscv.hpp **** 
 144:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 145:src/../h/Riscv.hpp **** 	uint64 volatile sstatus;
 146:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sstatus], sstatus": [sstatus] "=r"(sstatus));
 147:src/../h/Riscv.hpp **** 	return sstatus;
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus) {
GAS LISTING /tmp/ccrNznQK.s 			page 23


 771              		.loc 2 150 46 is_stmt 1
 772              		.cfi_startproc
 773              	.LVL88:
 774 0000 130101FF 		addi	sp,sp,-16
 775              		.cfi_def_cfa_offset 16
 776 0004 23348100 		sd	s0,8(sp)
 777              		.cfi_offset 8, -8
 778 0008 13040101 		addi	s0,sp,16
 779              		.cfi_def_cfa 8, 0
 151:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sstatus, %[sstatus]": :[sstatus] "r"(sstatus));
 780              		.loc 2 151 2
 781              		.loc 2 151 71 is_stmt 0
 782              	#APP
 783              	# 151 "src/../h/Riscv.hpp" 1
 152              	}
 784              		csrw sstatus, a0
 785              	# 0 "" 2
 786              		.loc 2 152 1
 787              	#NO_APP
 788 0010 03348100 		ld	s0,8(sp)
 789              		.cfi_restore 8
 790              		.cfi_def_cfa 2, 16
 791 0014 13010101 		addi	sp,sp,16
 792              		.cfi_def_cfa_offset 0
 793 0018 67800000 		jr	ra
 794              		.cfi_endproc
 795              	.LFE16:
 797              		.section	.text._ZN3TCB11setFinishedEb,"axG",@progbits,_ZN3TCB11setFinishedEb,comdat
 798              		.align	2
 799              		.weak	_ZN3TCB11setFinishedEb
 801              	_ZN3TCB11setFinishedEb:
 802              	.LFB19:
 803              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 5/23/23.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJEKAT2023_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJEKAT2023_TCB_HPP
   7:src/../h/TCB.hpp **** 
   8:src/../h/TCB.hpp **** #include "../lib/hw.h"
   9:src/../h/TCB.hpp **** 
  10:src/../h/TCB.hpp **** class TCB {
  11:src/../h/TCB.hpp **** public:
  12:src/../h/TCB.hpp **** 	friend class Scheduler;
  13:src/../h/TCB.hpp **** 	using Body = void (*)(void*);
  14:src/../h/TCB.hpp **** 
  15:src/../h/TCB.hpp **** 	static TCB* createThread(Body function, void* args, uint64* stack);
  16:src/../h/TCB.hpp **** 
  17:src/../h/TCB.hpp **** 	bool isFinished() { return finished; }
  18:src/../h/TCB.hpp **** 
  19:src/../h/TCB.hpp **** 	void setFinished(bool finish) { this->finished = finish; }
 804              		.loc 3 19 7 is_stmt 1
 805              		.cfi_startproc
 806              	.LVL89:
 807 0000 130101FF 		addi	sp,sp,-16
 808              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccrNznQK.s 			page 24


 809 0004 23348100 		sd	s0,8(sp)
 810              		.cfi_offset 8, -8
 811 0008 13040101 		addi	s0,sp,16
 812              		.cfi_def_cfa 8, 0
 813              		.loc 3 19 34
 814              		.loc 3 19 49 is_stmt 0
 815 000c 2308B502 		sb	a1,48(a0)
 816              		.loc 3 19 59
 817 0010 03348100 		ld	s0,8(sp)
 818              		.cfi_restore 8
 819              		.cfi_def_cfa 2, 16
 820 0014 13010101 		addi	sp,sp,16
 821              		.cfi_def_cfa_offset 0
 822 0018 67800000 		jr	ra
 823              		.cfi_endproc
 824              	.LFE19:
 826              		.section	.text._ZN3TCB12getTimeSliceEv,"axG",@progbits,_ZN3TCB12getTimeSliceEv,comdat
 827              		.align	2
 828              		.weak	_ZN3TCB12getTimeSliceEv
 830              	_ZN3TCB12getTimeSliceEv:
 831              	.LFB22:
  20:src/../h/TCB.hpp **** 
  21:src/../h/TCB.hpp **** 	bool isBlocked() { return blocked; }
  22:src/../h/TCB.hpp **** 
  23:src/../h/TCB.hpp **** 	void setBlocked(bool block) { this->blocked = block; }
  24:src/../h/TCB.hpp **** 
  25:src/../h/TCB.hpp **** 	uint64 getTimeSlice() { return timeSlice; }
 832              		.loc 3 25 9 is_stmt 1
 833              		.cfi_startproc
 834              	.LVL90:
 835 0000 130101FF 		addi	sp,sp,-16
 836              		.cfi_def_cfa_offset 16
 837 0004 23348100 		sd	s0,8(sp)
 838              		.cfi_offset 8, -8
 839 0008 13040101 		addi	s0,sp,16
 840              		.cfi_def_cfa 8, 0
 841              		.loc 3 25 26
 842              		.loc 3 25 44 is_stmt 0
 843 000c 03358502 		ld	a0,40(a0)
 844              	.LVL91:
 845 0010 03348100 		ld	s0,8(sp)
 846              		.cfi_restore 8
 847              		.cfi_def_cfa 2, 16
 848 0014 13010101 		addi	sp,sp,16
 849              		.cfi_def_cfa_offset 0
 850 0018 67800000 		jr	ra
 851              		.cfi_endproc
 852              	.LFE22:
 854              		.data
 855              		.align	3
 858              	_ZZ16interruptRoutineE6digits:
 859 0000 30313233 		.string	"0123456789"
 859      34353637 
 859      383900
 860              		.text
 861              	.Letext0:
 862              		.file 4 "src/../lib/hw.h"
GAS LISTING /tmp/ccrNznQK.s 			page 25


 863              		.file 5 "src/../h/MemoryAllocator.hpp"
 864              		.file 6 "src/../h/syscall_c.hpp"
 865              		.file 7 "src/../lib/console.h"
 866              		.file 8 "src/../h/helper.hpp"
GAS LISTING /tmp/ccrNznQK.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 interruptRoutine.cpp
     /tmp/ccrNznQK.s:17     .text:0000000000000000 interruptRoutine
     /tmp/ccrNznQK.s:21     .text:0000000000000000 .L0 
     /tmp/ccrNznQK.s:22     .text:0000000000000000 .L0 
     /tmp/ccrNznQK.s:23     .text:0000000000000004 .L0 
     /tmp/ccrNznQK.s:26     .text:000000000000000c .L0 
     /tmp/ccrNznQK.s:27     .text:000000000000000c .L0 
     /tmp/ccrNznQK.s:29     .text:0000000000000010 .L0 
     /tmp/ccrNznQK.s:31     .text:0000000000000010 .L0 
     /tmp/ccrNznQK.s:32     .text:0000000000000010 .L0 
src/interruptRoutine.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccrNznQK.s:41     .text:0000000000000018 .L0 
src/interruptRoutine.cpp:17     .text:0000000000000018 .L0 
     /tmp/ccrNznQK.s:51     .text:0000000000000020 .L0 
src/interruptRoutine.cpp:19     .text:0000000000000020 .L0 
     /tmp/ccrNznQK.s:61     .text:0000000000000028 .L0 
     /tmp/ccrNznQK.s:62     .text:0000000000000028 .L0 
src/interruptRoutine.cpp:21     .text:0000000000000028 .L0 
     /tmp/ccrNznQK.s:72     .text:0000000000000030 .L0 
src/interruptRoutine.cpp:22     .text:0000000000000030 .L0 
     /tmp/ccrNznQK.s:82     .text:0000000000000038 .L0 
src/interruptRoutine.cpp:23     .text:0000000000000038 .L0 
     /tmp/ccrNznQK.s:92     .text:0000000000000040 .L0 
src/interruptRoutine.cpp:24     .text:0000000000000040 .L0 
     /tmp/ccrNznQK.s:102    .text:0000000000000048 .L0 
src/interruptRoutine.cpp:25     .text:0000000000000048 .L0 
     /tmp/ccrNznQK.s:112    .text:0000000000000050 .L0 
src/interruptRoutine.cpp:26     .text:0000000000000050 .L0 
     /tmp/ccrNznQK.s:122    .text:0000000000000058 .L0 
src/interruptRoutine.cpp:27     .text:0000000000000058 .L0 
     /tmp/ccrNznQK.s:132    .text:0000000000000060 .L0 
src/interruptRoutine.cpp:28     .text:0000000000000060 .L0 
     /tmp/ccrNznQK.s:143    .text:0000000000000068 .L0 
     /tmp/ccrNznQK.s:147    .text:0000000000000074 .L0 
     /tmp/ccrNznQK.s:153    .text:0000000000000080 .L0 
     /tmp/ccrNznQK.s:154    .text:0000000000000080 .L0 
     /tmp/ccrNznQK.s:159    .text:0000000000000088 .L0 
     /tmp/ccrNznQK.s:265    .text:00000000000000f8 .L0 
     /tmp/ccrNznQK.s:268    .text:00000000000000fc .L0 
     /tmp/ccrNznQK.s:269    .text:00000000000000fc .L0 
     /tmp/ccrNznQK.s:270    .text:00000000000000fc .L0 
     /tmp/ccrNznQK.s:271    .text:00000000000000fc .L0 
     /tmp/ccrNznQK.s:275    .text:0000000000000104 .L0 
     /tmp/ccrNznQK.s:276    .text:0000000000000104 .L0 
     /tmp/ccrNznQK.s:282    .text:0000000000000110 .L0 
     /tmp/ccrNznQK.s:283    .text:0000000000000110 .L0 
     /tmp/ccrNznQK.s:287    .text:000000000000011c .L0 
src/interruptRoutine.cpp:41     .text:000000000000011c .L0 
     /tmp/ccrNznQK.s:294    .text:0000000000000120 .L0 
     /tmp/ccrNznQK.s:298    .text:0000000000000124 .L0 
     /tmp/ccrNznQK.s:299    .text:0000000000000124 .L0 
     /tmp/ccrNznQK.s:300    .text:0000000000000124 .L0 
     /tmp/ccrNznQK.s:301    .text:0000000000000124 .L0 
     /tmp/ccrNznQK.s:305    .text:000000000000012c .L0 
     /tmp/ccrNznQK.s:306    .text:000000000000012c .L0 
     /tmp/ccrNznQK.s:310    .text:0000000000000138 .L0 
GAS LISTING /tmp/ccrNznQK.s 			page 27


src/interruptRoutine.cpp:49     .text:0000000000000138 .L0 
     /tmp/ccrNznQK.s:317    .text:000000000000013c .L0 
     /tmp/ccrNznQK.s:321    .text:0000000000000140 .L0 
     /tmp/ccrNznQK.s:322    .text:0000000000000140 .L0 
     /tmp/ccrNznQK.s:323    .text:0000000000000140 .L0 
     /tmp/ccrNznQK.s:324    .text:0000000000000140 .L0 
     /tmp/ccrNznQK.s:328    .text:0000000000000148 .L0 
     /tmp/ccrNznQK.s:329    .text:0000000000000148 .L0 
     /tmp/ccrNznQK.s:330    .text:0000000000000148 .L0 
     /tmp/ccrNznQK.s:335    .text:0000000000000150 .L0 
     /tmp/ccrNznQK.s:336    .text:0000000000000150 .L0 
     /tmp/ccrNznQK.s:337    .text:0000000000000150 .L0 
     /tmp/ccrNznQK.s:342    .text:0000000000000158 .L0 
     /tmp/ccrNznQK.s:343    .text:0000000000000158 .L0 
     /tmp/ccrNznQK.s:344    .text:0000000000000158 .L0 
     /tmp/ccrNznQK.s:349    .text:0000000000000160 .L0 
     /tmp/ccrNznQK.s:350    .text:0000000000000160 .L0 
     /tmp/ccrNznQK.s:357    .text:0000000000000178 .L0 
     /tmp/ccrNznQK.s:360    .text:0000000000000180 .L0 
     /tmp/ccrNznQK.s:361    .text:0000000000000180 .L0 
     /tmp/ccrNznQK.s:364    .text:0000000000000188 .L0 
     /tmp/ccrNznQK.s:366    .text:000000000000018c .L0 
src/interruptRoutine.cpp:64     .text:000000000000018c .L0 
     /tmp/ccrNznQK.s:375    .text:0000000000000194 .L0 
src/interruptRoutine.cpp:66     .text:0000000000000194 .L0 
     /tmp/ccrNznQK.s:383    .text:0000000000000198 .L0 
src/interruptRoutine.cpp:68     .text:0000000000000198 .L0 
     /tmp/ccrNznQK.s:390    .text:000000000000019c .L0 
     /tmp/ccrNznQK.s:394    .text:00000000000001a0 .L0 
     /tmp/ccrNznQK.s:395    .text:00000000000001a0 .L0 
     /tmp/ccrNznQK.s:396    .text:00000000000001a0 .L0 
     /tmp/ccrNznQK.s:801    .text._ZN3TCB11setFinishedEb:0000000000000000 _ZN3TCB11setFinishedEb
     /tmp/ccrNznQK.s:403    .text:00000000000001bc .L0 
     /tmp/ccrNznQK.s:404    .text:00000000000001bc .L0 
     /tmp/ccrNznQK.s:407    .text:00000000000001c4 .L0 
     /tmp/ccrNznQK.s:411    .text:00000000000001c8 .L0 
     /tmp/ccrNznQK.s:412    .text:00000000000001c8 .L0 
     /tmp/ccrNznQK.s:413    .text:00000000000001c8 .L0 
     /tmp/ccrNznQK.s:416    .text:00000000000001d0 .L0 
     /tmp/ccrNznQK.s:420    .text:00000000000001d4 .L0 
     /tmp/ccrNznQK.s:421    .text:00000000000001d4 .L0 
     /tmp/ccrNznQK.s:422    .text:00000000000001d4 .L0 
     /tmp/ccrNznQK.s:423    .text:00000000000001d4 .L0 
     /tmp/ccrNznQK.s:428    .text:00000000000001dc .L0 
     /tmp/ccrNznQK.s:429    .text:00000000000001dc .L0 
     /tmp/ccrNznQK.s:430    .text:00000000000001dc .L0 
     /tmp/ccrNznQK.s:433    .text:00000000000001e4 .L0 
     /tmp/ccrNznQK.s:435    .text:00000000000001e8 .L0 
     /tmp/ccrNznQK.s:436    .text:00000000000001e8 .L0 
     /tmp/ccrNznQK.s:442    .text:00000000000001fc .L0 
     /tmp/ccrNznQK.s:443    .text:00000000000001fc .L0 
     /tmp/ccrNznQK.s:448    .text:0000000000000208 .L0 
     /tmp/ccrNznQK.s:452    .text:000000000000020c .L0 
     /tmp/ccrNznQK.s:453    .text:000000000000020c .L0 
     /tmp/ccrNznQK.s:454    .text:000000000000020c .L0 
     /tmp/ccrNznQK.s:455    .text:000000000000020c .L0 
     /tmp/ccrNznQK.s:459    .text:0000000000000214 .L0 
GAS LISTING /tmp/ccrNznQK.s 			page 28


     /tmp/ccrNznQK.s:460    .text:0000000000000214 .L0 
     /tmp/ccrNznQK.s:461    .text:0000000000000214 .L0 
     /tmp/ccrNznQK.s:462    .text:0000000000000214 .L0 
     /tmp/ccrNznQK.s:463    .text:0000000000000214 .L0 
     /tmp/ccrNznQK.s:464    .text:0000000000000214 .L0 
     /tmp/ccrNznQK.s:467    .text:0000000000000218 .L0 
     /tmp/ccrNznQK.s:468    .text:0000000000000218 .L0 
     /tmp/ccrNznQK.s:469    .text:0000000000000218 .L0 
     /tmp/ccrNznQK.s:473    .text:0000000000000220 .L0 
     /tmp/ccrNznQK.s:474    .text:0000000000000220 .L0 
     /tmp/ccrNznQK.s:478    .text:0000000000000224 .L0 
     /tmp/ccrNznQK.s:479    .text:0000000000000224 .L0 
     /tmp/ccrNznQK.s:480    .text:0000000000000224 .L0 
     /tmp/ccrNznQK.s:485    .text:0000000000000234 .L0 
     /tmp/ccrNznQK.s:858    .data:0000000000000000 _ZZ16interruptRoutineE6digits
     /tmp/ccrNznQK.s:490    .text:0000000000000240 .L0 
     /tmp/ccrNznQK.s:497    .text:0000000000000258 .L0 
     /tmp/ccrNznQK.s:501    .text:0000000000000264 .L0 
     /tmp/ccrNznQK.s:502    .text:0000000000000264 .L0 
     /tmp/ccrNznQK.s:508    .text:0000000000000274 .L0 
     /tmp/ccrNznQK.s:515    .text:0000000000000288 .L0 
     /tmp/ccrNznQK.s:518    .text:000000000000028c .L0 
     /tmp/ccrNznQK.s:522    .text:0000000000000298 .L0 
     /tmp/ccrNznQK.s:523    .text:0000000000000298 .L0 
     /tmp/ccrNznQK.s:528    .text:00000000000002a4 .L0 
     /tmp/ccrNznQK.s:536    .text:00000000000002b4 .L0 
     /tmp/ccrNznQK.s:537    .text:00000000000002b4 .L0 
     /tmp/ccrNznQK.s:548    .text:00000000000002d4 .L0 
     /tmp/ccrNznQK.s:549    .text:00000000000002d4 .L0 
     /tmp/ccrNznQK.s:557    .text:00000000000002f0 .L0 
     /tmp/ccrNznQK.s:561    .text:00000000000002f4 .L0 
     /tmp/ccrNznQK.s:566    .text:00000000000002fc .L0 
     /tmp/ccrNznQK.s:571    .text:0000000000000304 .L0 
     /tmp/ccrNznQK.s:577    .text:0000000000000308 .L0 
     /tmp/ccrNznQK.s:578    .text:0000000000000308 .L0 
     /tmp/ccrNznQK.s:588    .text:0000000000000314 .L0 
     /tmp/ccrNznQK.s:589    .text:0000000000000314 .L0 
     /tmp/ccrNznQK.s:599    .text:0000000000000320 .L0 
     /tmp/ccrNznQK.s:604    .text:0000000000000324 .L0 
     /tmp/ccrNznQK.s:611    .text:0000000000000338 .L0 
     /tmp/ccrNznQK.s:612    .text:0000000000000338 .L0 
     /tmp/ccrNznQK.s:616    .text:0000000000000340 .L0 
     /tmp/ccrNznQK.s:621    .text:0000000000000344 .L0 
     /tmp/ccrNznQK.s:627    .text:0000000000000358 .L0 
     /tmp/ccrNznQK.s:628    .text:0000000000000358 .L0 
     /tmp/ccrNznQK.s:632    .text:0000000000000368 .L0 
     /tmp/ccrNznQK.s:633    .text:0000000000000368 .L0 
     /tmp/ccrNznQK.s:639    .text:0000000000000384 .L0 
     /tmp/ccrNznQK.s:640    .text:0000000000000384 .L0 
     /tmp/ccrNznQK.s:830    .text._ZN3TCB12getTimeSliceEv:0000000000000000 _ZN3TCB12getTimeSliceEv
     /tmp/ccrNznQK.s:647    .text:00000000000003a0 .L0 
     /tmp/ccrNznQK.s:653    .text:00000000000003b8 .L0 
     /tmp/ccrNznQK.s:655    .text:00000000000003bc .L0 
     /tmp/ccrNznQK.s:656    .text:00000000000003bc .L0 
     /tmp/ccrNznQK.s:660    .text:00000000000003cc .L0 
     /tmp/ccrNznQK.s:661    .text:00000000000003cc .L0 
     /tmp/ccrNznQK.s:664    .text:00000000000003d4 .L0 
GAS LISTING /tmp/ccrNznQK.s 			page 29


     /tmp/ccrNznQK.s:665    .text:00000000000003d4 .L0 
     /tmp/ccrNznQK.s:669    .text:00000000000003e0 .L0 
     /tmp/ccrNznQK.s:670    .text:00000000000003e0 .L0 
     /tmp/ccrNznQK.s:704    .text._ZN5Riscv6w_sepcEm:0000000000000000 _ZN5Riscv6w_sepcEm
     /tmp/ccrNznQK.s:674    .text:00000000000003ec .L0 
     /tmp/ccrNznQK.s:675    .text:00000000000003ec .L0 
     /tmp/ccrNznQK.s:769    .text._ZN5Riscv9w_sstatusEm:0000000000000000 _ZN5Riscv9w_sstatusEm
     /tmp/ccrNznQK.s:679    .text:00000000000003f8 .L0 
     /tmp/ccrNznQK.s:680    .text:00000000000003f8 .L0 
     /tmp/ccrNznQK.s:737    .text._ZN5Riscv6mc_sipEm:0000000000000000 _ZN5Riscv6mc_sipEm
     /tmp/ccrNznQK.s:686    .text:0000000000000404 .L0 
     /tmp/ccrNznQK.s:688    .text:000000000000040c .L0 
     /tmp/ccrNznQK.s:690    .text:0000000000000410 .L0 
     /tmp/ccrNznQK.s:691    .text:0000000000000410 .L0 
     /tmp/ccrNznQK.s:694    .text:0000000000000414 .L0 
     /tmp/ccrNznQK.s:697    .text:0000000000000418 .L0 
     /tmp/ccrNznQK.s:708    .text._ZN5Riscv6w_sepcEm:0000000000000000 .L0 
     /tmp/ccrNznQK.s:710    .text._ZN5Riscv6w_sepcEm:0000000000000000 .L0 
     /tmp/ccrNznQK.s:711    .text._ZN5Riscv6w_sepcEm:0000000000000004 .L0 
     /tmp/ccrNznQK.s:713    .text._ZN5Riscv6w_sepcEm:0000000000000008 .L0 
     /tmp/ccrNznQK.s:715    .text._ZN5Riscv6w_sepcEm:000000000000000c .L0 
     /tmp/ccrNznQK.s:717    .text._ZN5Riscv6w_sepcEm:000000000000000c .L0 
  src/../h/Riscv.hpp:105    .text._ZN5Riscv6w_sepcEm:000000000000000c .L0 
     /tmp/ccrNznQK.s:724    .text._ZN5Riscv6w_sepcEm:0000000000000010 .L0 
     /tmp/ccrNznQK.s:725    .text._ZN5Riscv6w_sepcEm:0000000000000014 .L0 
     /tmp/ccrNznQK.s:726    .text._ZN5Riscv6w_sepcEm:0000000000000014 .L0 
     /tmp/ccrNznQK.s:728    .text._ZN5Riscv6w_sepcEm:0000000000000018 .L0 
     /tmp/ccrNznQK.s:730    .text._ZN5Riscv6w_sepcEm:000000000000001c .L0 
     /tmp/ccrNznQK.s:740    .text._ZN5Riscv6mc_sipEm:0000000000000000 .L0 
     /tmp/ccrNznQK.s:742    .text._ZN5Riscv6mc_sipEm:0000000000000000 .L0 
     /tmp/ccrNznQK.s:743    .text._ZN5Riscv6mc_sipEm:0000000000000004 .L0 
     /tmp/ccrNznQK.s:745    .text._ZN5Riscv6mc_sipEm:0000000000000008 .L0 
     /tmp/ccrNznQK.s:747    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
     /tmp/ccrNznQK.s:749    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
  src/../h/Riscv.hpp:123    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
     /tmp/ccrNznQK.s:756    .text._ZN5Riscv6mc_sipEm:0000000000000010 .L0 
     /tmp/ccrNznQK.s:757    .text._ZN5Riscv6mc_sipEm:0000000000000014 .L0 
     /tmp/ccrNznQK.s:758    .text._ZN5Riscv6mc_sipEm:0000000000000014 .L0 
     /tmp/ccrNznQK.s:760    .text._ZN5Riscv6mc_sipEm:0000000000000018 .L0 
     /tmp/ccrNznQK.s:762    .text._ZN5Riscv6mc_sipEm:000000000000001c .L0 
     /tmp/ccrNznQK.s:772    .text._ZN5Riscv9w_sstatusEm:0000000000000000 .L0 
     /tmp/ccrNznQK.s:774    .text._ZN5Riscv9w_sstatusEm:0000000000000000 .L0 
     /tmp/ccrNznQK.s:775    .text._ZN5Riscv9w_sstatusEm:0000000000000004 .L0 
     /tmp/ccrNznQK.s:777    .text._ZN5Riscv9w_sstatusEm:0000000000000008 .L0 
     /tmp/ccrNznQK.s:779    .text._ZN5Riscv9w_sstatusEm:000000000000000c .L0 
     /tmp/ccrNznQK.s:781    .text._ZN5Riscv9w_sstatusEm:000000000000000c .L0 
  src/../h/Riscv.hpp:151    .text._ZN5Riscv9w_sstatusEm:000000000000000c .L0 
     /tmp/ccrNznQK.s:788    .text._ZN5Riscv9w_sstatusEm:0000000000000010 .L0 
     /tmp/ccrNznQK.s:789    .text._ZN5Riscv9w_sstatusEm:0000000000000014 .L0 
     /tmp/ccrNznQK.s:790    .text._ZN5Riscv9w_sstatusEm:0000000000000014 .L0 
     /tmp/ccrNznQK.s:792    .text._ZN5Riscv9w_sstatusEm:0000000000000018 .L0 
     /tmp/ccrNznQK.s:794    .text._ZN5Riscv9w_sstatusEm:000000000000001c .L0 
     /tmp/ccrNznQK.s:805    .text._ZN3TCB11setFinishedEb:0000000000000000 .L0 
     /tmp/ccrNznQK.s:807    .text._ZN3TCB11setFinishedEb:0000000000000000 .L0 
     /tmp/ccrNznQK.s:808    .text._ZN3TCB11setFinishedEb:0000000000000004 .L0 
     /tmp/ccrNznQK.s:810    .text._ZN3TCB11setFinishedEb:0000000000000008 .L0 
     /tmp/ccrNznQK.s:812    .text._ZN3TCB11setFinishedEb:000000000000000c .L0 
GAS LISTING /tmp/ccrNznQK.s 			page 30


     /tmp/ccrNznQK.s:814    .text._ZN3TCB11setFinishedEb:000000000000000c .L0 
     /tmp/ccrNznQK.s:815    .text._ZN3TCB11setFinishedEb:000000000000000c .L0 
     /tmp/ccrNznQK.s:817    .text._ZN3TCB11setFinishedEb:0000000000000010 .L0 
     /tmp/ccrNznQK.s:818    .text._ZN3TCB11setFinishedEb:0000000000000014 .L0 
     /tmp/ccrNznQK.s:819    .text._ZN3TCB11setFinishedEb:0000000000000014 .L0 
     /tmp/ccrNznQK.s:821    .text._ZN3TCB11setFinishedEb:0000000000000018 .L0 
     /tmp/ccrNznQK.s:823    .text._ZN3TCB11setFinishedEb:000000000000001c .L0 
     /tmp/ccrNznQK.s:833    .text._ZN3TCB12getTimeSliceEv:0000000000000000 .L0 
     /tmp/ccrNznQK.s:835    .text._ZN3TCB12getTimeSliceEv:0000000000000000 .L0 
     /tmp/ccrNznQK.s:836    .text._ZN3TCB12getTimeSliceEv:0000000000000004 .L0 
     /tmp/ccrNznQK.s:838    .text._ZN3TCB12getTimeSliceEv:0000000000000008 .L0 
     /tmp/ccrNznQK.s:840    .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/ccrNznQK.s:842    .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/ccrNznQK.s:843    .text._ZN3TCB12getTimeSliceEv:000000000000000c .L0 
     /tmp/ccrNznQK.s:846    .text._ZN3TCB12getTimeSliceEv:0000000000000014 .L0 
     /tmp/ccrNznQK.s:847    .text._ZN3TCB12getTimeSliceEv:0000000000000014 .L0 
     /tmp/ccrNznQK.s:849    .text._ZN3TCB12getTimeSliceEv:0000000000000018 .L0 
     /tmp/ccrNznQK.s:851    .text._ZN3TCB12getTimeSliceEv:000000000000001c .L0 
     /tmp/ccrNznQK.s:867    .text:0000000000000418 .L0 
     /tmp/ccrNznQK.s:733    .text._ZN5Riscv6w_sepcEm:000000000000001c .L0 
     /tmp/ccrNznQK.s:765    .text._ZN5Riscv6mc_sipEm:000000000000001c .L0 
     /tmp/ccrNznQK.s:797    .text._ZN5Riscv9w_sstatusEm:000000000000001c .L0 
     /tmp/ccrNznQK.s:826    .text._ZN3TCB11setFinishedEb:000000000000001c .L0 
     /tmp/ccrNznQK.s:854    .text._ZN3TCB12getTimeSliceEv:000000000000001c .L0 
     /tmp/ccrNznQK.s:188    .rodata:000000000000002c .L8
     /tmp/ccrNznQK.s:177    .text:00000000000000c8 .L0 
     /tmp/ccrNznQK.s:182    .text:00000000000000dc .L0 
     /tmp/ccrNznQK.s:396    .text:00000000000001a0 .L0 
     /tmp/ccrNznQK.s:490    .text:0000000000000240 .L0 
     /tmp/ccrNznQK.s:8      .rodata:0000000000000000 .LC0
     /tmp/ccrNznQK.s:628    .text:0000000000000358 .L0 
     /tmp/ccrNznQK.s:633    .text:0000000000000368 .L0 
     /tmp/ccrNznQK.s:636    .text:0000000000000378 .L0 
     /tmp/ccrNznQK.s:640    .text:0000000000000384 .L0 
     /tmp/ccrNznQK.s:647    .text:00000000000003a0 .L0 
     /tmp/ccrNznQK.s:11     .rodata:0000000000000018 .LC1
     /tmp/ccrNznQK.s:656    .text:00000000000003bc .L0 
     /tmp/ccrNznQK.s:665    .text:00000000000003d4 .L0 
     /tmp/ccrNznQK.s:150    .text:0000000000000080 .L2
     /tmp/ccrNznQK.s:601    .text:0000000000000324 .L3
     /tmp/ccrNznQK.s:450    .text:000000000000020c .L4
     /tmp/ccrNznQK.s:559    .text:00000000000002f4 .L35
     /tmp/ccrNznQK.s:258    .text:00000000000000ec .L6
     /tmp/ccrNznQK.s:418    .text:00000000000001d4 .L21
     /tmp/ccrNznQK.s:573    .text:0000000000000308 .L22
     /tmp/ccrNznQK.s:373    .text:0000000000000194 .L23
     /tmp/ccrNznQK.s:381    .text:0000000000000198 .L24
     /tmp/ccrNznQK.s:564    .text:00000000000002fc .L36
     /tmp/ccrNznQK.s:426    .text:00000000000001dc .L26
     /tmp/ccrNznQK.s:516    .text:000000000000028c .L27
     /tmp/ccrNznQK.s:476    .text:0000000000000224 .L28
     /tmp/ccrNznQK.s:534    .text:00000000000002b4 .L31
     /tmp/ccrNznQK.s:569    .text:0000000000000304 .L37
     /tmp/ccrNznQK.s:683    .text:0000000000000404 .L38
     /tmp/ccrNznQK.s:618    .text:0000000000000344 .L33
     /tmp/ccrNznQK.s:667    .text:00000000000003e0 .L34
     /tmp/ccrNznQK.s:266    .text:00000000000000fc .L20
GAS LISTING /tmp/ccrNznQK.s 			page 31


     /tmp/ccrNznQK.s:296    .text:0000000000000124 .L19
     /tmp/ccrNznQK.s:319    .text:0000000000000140 .L18
     /tmp/ccrNznQK.s:392    .text:00000000000001a0 .L17
     /tmp/ccrNznQK.s:409    .text:00000000000001c8 .L16
     /tmp/ccrNznQK.s:2142   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccrNznQK.s:3982   .debug_str:000000000000068e .LASF133
     /tmp/ccrNznQK.s:3844   .debug_str:00000000000002f0 .LASF134
     /tmp/ccrNznQK.s:3836   .debug_str:00000000000002a1 .LASF135
     /tmp/ccrNznQK.s:3726   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccrNznQK.s:3742   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccrNznQK.s:3788   .debug_str:0000000000000110 .LASF3
     /tmp/ccrNznQK.s:3894   .debug_str:000000000000047b .LASF0
     /tmp/ccrNznQK.s:3916   .debug_str:00000000000004d3 .LASF1
     /tmp/ccrNznQK.s:3878   .debug_str:00000000000003f8 .LASF2
     /tmp/ccrNznQK.s:3850   .debug_str:0000000000000339 .LASF4
     /tmp/ccrNznQK.s:3960   .debug_str:00000000000005fd .LASF5
     /tmp/ccrNznQK.s:3774   .debug_str:00000000000000bb .LASF6
     /tmp/ccrNznQK.s:3800   .debug_str:000000000000016c .LASF7
     /tmp/ccrNznQK.s:3920   .debug_str:00000000000004ed .LASF8
     /tmp/ccrNznQK.s:3892   .debug_str:0000000000000468 .LASF9
     /tmp/ccrNznQK.s:3994   .debug_str:0000000000000794 .LASF10
     /tmp/ccrNznQK.s:3834   .debug_str:0000000000000293 .LASF11
     /tmp/ccrNznQK.s:3936   .debug_str:0000000000000546 .LASF12
     /tmp/ccrNznQK.s:3984   .debug_str:0000000000000752 .LASF13
     /tmp/ccrNznQK.s:3776   .debug_str:00000000000000c2 .LASF14
     /tmp/ccrNznQK.s:3752   .debug_str:000000000000003b .LASF15
     /tmp/ccrNznQK.s:3782   .debug_str:00000000000000f4 .LASF16
     /tmp/ccrNznQK.s:3954   .debug_str:00000000000005c9 .LASF17
     /tmp/ccrNznQK.s:3794   .debug_str:000000000000012b .LASF18
     /tmp/ccrNznQK.s:3874   .debug_str:00000000000003dd .LASF32
     /tmp/ccrNznQK.s:3990   .debug_str:0000000000000778 .LASF22
     /tmp/ccrNznQK.s:4020   .debug_str:000000000000085f .LASF19
     /tmp/ccrNznQK.s:4006   .debug_str:00000000000007e6 .LASF20
     /tmp/ccrNznQK.s:3976   .debug_str:0000000000000670 .LASF21
     /tmp/ccrNznQK.s:3852   .debug_str:0000000000000340 .LASF23
     /tmp/ccrNznQK.s:3988   .debug_str:0000000000000770 .LASF24
     /tmp/ccrNznQK.s:3952   .debug_str:00000000000005aa .LASF26
     /tmp/ccrNznQK.s:3934   .debug_str:0000000000000540 .LASF25
     /tmp/ccrNznQK.s:3750   .debug_str:000000000000001d .LASF27
     /tmp/ccrNznQK.s:3806   .debug_str:0000000000000196 .LASF44
     /tmp/ccrNznQK.s:3746   .debug_str:0000000000000009 .LASF28
     /tmp/ccrNznQK.s:4016   .debug_str:0000000000000848 .LASF29
     /tmp/ccrNznQK.s:3932   .debug_str:0000000000000534 .LASF30
     /tmp/ccrNznQK.s:3814   .debug_str:00000000000001e8 .LASF72
     /tmp/ccrNznQK.s:3886   .debug_str:0000000000000423 .LASF74
     /tmp/ccrNznQK.s:3820   .debug_str:000000000000021a .LASF31
     /tmp/ccrNznQK.s:3912   .debug_str:00000000000004c2 .LASF33
     /tmp/ccrNznQK.s:3864   .debug_str:0000000000000381 .LASF136
     /tmp/ccrNznQK.s:3970   .debug_str:0000000000000644 .LASF34
     /tmp/ccrNznQK.s:3910   .debug_str:00000000000004b9 .LASF35
     /tmp/ccrNznQK.s:3858   .debug_str:0000000000000363 .LASF36
     /tmp/ccrNznQK.s:3950   .debug_str:000000000000059f .LASF37
     /tmp/ccrNznQK.s:4014   .debug_str:0000000000000830 .LASF39
     /tmp/ccrNznQK.s:3770   .debug_str:00000000000000a1 .LASF38
     /tmp/ccrNznQK.s:3812   .debug_str:00000000000001cd .LASF40
     /tmp/ccrNznQK.s:3972   .debug_str:000000000000064d .LASF41
     /tmp/ccrNznQK.s:3848   .debug_str:000000000000031f .LASF42
GAS LISTING /tmp/ccrNznQK.s 			page 32


     /tmp/ccrNznQK.s:3754   .debug_str:000000000000004b .LASF46
     /tmp/ccrNznQK.s:3816   .debug_str:00000000000001f2 .LASF48
     /tmp/ccrNznQK.s:3810   .debug_str:00000000000001c4 .LASF43
     /tmp/ccrNznQK.s:3808   .debug_str:00000000000001af .LASF45
     /tmp/ccrNznQK.s:3962   .debug_str:000000000000060f .LASF47
     /tmp/ccrNznQK.s:3940   .debug_str:0000000000000561 .LASF49
     /tmp/ccrNznQK.s:3980   .debug_str:0000000000000687 .LASF50
     /tmp/ccrNznQK.s:3832   .debug_str:0000000000000280 .LASF51
     /tmp/ccrNznQK.s:3824   .debug_str:0000000000000232 .LASF52
     /tmp/ccrNznQK.s:3796   .debug_str:0000000000000141 .LASF53
     /tmp/ccrNznQK.s:3748   .debug_str:0000000000000015 .LASF54
     /tmp/ccrNznQK.s:3840   .debug_str:00000000000002d5 .LASF55
     /tmp/ccrNznQK.s:3896   .debug_str:0000000000000488 .LASF56
     /tmp/ccrNznQK.s:4010   .debug_str:00000000000007fb .LASF57
     /tmp/ccrNznQK.s:3766   .debug_str:000000000000008a .LASF58
     /tmp/ccrNznQK.s:3822   .debug_str:000000000000021f .LASF59
     /tmp/ccrNznQK.s:3830   .debug_str:000000000000027a .LASF60
     /tmp/ccrNznQK.s:3978   .debug_str:0000000000000675 .LASF61
     /tmp/ccrNznQK.s:3762   .debug_str:000000000000006d .LASF62
     /tmp/ccrNznQK.s:4026   .debug_str:0000000000000884 .LASF63
     /tmp/ccrNznQK.s:4018   .debug_str:0000000000000854 .LASF64
     /tmp/ccrNznQK.s:3958   .debug_str:00000000000005e5 .LASF65
     /tmp/ccrNznQK.s:3914   .debug_str:00000000000004c8 .LASF66
     /tmp/ccrNznQK.s:3866   .debug_str:000000000000038c .LASF67
     /tmp/ccrNznQK.s:3780   .debug_str:00000000000000ea .LASF68
     /tmp/ccrNznQK.s:3846   .debug_str:0000000000000309 .LASF69
     /tmp/ccrNznQK.s:3884   .debug_str:0000000000000419 .LASF70
     /tmp/ccrNznQK.s:3838   .debug_str:00000000000002bf .LASF71
     /tmp/ccrNznQK.s:3784   .debug_str:0000000000000100 .LASF73
     /tmp/ccrNznQK.s:4022   .debug_str:0000000000000864 .LASF75
     /tmp/ccrNznQK.s:3744   .debug_str:0000000000000000 .LASF76
     /tmp/ccrNznQK.s:3760   .debug_str:0000000000000065 .LASF137
     /tmp/ccrNznQK.s:3862   .debug_str:0000000000000374 .LASF77
     /tmp/ccrNznQK.s:4012   .debug_str:000000000000080e .LASF78
     /tmp/ccrNznQK.s:3946   .debug_str:000000000000058d .LASF138
     /tmp/ccrNznQK.s:3922   .debug_str:0000000000000500 .LASF81
     /tmp/ccrNznQK.s:3868   .debug_str:00000000000003a4 .LASF83
     /tmp/ccrNznQK.s:3880   .debug_str:0000000000000406 .LASF79
     /tmp/ccrNznQK.s:3798   .debug_str:0000000000000155 .LASF80
     /tmp/ccrNznQK.s:3758   .debug_str:000000000000005b .LASF82
     /tmp/ccrNznQK.s:3928   .debug_str:0000000000000519 .LASF84
     /tmp/ccrNznQK.s:3854   .debug_str:000000000000034f .LASF85
     /tmp/ccrNznQK.s:3870   .debug_str:00000000000003ba .LASF86
     /tmp/ccrNznQK.s:3872   .debug_str:00000000000003d0 .LASF87
     /tmp/ccrNznQK.s:3778   .debug_str:00000000000000d2 .LASF88
     /tmp/ccrNznQK.s:3992   .debug_str:0000000000000787 .LASF89
     /tmp/ccrNznQK.s:3996   .debug_str:00000000000007a4 .LASF90
     /tmp/ccrNznQK.s:3968   .debug_str:0000000000000638 .LASF91
     /tmp/ccrNznQK.s:3764   .debug_str:0000000000000073 .LASF92
     /tmp/ccrNznQK.s:3876   .debug_str:00000000000003ed .LASF93
     /tmp/ccrNznQK.s:3826   .debug_str:000000000000023a .LASF94
     /tmp/ccrNznQK.s:3956   .debug_str:00000000000005df .LASF95
     /tmp/ccrNznQK.s:4008   .debug_str:00000000000007eb .LASF96
     /tmp/ccrNznQK.s:3898   .debug_str:000000000000048f .LASF97
     /tmp/ccrNznQK.s:3818   .debug_str:0000000000000207 .LASF98
     /tmp/ccrNznQK.s:4024   .debug_str:000000000000087c .LASF99
     /tmp/ccrNznQK.s:3964   .debug_str:0000000000000616 .LASF100
GAS LISTING /tmp/ccrNznQK.s 			page 33


     /tmp/ccrNznQK.s:4004   .debug_str:00000000000007de .LASF101
     /tmp/ccrNznQK.s:3942   .debug_str:0000000000000574 .LASF102
     /tmp/ccrNznQK.s:3860   .debug_str:000000000000036c .LASF103
     /tmp/ccrNznQK.s:3986   .debug_str:0000000000000761 .LASF104
     /tmp/ccrNznQK.s:3900   .debug_str:0000000000000498 .LASF105
     /tmp/ccrNznQK.s:3902   .debug_str:000000000000049e .LASF106
     /tmp/ccrNznQK.s:3906   .debug_str:00000000000004a8 .LASF107
     /tmp/ccrNznQK.s:3856   .debug_str:000000000000035a .LASF108
     /tmp/ccrNznQK.s:3890   .debug_str:0000000000000460 .LASF109
     /tmp/ccrNznQK.s:3768   .debug_str:0000000000000091 .LASF110
     /tmp/ccrNznQK.s:3974   .debug_str:000000000000065a .LASF139
     /tmp/ccrNznQK.s:3998   .debug_str:00000000000007bc .LASF111
     /tmp/ccrNznQK.s:3828   .debug_str:0000000000000252 .LASF112
     /tmp/ccrNznQK.s:4002   .debug_str:00000000000007d1 .LASF113
     /tmp/ccrNznQK.s:3772   .debug_str:00000000000000af .LASF114
     /tmp/ccrNznQK.s:3966   .debug_str:0000000000000628 .LASF140
     /tmp/ccrNznQK.s:3948   .debug_str:0000000000000592 .LASF141
     /tmp/ccrNznQK.s:3790   .debug_str:0000000000000115 .LASF115
     /tmp/ccrNznQK.s:18     .text:0000000000000000 .LFB27
     /tmp/ccrNznQK.s:698    .text:0000000000000418 .LFE27
     /tmp/ccrNznQK.s:3756   .debug_str:0000000000000054 .LASF116
     /tmp/ccrNznQK.s:3091   .debug_loc:0000000000000000 .LLST0
     /tmp/ccrNznQK.s:3904   .debug_str:00000000000004a3 .LASF117
     /tmp/ccrNznQK.s:3122   .debug_loc:0000000000000087 .LLST1
     /tmp/ccrNznQK.s:3944   .debug_str:0000000000000585 .LASF118
     /tmp/ccrNznQK.s:3153   .debug_loc:000000000000010e .LLST2
     /tmp/ccrNznQK.s:3175   .debug_loc:000000000000016e .LLST3
     /tmp/ccrNznQK.s:3197   .debug_loc:00000000000001ce .LLST4
     /tmp/ccrNznQK.s:3219   .debug_loc:0000000000000230 .LLST5
     /tmp/ccrNznQK.s:3241   .debug_loc:0000000000000292 .LLST6
     /tmp/ccrNznQK.s:3263   .debug_loc:00000000000002f4 .LLST7
     /tmp/ccrNznQK.s:3285   .debug_loc:0000000000000356 .LLST8
     /tmp/ccrNznQK.s:3307   .debug_loc:00000000000003b8 .LLST9
     /tmp/ccrNznQK.s:3329   .debug_loc:000000000000041a .LLST10
     /tmp/ccrNznQK.s:151    .text:0000000000000080 .LBB3
     /tmp/ccrNznQK.s:595    .text:000000000000031c .LBE3
     /tmp/ccrNznQK.s:3918   .debug_str:00000000000004e6 .LASF119
     /tmp/ccrNznQK.s:3432   .debug_loc:00000000000005e4 .LLST11
     /tmp/ccrNznQK.s:263    .text:00000000000000f8 .LBB5
     /tmp/ccrNznQK.s:574    .text:0000000000000308 .LBE5
     /tmp/ccrNznQK.s:3490   .debug_loc:00000000000006e2 .LLST12
     /tmp/ccrNznQK.s:3511   .debug_loc:0000000000000742 .LLST13
     /tmp/ccrNznQK.s:3882   .debug_str:0000000000000412 .LASF120
     /tmp/ccrNznQK.s:3523   .debug_loc:000000000000077a .LLST14
     /tmp/ccrNznQK.s:3926   .debug_str:0000000000000510 .LASF121
     /tmp/ccrNznQK.s:3535   .debug_loc:00000000000007b2 .LLST15
     /tmp/ccrNznQK.s:3547   .debug_loc:00000000000007ea .LLST16
     /tmp/ccrNznQK.s:3559   .debug_loc:0000000000000822 .LLST17
     /tmp/ccrNznQK.s:4000   .debug_str:00000000000007ca .LASF122
     /tmp/ccrNznQK.s:3571   .debug_loc:000000000000085a .LLST18
     /tmp/ccrNznQK.s:3888   .debug_str:0000000000000458 .LASF123
     /tmp/ccrNznQK.s:3588   .debug_loc:00000000000008a5 .LLST19
     /tmp/ccrNznQK.s:3842   .debug_str:00000000000002e9 .LASF124
     /tmp/ccrNznQK.s:3610   .debug_loc:0000000000000907 .LLST20
     /tmp/ccrNznQK.s:3650   .debug_loc:00000000000009b4 .LLST21
     /tmp/ccrNznQK.s:3663   .debug_loc:00000000000009ee .LLST22
     /tmp/ccrNznQK.s:285    .text:000000000000011c .LVL30
GAS LISTING /tmp/ccrNznQK.s 			page 34


     /tmp/ccrNznQK.s:308    .text:0000000000000138 .LVL33
     /tmp/ccrNznQK.s:354    .text:0000000000000174 .LVL42
     /tmp/ccrNznQK.s:401    .text:00000000000001bc .LVL44
     /tmp/ccrNznQK.s:405    .text:00000000000001c4 .LVL45
     /tmp/ccrNznQK.s:414    .text:00000000000001d0 .LVL47
     /tmp/ccrNznQK.s:440    .text:00000000000001fc .LVL50
     /tmp/ccrNznQK.s:555    .text:00000000000002f0 .LVL66
     /tmp/ccrNznQK.s:613    .text:0000000000000340 .LVL75
     /tmp/ccrNznQK.s:630    .text:0000000000000368 .LVL77
     /tmp/ccrNznQK.s:644    .text:000000000000039c .LVL78
     /tmp/ccrNznQK.s:658    .text:00000000000003cc .LVL79
     /tmp/ccrNznQK.s:662    .text:00000000000003d4 .LVL80
     /tmp/ccrNznQK.s:672    .text:00000000000003ec .LVL81
     /tmp/ccrNznQK.s:677    .text:00000000000003f8 .LVL82
     /tmp/ccrNznQK.s:682    .text:0000000000000404 .LVL83
     /tmp/ccrNznQK.s:3924   .debug_str:000000000000050b .LASF125
     /tmp/ccrNznQK.s:831    .text._ZN3TCB12getTimeSliceEv:0000000000000000 .LFB22
     /tmp/ccrNznQK.s:852    .text._ZN3TCB12getTimeSliceEv:000000000000001c .LFE22
     /tmp/ccrNznQK.s:3792   .debug_str:0000000000000126 .LASF126
     /tmp/ccrNznQK.s:3689   .debug_loc:0000000000000a60 .LLST23
     /tmp/ccrNznQK.s:802    .text._ZN3TCB11setFinishedEb:0000000000000000 .LFB19
     /tmp/ccrNznQK.s:824    .text._ZN3TCB11setFinishedEb:000000000000001c .LFE19
     /tmp/ccrNznQK.s:3908   .debug_str:00000000000004b2 .LASF127
     /tmp/ccrNznQK.s:770    .text._ZN5Riscv9w_sstatusEm:0000000000000000 .LFB16
     /tmp/ccrNznQK.s:795    .text._ZN5Riscv9w_sstatusEm:000000000000001c .LFE16
     /tmp/ccrNznQK.s:738    .text._ZN5Riscv6mc_sipEm:0000000000000000 .LFB10
     /tmp/ccrNznQK.s:763    .text._ZN5Riscv6mc_sipEm:000000000000001c .LFE10
     /tmp/ccrNznQK.s:3786   .debug_str:000000000000010b .LASF128
     /tmp/ccrNznQK.s:705    .text._ZN5Riscv6w_sepcEm:0000000000000000 .LFB6
     /tmp/ccrNznQK.s:731    .text._ZN5Riscv6w_sepcEm:000000000000001c .LFE6
     /tmp/ccrNznQK.s:3930   .debug_str:000000000000052d .LASF129
     /tmp/ccrNznQK.s:3804   .debug_str:0000000000000186 .LASF130
     /tmp/ccrNznQK.s:3802   .debug_str:0000000000000173 .LASF131
     /tmp/ccrNznQK.s:3938   .debug_str:0000000000000555 .LASF132
     /tmp/ccrNznQK.s:39     .text:0000000000000018 .LVL0
     /tmp/ccrNznQK.s:46     .text:000000000000001c .LVL1
     /tmp/ccrNznQK.s:600    .text:0000000000000324 .LVL73
     /tmp/ccrNznQK.s:605    .text:0000000000000328 .LVL74
     /tmp/ccrNznQK.s:692    .text:0000000000000410 .LVL84
     /tmp/ccrNznQK.s:695    .text:0000000000000414 .LVL85
     /tmp/ccrNznQK.s:49     .text:0000000000000020 .LVL2
     /tmp/ccrNznQK.s:56     .text:0000000000000024 .LVL3
     /tmp/ccrNznQK.s:583    .text:0000000000000310 .LVL71
     /tmp/ccrNznQK.s:586    .text:0000000000000314 .LVL72
     /tmp/ccrNznQK.s:59     .text:0000000000000028 .LVL4
     /tmp/ccrNznQK.s:67     .text:000000000000002c .LVL5
     /tmp/ccrNznQK.s:70     .text:0000000000000030 .LVL6
     /tmp/ccrNznQK.s:77     .text:0000000000000034 .LVL7
     /tmp/ccrNznQK.s:80     .text:0000000000000038 .LVL8
     /tmp/ccrNznQK.s:87     .text:000000000000003c .LVL9
     /tmp/ccrNznQK.s:90     .text:0000000000000040 .LVL10
     /tmp/ccrNznQK.s:97     .text:0000000000000044 .LVL11
     /tmp/ccrNznQK.s:100    .text:0000000000000048 .LVL12
     /tmp/ccrNznQK.s:107    .text:000000000000004c .LVL13
     /tmp/ccrNznQK.s:110    .text:0000000000000050 .LVL14
     /tmp/ccrNznQK.s:117    .text:0000000000000054 .LVL15
     /tmp/ccrNznQK.s:120    .text:0000000000000058 .LVL16
GAS LISTING /tmp/ccrNznQK.s 			page 35


     /tmp/ccrNznQK.s:127    .text:000000000000005c .LVL17
     /tmp/ccrNznQK.s:130    .text:0000000000000060 .LVL18
     /tmp/ccrNznQK.s:137    .text:0000000000000064 .LVL19
     /tmp/ccrNznQK.s:140    .text:0000000000000068 .LVL20
     /tmp/ccrNznQK.s:295    .text:0000000000000124 .LVL31
     /tmp/ccrNznQK.s:318    .text:0000000000000140 .LVL34
     /tmp/ccrNznQK.s:391    .text:00000000000001a0 .LVL43
     /tmp/ccrNznQK.s:408    .text:00000000000001c8 .LVL46
     /tmp/ccrNznQK.s:417    .text:00000000000001d4 .LVL48
     /tmp/ccrNznQK.s:425    .text:00000000000001dc .LVL49
     /tmp/ccrNznQK.s:449    .text:000000000000020c .LVL52
     /tmp/ccrNznQK.s:533    .text:00000000000002b4 .LVL63
     /tmp/ccrNznQK.s:558    .text:00000000000002f4 .LVL67
     /tmp/ccrNznQK.s:563    .text:00000000000002fc .LVL68
     /tmp/ccrNznQK.s:617    .text:0000000000000344 .LVL76
     /tmp/ccrNznQK.s:156    .text:0000000000000088 .LVL21
     /tmp/ccrNznQK.s:161    .text:0000000000000090 .LVL22
     /tmp/ccrNznQK.s:176    .text:00000000000000c8 .LVL23
     /tmp/ccrNznQK.s:178    .text:00000000000000d0 .LVL24
     /tmp/ccrNznQK.s:257    .text:00000000000000ec .LVL25
     /tmp/ccrNznQK.s:260    .text:00000000000000f0 .LVL26
     /tmp/ccrNznQK.s:475    .text:0000000000000224 .LVL56
     /tmp/ccrNznQK.s:273    .text:0000000000000104 .LVL27
     /tmp/ccrNznQK.s:278    .text:000000000000010c .LVL28
     /tmp/ccrNznQK.s:280    .text:0000000000000110 .LVL29
     /tmp/ccrNznQK.s:303    .text:000000000000012c .LVL32
     /tmp/ccrNznQK.s:326    .text:0000000000000148 .LVL35
     /tmp/ccrNznQK.s:331    .text:000000000000014c .LVL36
     /tmp/ccrNznQK.s:333    .text:0000000000000150 .LVL37
     /tmp/ccrNznQK.s:338    .text:0000000000000154 .LVL38
     /tmp/ccrNznQK.s:340    .text:0000000000000158 .LVL39
     /tmp/ccrNznQK.s:345    .text:000000000000015c .LVL40
     /tmp/ccrNznQK.s:347    .text:0000000000000160 .LVL41
     /tmp/ccrNznQK.s:446    .text:0000000000000208 .LVL51
     /tmp/ccrNznQK.s:568    .text:0000000000000304 .LVL69
     /tmp/ccrNznQK.s:457    .text:0000000000000214 .LVL53
     /tmp/ccrNznQK.s:572    .text:0000000000000308 .LVL70
     /tmp/ccrNznQK.s:488    .text:0000000000000240 .LVL57
     /tmp/ccrNznQK.s:493    .text:0000000000000250 .LVL58
     /tmp/ccrNznQK.s:526    .text:00000000000002a4 .LVL61
     /tmp/ccrNznQK.s:529    .text:00000000000002a8 .LVL62
     /tmp/ccrNznQK.s:540    .text:00000000000002c0 .LVL64
     /tmp/ccrNznQK.s:543    .text:00000000000002c8 .LVL65
     /tmp/ccrNznQK.s:465    .text:0000000000000218 .LVL54
     /tmp/ccrNznQK.s:471    .text:0000000000000220 .LVL55
     /tmp/ccrNznQK.s:506    .text:0000000000000274 .LVL59
     /tmp/ccrNznQK.s:510    .text:000000000000027c .LVL60
     /tmp/ccrNznQK.s:834    .text._ZN3TCB12getTimeSliceEv:0000000000000000 .LVL90
     /tmp/ccrNznQK.s:844    .text._ZN3TCB12getTimeSliceEv:0000000000000010 .LVL91
     /tmp/ccrNznQK.s:868    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccrNznQK.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccrNznQK.s:861    .text:0000000000000418 .Letext0

UNDEFINED SYMBOLS
_ZN15MemoryAllocator7kmallocEm
_ZN15MemoryAllocator5kfreeEPv
_ZN3TCB12createThreadEPFvPvES0_Pm
GAS LISTING /tmp/ccrNznQK.s 			page 36


_ZN3TCB7runningE
_ZN3TCB5yieldEv
__putc
console_handler
_Z11printStringPKc
_ZN3TCB16runningTimeSliceE
