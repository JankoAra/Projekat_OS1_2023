GAS LISTING /tmp/cc7Rtt35.s 			page 1


   1              		.file	"interruptRoutine.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 4E65706F 		.string	"Nepostojeci op code: "
   9      73746F6A 
   9      65636920 
   9      6F702063 
   9      6F64653A 
  10 0016 0000     		.align	3
  11              	.LC1:
  12 0018 0A736361 		.string	"\nscause: "
  12      7573653A 
  12      2000
  13 0022 00000000 		.align	3
  13      0000
  14              	.LC2:
  15 0028 0A736570 		.string	"\nsepc: "
  15      633A2000 
  16              		.align	3
  17              	.LC3:
  18 0030 47726573 		.string	"Greska u prekidnoj rutini"
  18      6B612075 
  18      20707265 
  18      6B69646E 
  18      6F6A2072 
  19 004a 00000000 		.align	3
  19      0000
  20              	.LC4:
  21 0050 73636175 		.string	"scause: "
  21      73653A20 
  21      00
  22              		.text
  23              		.align	2
  24              		.globl	interruptRoutine
  26              	interruptRoutine:
  27              	.LFB43:
  28              		.file 1 "src/interruptRoutine.cpp"
   1:src/interruptRoutine.cpp **** //
   2:src/interruptRoutine.cpp **** // Created by os on 5/22/23.
   3:src/interruptRoutine.cpp **** //
   4:src/interruptRoutine.cpp **** 
   5:src/interruptRoutine.cpp **** #include "../lib/console.h"
   6:src/interruptRoutine.cpp **** #include "../lib/hw.h"
   7:src/interruptRoutine.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/interruptRoutine.cpp **** #include "../h/helper.hpp"
   9:src/interruptRoutine.cpp **** #include "../h/Riscv.hpp"
  10:src/interruptRoutine.cpp **** #include "../h/syscall_c.hpp"
  11:src/interruptRoutine.cpp **** #include "../h/TCB.hpp"
  12:src/interruptRoutine.cpp **** 
  13:src/interruptRoutine.cpp **** extern "C" void interruptRoutine() {
  29              		.loc 1 13 36
  30              		.cfi_startproc
GAS LISTING /tmp/cc7Rtt35.s 			page 2


  31 0000 130101FC 		addi	sp,sp,-64
  32              		.cfi_def_cfa_offset 64
  33 0004 233C1102 		sd	ra,56(sp)
  34 0008 23388102 		sd	s0,48(sp)
  35 000c 23349102 		sd	s1,40(sp)
  36 0010 23302103 		sd	s2,32(sp)
  37 0014 233C3101 		sd	s3,24(sp)
  38              		.cfi_offset 1, -8
  39              		.cfi_offset 8, -16
  40              		.cfi_offset 9, -24
  41              		.cfi_offset 18, -32
  42              		.cfi_offset 19, -40
  43 0018 13040104 		addi	s0,sp,64
  44              		.cfi_def_cfa 8, 0
  14:src/interruptRoutine.cpp **** 	uint64 scause = Riscv::r_scause();
  45              		.loc 1 14 2
  46              	.LBB14:
  47              	.LBB15:
  48              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	//stavljanje registara x3-x31 na stek
  14:src/../h/Riscv.hpp **** 	static void pushRegisters();    //implementacija u asm
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp **** 	//skidanje registara x3-x31 sa steka
  17:src/../h/Riscv.hpp **** 	static void popRegisters();     //implementacija u asm
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp **** 	//read scause
  20:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp **** 	//write scause
  23:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp **** 	//read sepc
  26:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp **** 	//write sepc
  29:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp **** 	//read stvec
  32:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp **** 	//write stvec
  35:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  38:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),    //postoji zahtev za softverski prekid
GAS LISTING /tmp/cc7Rtt35.s 			page 3


  39:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),    //postoji prekid od tajmera
  40:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)        //postoji zahtev za spoljasnji hardverski prekid
  41:src/../h/Riscv.hpp **** 	};
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp **** 	//mask set sip
  44:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp **** 	//mask clear sip
  47:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp **** 	//read sip
  50:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp **** 	//write sip
  53:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  56:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  57:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  58:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  59:src/../h/Riscv.hpp **** 	};
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp **** 	//mask set sstatus
  62:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  63:src/../h/Riscv.hpp **** 
  64:src/../h/Riscv.hpp **** 	//mask clear sstatus
  65:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  66:src/../h/Riscv.hpp **** 
  67:src/../h/Riscv.hpp **** 	//read sstatus
  68:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  69:src/../h/Riscv.hpp **** 
  70:src/../h/Riscv.hpp **** 	//write sstatus
  71:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  72:src/../h/Riscv.hpp **** 
  73:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  74:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  75:src/../h/Riscv.hpp **** 
  76:src/../h/Riscv.hpp **** };
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  79:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  49              		.loc 2 79 2
  80:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  50              		.loc 2 80 2
  51              		.loc 2 80 67 is_stmt 0
  52              	#APP
  53              	# 80 "src/../h/Riscv.hpp" 1
  81              		return scause;
  54              		csrr a5, scause
  55              	# 0 "" 2
  56              	#NO_APP
  57 0020 2334F4FC 		sd	a5,-56(s0)
  58              		.loc 2 81 2 is_stmt 1
  59              		.loc 2 81 9 is_stmt 0
  60 0024 833484FC 		ld	s1,-56(s0)
  61              	.LVL0:
  62              	.LBE15:
GAS LISTING /tmp/cc7Rtt35.s 			page 4


  63              	.LBE14:
  15:src/interruptRoutine.cpp **** 	uint64 sepc = Riscv::r_sepc();
  64              		.loc 1 15 2 is_stmt 1
  65              	.LBB16:
  66              	.LBB17:
  82:src/../h/Riscv.hpp **** }
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  85:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  86:src/../h/Riscv.hpp **** }
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  89:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
  67              		.loc 2 89 2
  90:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
  68              		.loc 2 90 2
  69              		.loc 2 90 59 is_stmt 0
  70              	#APP
  71              	# 90 "src/../h/Riscv.hpp" 1
  91              		return sepc;
  72              		csrr a5, sepc
  73              	# 0 "" 2
  74              	#NO_APP
  75 002c 2330F4FC 		sd	a5,-64(s0)
  76              		.loc 2 91 2 is_stmt 1
  77              		.loc 2 91 9 is_stmt 0
  78 0030 033904FC 		ld	s2,-64(s0)
  79              	.LVL1:
  80              	.LBE17:
  81              	.LBE16:
  16:src/interruptRoutine.cpp **** 
  17:src/interruptRoutine.cpp **** 	if (scause == 0x09 || scause == 0x08) {
  82              		.loc 1 17 2 is_stmt 1
  83              	.LBB18:
  84              		.loc 1 17 21 is_stmt 0
  85 0034 138784FF 		addi	a4,s1,-8
  86              		.loc 1 17 2
  87 0038 93071000 		li	a5,1
  88 003c 63F8E702 		bleu	a4,a5,.L14
  18:src/interruptRoutine.cpp **** 		//prekid zbog poziva ecall
  19:src/interruptRoutine.cpp **** 		uint64 opCode;
  20:src/interruptRoutine.cpp **** 		__asm__ volatile("mv %[op], a0":[op] "=r"(opCode));
  21:src/interruptRoutine.cpp **** 
  22:src/interruptRoutine.cpp **** 		switch (opCode) {
  23:src/interruptRoutine.cpp **** 			case 0x01:
  24:src/interruptRoutine.cpp **** 				//mem_alloc
  25:src/interruptRoutine.cpp **** 				size_t size;
  26:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[size], a1":[size] "=r"(size));
  27:src/interruptRoutine.cpp **** 				size = size * MEM_BLOCK_SIZE;
  28:src/interruptRoutine.cpp **** 				MemoryAllocator::kmalloc(size);
  29:src/interruptRoutine.cpp **** 				break;
  30:src/interruptRoutine.cpp **** 			case 0x02:
  31:src/interruptRoutine.cpp **** 				//mem_free
  32:src/interruptRoutine.cpp **** 				void* ptr;
  33:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[ptr], a1" :[ptr]"=r"(ptr));
  34:src/interruptRoutine.cpp **** 				MemoryAllocator::kfree(ptr);
  35:src/interruptRoutine.cpp **** 				break;
GAS LISTING /tmp/cc7Rtt35.s 			page 5


  36:src/interruptRoutine.cpp **** 			case 0x11:
  37:src/interruptRoutine.cpp **** 				//thread_create
  38:src/interruptRoutine.cpp **** 				thread_t* handle;
  39:src/interruptRoutine.cpp **** 				void (* function)(void*);
  40:src/interruptRoutine.cpp **** 				void* args;
  41:src/interruptRoutine.cpp **** 				uint64* sp;
  42:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[sp], a4":[sp]"=r"(sp));
  43:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[args], a3":[args]"=r"(args));
  44:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[f], a2":[f]"=r"(function));
  45:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[handle], a1":[handle]"=r"(handle));
  46:src/interruptRoutine.cpp **** 				*handle = TCB::createThread(function, args, sp);
  47:src/interruptRoutine.cpp **** 				if(*handle!=nullptr){
  48:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, 0");
  49:src/interruptRoutine.cpp **** 				}
  50:src/interruptRoutine.cpp **** 				else{
  51:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, -1");
  52:src/interruptRoutine.cpp **** 				}
  53:src/interruptRoutine.cpp **** 				break;
  54:src/interruptRoutine.cpp **** 			case 0x12:
  55:src/interruptRoutine.cpp **** 				//thread_exit
  56:src/interruptRoutine.cpp **** 				break;
  57:src/interruptRoutine.cpp **** 			case 0x13:
  58:src/interruptRoutine.cpp **** 				//thread_dispatch
  59:src/interruptRoutine.cpp **** 				break;
  60:src/interruptRoutine.cpp **** 			case 0x14:
  61:src/interruptRoutine.cpp **** 				//thread_join
  62:src/interruptRoutine.cpp **** 				break;
  63:src/interruptRoutine.cpp **** 			case 0x21:
  64:src/interruptRoutine.cpp **** 				//sem_open
  65:src/interruptRoutine.cpp **** 				break;
  66:src/interruptRoutine.cpp **** 			case 0x22:
  67:src/interruptRoutine.cpp **** 				//sem_close
  68:src/interruptRoutine.cpp **** 				break;
  69:src/interruptRoutine.cpp **** 			case 0x23:
  70:src/interruptRoutine.cpp **** 				//sem_wait
  71:src/interruptRoutine.cpp **** 				break;
  72:src/interruptRoutine.cpp **** 			case 0x24:
  73:src/interruptRoutine.cpp **** 				//sem_signal
  74:src/interruptRoutine.cpp **** 				break;
  75:src/interruptRoutine.cpp **** 			case 0x31:
  76:src/interruptRoutine.cpp **** 				//time_sleep
  77:src/interruptRoutine.cpp **** 				break;
  78:src/interruptRoutine.cpp **** 			case 0x41:
  79:src/interruptRoutine.cpp **** 				//getc
  80:src/interruptRoutine.cpp **** 				break;
  81:src/interruptRoutine.cpp **** 			case 0x42:
  82:src/interruptRoutine.cpp **** 				//putc
  83:src/interruptRoutine.cpp **** 				break;
  84:src/interruptRoutine.cpp **** 			default:
  85:src/interruptRoutine.cpp **** 				printString("Nepostojeci op code: ");
  86:src/interruptRoutine.cpp **** 				printInteger(opCode);
  87:src/interruptRoutine.cpp **** 				printString("\nscause: ");
  88:src/interruptRoutine.cpp **** 				printInteger(scause);
  89:src/interruptRoutine.cpp **** 				printString("\nsepc: ");
  90:src/interruptRoutine.cpp **** 				printInteger(sepc);
  91:src/interruptRoutine.cpp **** 				break;
  92:src/interruptRoutine.cpp **** 		}
GAS LISTING /tmp/cc7Rtt35.s 			page 6


  93:src/interruptRoutine.cpp **** 		//sepc pokazuje na ecall instrukciju, treba preci na sledecu instrukciju
  94:src/interruptRoutine.cpp **** 		Riscv::w_sepc(sepc + 4);
  95:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 9)) {
  89              		.loc 1 95 9 is_stmt 1
  90 0040 9307F0FF 		li	a5,-1
  91 0044 9397F703 		slli	a5,a5,63
  92 0048 93879700 		addi	a5,a5,9
  93 004c 638AF410 		beq	s1,a5,.L15
  96:src/interruptRoutine.cpp **** 		//spoljasnji hardverski prekid
  97:src/interruptRoutine.cpp **** 		console_handler();
  98:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
  94              		.loc 1 98 9
  95 0050 9307F0FF 		li	a5,-1
  96 0054 9397F703 		slli	a5,a5,63
  97 0058 93871700 		addi	a5,a5,1
  98 005c 6398F410 		bne	s1,a5,.L12
  99:src/interruptRoutine.cpp **** 		//prekid od tajmera
 100:src/interruptRoutine.cpp **** 		Riscv::mc_sip(Riscv::SIP_SSIP);
  99              		.loc 1 100 3
 100              	.LVL2:
 101              	.LBB19:
 102              	.LBB20:
  92:src/../h/Riscv.hpp **** }
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
  95:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
  99:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 100:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 101:src/../h/Riscv.hpp **** 	return stvec;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 105:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 109:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 110:src/../h/Riscv.hpp **** }
 111:src/../h/Riscv.hpp **** 
 112:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 113:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 103              		.loc 2 113 2
 104              		.loc 2 113 58 is_stmt 0
 105 0060 93072000 		li	a5,2
 106              	#APP
 107              	# 113 "src/../h/Riscv.hpp" 1
 114              	}
 108              		csrc sip, a5
 109              	# 0 "" 2
 110              		.loc 2 114 1
 111              	#NO_APP
 112 0068 6F004004 		j	.L1
 113              	.LVL3:
 114              	.L14:
GAS LISTING /tmp/cc7Rtt35.s 			page 7


 115              	.LBE20:
 116              	.LBE19:
 117              	.LBB21:
  19:src/interruptRoutine.cpp **** 		__asm__ volatile("mv %[op], a0":[op] "=r"(opCode));
 118              		.loc 1 19 3 is_stmt 1
  20:src/interruptRoutine.cpp **** 
 119              		.loc 1 20 3
  20:src/interruptRoutine.cpp **** 
 120              		.loc 1 20 53 is_stmt 0
 121              	#APP
 122              	# 20 "src/interruptRoutine.cpp" 1
 123              		mv s3, a0
 124              	# 0 "" 2
 125              	.LVL4:
  22:src/interruptRoutine.cpp **** 			case 0x01:
 126              		.loc 1 22 3 is_stmt 1
 127              	#NO_APP
 128 0070 93072004 		li	a5,66
 129 0074 63EA3709 		bgtu	s3,a5,.L3
 130 0078 13972900 		slli	a4,s3,2
 131 007c 97060000 		lla	a3,.L5
 131      93860600 
 132 0084 3307D700 		add	a4,a4,a3
 133 0088 83270700 		lw	a5,0(a4)
 134 008c B387D700 		add	a5,a5,a3
 135 0090 67800700 		jr	a5
 136              		.section	.rodata
 137              		.align	2
 138              		.align	2
 139              	.L5:
 140 0000 00000000 		.word	.L3-.L5
 141 0004 00000000 		.word	.L8-.L5
 142 0008 00000000 		.word	.L7-.L5
 143 000c 00000000 		.word	.L3-.L5
 144 0010 00000000 		.word	.L3-.L5
 145 0014 00000000 		.word	.L3-.L5
 146 0018 00000000 		.word	.L3-.L5
 147 001c 00000000 		.word	.L3-.L5
 148 0020 00000000 		.word	.L3-.L5
 149 0024 00000000 		.word	.L3-.L5
 150 0028 00000000 		.word	.L3-.L5
 151 002c 00000000 		.word	.L3-.L5
 152 0030 00000000 		.word	.L3-.L5
 153 0034 00000000 		.word	.L3-.L5
 154 0038 00000000 		.word	.L3-.L5
 155 003c 00000000 		.word	.L3-.L5
 156 0040 00000000 		.word	.L3-.L5
 157 0044 00000000 		.word	.L6-.L5
 158 0048 00000000 		.word	.L4-.L5
 159 004c 00000000 		.word	.L4-.L5
 160 0050 00000000 		.word	.L4-.L5
 161 0054 00000000 		.word	.L3-.L5
 162 0058 00000000 		.word	.L3-.L5
 163 005c 00000000 		.word	.L3-.L5
 164 0060 00000000 		.word	.L3-.L5
 165 0064 00000000 		.word	.L3-.L5
 166 0068 00000000 		.word	.L3-.L5
GAS LISTING /tmp/cc7Rtt35.s 			page 8


 167 006c 00000000 		.word	.L3-.L5
 168 0070 00000000 		.word	.L3-.L5
 169 0074 00000000 		.word	.L3-.L5
 170 0078 00000000 		.word	.L3-.L5
 171 007c 00000000 		.word	.L3-.L5
 172 0080 00000000 		.word	.L3-.L5
 173 0084 00000000 		.word	.L4-.L5
 174 0088 00000000 		.word	.L4-.L5
 175 008c 00000000 		.word	.L4-.L5
 176 0090 00000000 		.word	.L4-.L5
 177 0094 00000000 		.word	.L3-.L5
 178 0098 00000000 		.word	.L3-.L5
 179 009c 00000000 		.word	.L3-.L5
 180 00a0 00000000 		.word	.L3-.L5
 181 00a4 00000000 		.word	.L3-.L5
 182 00a8 00000000 		.word	.L3-.L5
 183 00ac 00000000 		.word	.L3-.L5
 184 00b0 00000000 		.word	.L3-.L5
 185 00b4 00000000 		.word	.L3-.L5
 186 00b8 00000000 		.word	.L3-.L5
 187 00bc 00000000 		.word	.L3-.L5
 188 00c0 00000000 		.word	.L3-.L5
 189 00c4 00000000 		.word	.L4-.L5
 190 00c8 00000000 		.word	.L3-.L5
 191 00cc 00000000 		.word	.L3-.L5
 192 00d0 00000000 		.word	.L3-.L5
 193 00d4 00000000 		.word	.L3-.L5
 194 00d8 00000000 		.word	.L3-.L5
 195 00dc 00000000 		.word	.L3-.L5
 196 00e0 00000000 		.word	.L3-.L5
 197 00e4 00000000 		.word	.L3-.L5
 198 00e8 00000000 		.word	.L3-.L5
 199 00ec 00000000 		.word	.L3-.L5
 200 00f0 00000000 		.word	.L3-.L5
 201 00f4 00000000 		.word	.L3-.L5
 202 00f8 00000000 		.word	.L3-.L5
 203 00fc 00000000 		.word	.L3-.L5
 204 0100 00000000 		.word	.L3-.L5
 205 0104 00000000 		.word	.L4-.L5
 206 0108 00000000 		.word	.L4-.L5
 207              		.text
 208              	.L8:
 209              	.LBB22:
  23:src/interruptRoutine.cpp **** 				//mem_alloc
 210              		.loc 1 23 4
  25:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[size], a1":[size] "=r"(size));
 211              		.loc 1 25 5
  26:src/interruptRoutine.cpp **** 				size = size * MEM_BLOCK_SIZE;
 212              		.loc 1 26 5
  26:src/interruptRoutine.cpp **** 				size = size * MEM_BLOCK_SIZE;
 213              		.loc 1 26 57 is_stmt 0
 214              	#APP
 215              	# 26 "src/interruptRoutine.cpp" 1
 216              		mv a0, a1
 217              	# 0 "" 2
 218              	.LVL5:
  27:src/interruptRoutine.cpp **** 				MemoryAllocator::kmalloc(size);
GAS LISTING /tmp/cc7Rtt35.s 			page 9


 219              		.loc 1 27 5 is_stmt 1
  28:src/interruptRoutine.cpp **** 				break;
 220              		.loc 1 28 5
  28:src/interruptRoutine.cpp **** 				break;
 221              		.loc 1 28 29 is_stmt 0
 222              	#NO_APP
 223 0098 13156500 		slli	a0,a0,6
 224              	.LVL6:
 225 009c 97000000 		call	_ZN15MemoryAllocator7kmallocEm@plt
 225      E7800000 
 226              	.LVL7:
  29:src/interruptRoutine.cpp **** 			case 0x02:
 227              		.loc 1 29 5 is_stmt 1
 228              	.L4:
 229              	.LBE22:
  94:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 9)) {
 230              		.loc 1 94 3
  94:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 9)) {
 231              		.loc 1 94 16 is_stmt 0
 232 00a4 13094900 		addi	s2,s2,4
 233              	.LVL8:
 234              	.LBB23:
 235              	.LBB24:
  95:src/../h/Riscv.hpp **** }
 236              		.loc 2 95 2 is_stmt 1
  95:src/../h/Riscv.hpp **** }
 237              		.loc 2 95 59 is_stmt 0
 238              	#APP
 239              	# 95 "src/../h/Riscv.hpp" 1
 240              		csrw sepc, s2
 241              	# 0 "" 2
 242              	.LVL9:
 243              	#NO_APP
 244              	.L1:
 245              	.LBE24:
 246              	.LBE23:
 247              	.LBE21:
 248              	.LBE18:
 101:src/interruptRoutine.cpp **** 	} else {
 102:src/interruptRoutine.cpp **** 		println("Greska u prekidnoj rutini");
 103:src/interruptRoutine.cpp **** 		printString("scause: ");
 104:src/interruptRoutine.cpp **** 		printInteger(scause);
 105:src/interruptRoutine.cpp **** 		printString("\nsepc: ");
 106:src/interruptRoutine.cpp **** 		printInteger(sepc);
 107:src/interruptRoutine.cpp **** 	}
 108:src/interruptRoutine.cpp **** }
 249              		.loc 1 108 1
 250 00ac 83308103 		ld	ra,56(sp)
 251              		.cfi_remember_state
 252              		.cfi_restore 1
 253 00b0 03340103 		ld	s0,48(sp)
 254              		.cfi_restore 8
 255              		.cfi_def_cfa 2, 64
 256 00b4 83348102 		ld	s1,40(sp)
 257              		.cfi_restore 9
 258 00b8 03390102 		ld	s2,32(sp)
 259              		.cfi_restore 18
GAS LISTING /tmp/cc7Rtt35.s 			page 10


 260 00bc 83398101 		ld	s3,24(sp)
 261              		.cfi_restore 19
 262 00c0 13010104 		addi	sp,sp,64
 263              		.cfi_def_cfa_offset 0
 264 00c4 67800000 		jr	ra
 265              	.LVL10:
 266              	.L7:
 267              		.cfi_restore_state
 268              	.LBB27:
 269              	.LBB26:
 270              	.LBB25:
  30:src/interruptRoutine.cpp **** 				//mem_free
 271              		.loc 1 30 4 is_stmt 1
  32:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[ptr], a1" :[ptr]"=r"(ptr));
 272              		.loc 1 32 5
  33:src/interruptRoutine.cpp **** 				MemoryAllocator::kfree(ptr);
 273              		.loc 1 33 5
  33:src/interruptRoutine.cpp **** 				MemoryAllocator::kfree(ptr);
 274              		.loc 1 33 54 is_stmt 0
 275              	#APP
 276              	# 33 "src/interruptRoutine.cpp" 1
 277              		mv a0, a1
 278              	# 0 "" 2
 279              	.LVL11:
  34:src/interruptRoutine.cpp **** 				break;
 280              		.loc 1 34 5 is_stmt 1
  34:src/interruptRoutine.cpp **** 				break;
 281              		.loc 1 34 27 is_stmt 0
 282              	#NO_APP
 283 00cc 97000000 		call	_ZN15MemoryAllocator5kfreeEPv@plt
 283      E7800000 
 284              	.LVL12:
  35:src/interruptRoutine.cpp **** 			case 0x11:
 285              		.loc 1 35 5 is_stmt 1
 286 00d4 6FF01FFD 		j	.L4
 287              	.L6:
  36:src/interruptRoutine.cpp **** 				//thread_create
 288              		.loc 1 36 4
  38:src/interruptRoutine.cpp **** 				void (* function)(void*);
 289              		.loc 1 38 5
  39:src/interruptRoutine.cpp **** 				void* args;
 290              		.loc 1 39 5
  40:src/interruptRoutine.cpp **** 				uint64* sp;
 291              		.loc 1 40 5
  41:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[sp], a4":[sp]"=r"(sp));
 292              		.loc 1 41 5
  42:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[args], a3":[args]"=r"(args));
 293              		.loc 1 42 5
  42:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[args], a3":[args]"=r"(args));
 294              		.loc 1 42 50 is_stmt 0
 295              	#APP
 296              	# 42 "src/interruptRoutine.cpp" 1
 297              		mv a2, a4
 298              	# 0 "" 2
 299              	.LVL13:
  43:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[f], a2":[f]"=r"(function));
 300              		.loc 1 43 5 is_stmt 1
GAS LISTING /tmp/cc7Rtt35.s 			page 11


  43:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[f], a2":[f]"=r"(function));
 301              		.loc 1 43 56 is_stmt 0
 302              	# 43 "src/interruptRoutine.cpp" 1
 303              		mv a1, a3
 304              	# 0 "" 2
 305              	.LVL14:
  44:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[handle], a1":[handle]"=r"(handle));
 306              		.loc 1 44 5 is_stmt 1
  44:src/interruptRoutine.cpp **** 				__asm__ volatile("mv %[handle], a1":[handle]"=r"(handle));
 307              		.loc 1 44 54 is_stmt 0
 308              	# 44 "src/interruptRoutine.cpp" 1
 309              		mv a0, a2
 310              	# 0 "" 2
 311              	.LVL15:
  45:src/interruptRoutine.cpp **** 				*handle = TCB::createThread(function, args, sp);
 312              		.loc 1 45 5 is_stmt 1
  45:src/interruptRoutine.cpp **** 				*handle = TCB::createThread(function, args, sp);
 313              		.loc 1 45 62 is_stmt 0
 314              	# 45 "src/interruptRoutine.cpp" 1
 315              		mv s1, a1
 316              	# 0 "" 2
 317              	.LVL16:
  46:src/interruptRoutine.cpp **** 				if(*handle!=nullptr){
 318              		.loc 1 46 5 is_stmt 1
  46:src/interruptRoutine.cpp **** 				if(*handle!=nullptr){
 319              		.loc 1 46 32 is_stmt 0
 320              	#NO_APP
 321 00e8 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 321      E7800000 
 322              	.LVL17:
  46:src/interruptRoutine.cpp **** 				if(*handle!=nullptr){
 323              		.loc 1 46 13
 324 00f0 23B0A400 		sd	a0,0(s1)
  47:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, 0");
 325              		.loc 1 47 5 is_stmt 1
 326 00f4 63060500 		beqz	a0,.L9
  48:src/interruptRoutine.cpp **** 				}
 327              		.loc 1 48 6
  48:src/interruptRoutine.cpp **** 				}
 328              		.loc 1 48 34 is_stmt 0
 329              	#APP
 330              	# 48 "src/interruptRoutine.cpp" 1
 331              		li a0, 0
 332              	# 0 "" 2
 333              	#NO_APP
 334 00fc 6FF09FFA 		j	.L4
 335              	.L9:
  51:src/interruptRoutine.cpp **** 				}
 336              		.loc 1 51 6 is_stmt 1
  51:src/interruptRoutine.cpp **** 				}
 337              		.loc 1 51 35 is_stmt 0
 338              	#APP
 339              	# 51 "src/interruptRoutine.cpp" 1
 340              		li a0, -1
 341              	# 0 "" 2
 342              	#NO_APP
 343 0104 6FF01FFA 		j	.L4
GAS LISTING /tmp/cc7Rtt35.s 			page 12


 344              	.LVL18:
 345              	.L3:
  84:src/interruptRoutine.cpp **** 				printString("Nepostojeci op code: ");
 346              		.loc 1 84 4 is_stmt 1
  85:src/interruptRoutine.cpp **** 				printInteger(opCode);
 347              		.loc 1 85 5
  85:src/interruptRoutine.cpp **** 				printInteger(opCode);
 348              		.loc 1 85 16 is_stmt 0
 349 0108 17050000 		lla	a0,.LC0
 349      13050500 
 350 0110 97000000 		call	_Z11printStringPKc@plt
 350      E7800000 
 351              	.LVL19:
  86:src/interruptRoutine.cpp **** 				printString("\nscause: ");
 352              		.loc 1 86 5 is_stmt 1
  86:src/interruptRoutine.cpp **** 				printString("\nscause: ");
 353              		.loc 1 86 17 is_stmt 0
 354 0118 13850900 		mv	a0,s3
 355 011c 97000000 		call	_Z12printIntegerm@plt
 355      E7800000 
 356              	.LVL20:
  87:src/interruptRoutine.cpp **** 				printInteger(scause);
 357              		.loc 1 87 5 is_stmt 1
  87:src/interruptRoutine.cpp **** 				printInteger(scause);
 358              		.loc 1 87 16 is_stmt 0
 359 0124 17050000 		lla	a0,.LC1
 359      13050500 
 360 012c 97000000 		call	_Z11printStringPKc@plt
 360      E7800000 
 361              	.LVL21:
  88:src/interruptRoutine.cpp **** 				printString("\nsepc: ");
 362              		.loc 1 88 5 is_stmt 1
  88:src/interruptRoutine.cpp **** 				printString("\nsepc: ");
 363              		.loc 1 88 17 is_stmt 0
 364 0134 13850400 		mv	a0,s1
 365 0138 97000000 		call	_Z12printIntegerm@plt
 365      E7800000 
 366              	.LVL22:
  89:src/interruptRoutine.cpp **** 				printInteger(sepc);
 367              		.loc 1 89 5 is_stmt 1
  89:src/interruptRoutine.cpp **** 				printInteger(sepc);
 368              		.loc 1 89 16 is_stmt 0
 369 0140 17050000 		lla	a0,.LC2
 369      13050500 
 370 0148 97000000 		call	_Z11printStringPKc@plt
 370      E7800000 
 371              	.LVL23:
  90:src/interruptRoutine.cpp **** 				break;
 372              		.loc 1 90 5 is_stmt 1
  90:src/interruptRoutine.cpp **** 				break;
 373              		.loc 1 90 17 is_stmt 0
 374 0150 13050900 		mv	a0,s2
 375 0154 97000000 		call	_Z12printIntegerm@plt
 375      E7800000 
 376              	.LVL24:
  91:src/interruptRoutine.cpp **** 		}
 377              		.loc 1 91 5 is_stmt 1
GAS LISTING /tmp/cc7Rtt35.s 			page 13


 378 015c 6FF09FF4 		j	.L4
 379              	.LVL25:
 380              	.L15:
 381              	.LBE25:
 382              	.LBE26:
  97:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
 383              		.loc 1 97 3
  97:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
 384              		.loc 1 97 18 is_stmt 0
 385 0160 97000000 		call	console_handler@plt
 385      E7800000 
 386              	.LVL26:
 387 0168 6FF05FF4 		j	.L1
 388              	.L12:
 102:src/interruptRoutine.cpp **** 		printString("scause: ");
 389              		.loc 1 102 3 is_stmt 1
 102:src/interruptRoutine.cpp **** 		printString("scause: ");
 390              		.loc 1 102 10 is_stmt 0
 391 016c 17050000 		lla	a0,.LC3
 391      13050500 
 392 0174 97000000 		call	_Z7printlnPKc@plt
 392      E7800000 
 393              	.LVL27:
 103:src/interruptRoutine.cpp **** 		printInteger(scause);
 394              		.loc 1 103 3 is_stmt 1
 103:src/interruptRoutine.cpp **** 		printInteger(scause);
 395              		.loc 1 103 14 is_stmt 0
 396 017c 17050000 		lla	a0,.LC4
 396      13050500 
 397 0184 97000000 		call	_Z11printStringPKc@plt
 397      E7800000 
 398              	.LVL28:
 104:src/interruptRoutine.cpp **** 		printString("\nsepc: ");
 399              		.loc 1 104 3 is_stmt 1
 104:src/interruptRoutine.cpp **** 		printString("\nsepc: ");
 400              		.loc 1 104 15 is_stmt 0
 401 018c 13850400 		mv	a0,s1
 402 0190 97000000 		call	_Z12printIntegerm@plt
 402      E7800000 
 403              	.LVL29:
 105:src/interruptRoutine.cpp **** 		printInteger(sepc);
 404              		.loc 1 105 3 is_stmt 1
 105:src/interruptRoutine.cpp **** 		printInteger(sepc);
 405              		.loc 1 105 14 is_stmt 0
 406 0198 17050000 		lla	a0,.LC2
 406      13050500 
 407 01a0 97000000 		call	_Z11printStringPKc@plt
 407      E7800000 
 408              	.LVL30:
 106:src/interruptRoutine.cpp **** 	}
 409              		.loc 1 106 3 is_stmt 1
 106:src/interruptRoutine.cpp **** 	}
 410              		.loc 1 106 15 is_stmt 0
 411 01a8 13050900 		mv	a0,s2
 412 01ac 97000000 		call	_Z12printIntegerm@plt
 412      E7800000 
 413              	.LVL31:
GAS LISTING /tmp/cc7Rtt35.s 			page 14


 414              	.LBE27:
 415              		.loc 1 108 1
 416 01b4 6FF09FEF 		j	.L1
 417              		.cfi_endproc
 418              	.LFE43:
 420              	.Letext0:
 421              		.file 3 "src/../lib/hw.h"
 422              		.file 4 "src/../h/MemoryAllocator.hpp"
 423              		.file 5 "src/../h/syscall_c.hpp"
 424              		.file 6 "src/../h/TCB.hpp"
 425              		.file 7 "src/../h/helper.hpp"
 426              		.file 8 "src/../lib/console.h"
GAS LISTING /tmp/cc7Rtt35.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 interruptRoutine.cpp
     /tmp/cc7Rtt35.s:26     .text:0000000000000000 interruptRoutine
     /tmp/cc7Rtt35.s:30     .text:0000000000000000 .L0 
     /tmp/cc7Rtt35.s:31     .text:0000000000000000 .L0 
     /tmp/cc7Rtt35.s:32     .text:0000000000000004 .L0 
     /tmp/cc7Rtt35.s:38     .text:0000000000000018 .L0 
     /tmp/cc7Rtt35.s:39     .text:0000000000000018 .L0 
     /tmp/cc7Rtt35.s:40     .text:0000000000000018 .L0 
     /tmp/cc7Rtt35.s:41     .text:0000000000000018 .L0 
     /tmp/cc7Rtt35.s:42     .text:0000000000000018 .L0 
     /tmp/cc7Rtt35.s:44     .text:000000000000001c .L0 
     /tmp/cc7Rtt35.s:49     .text:000000000000001c .L0 
     /tmp/cc7Rtt35.s:50     .text:000000000000001c .L0 
     /tmp/cc7Rtt35.s:51     .text:000000000000001c .L0 
  src/../h/Riscv.hpp:80     .text:000000000000001c .L0 
     /tmp/cc7Rtt35.s:59     .text:0000000000000024 .L0 
     /tmp/cc7Rtt35.s:60     .text:0000000000000024 .L0 
     /tmp/cc7Rtt35.s:67     .text:0000000000000028 .L0 
     /tmp/cc7Rtt35.s:68     .text:0000000000000028 .L0 
     /tmp/cc7Rtt35.s:69     .text:0000000000000028 .L0 
  src/../h/Riscv.hpp:90     .text:0000000000000028 .L0 
     /tmp/cc7Rtt35.s:77     .text:0000000000000030 .L0 
     /tmp/cc7Rtt35.s:78     .text:0000000000000030 .L0 
     /tmp/cc7Rtt35.s:84     .text:0000000000000034 .L0 
     /tmp/cc7Rtt35.s:85     .text:0000000000000034 .L0 
     /tmp/cc7Rtt35.s:87     .text:0000000000000038 .L0 
     /tmp/cc7Rtt35.s:90     .text:0000000000000040 .L0 
     /tmp/cc7Rtt35.s:95     .text:0000000000000050 .L0 
     /tmp/cc7Rtt35.s:103    .text:0000000000000060 .L0 
     /tmp/cc7Rtt35.s:104    .text:0000000000000060 .L0 
     /tmp/cc7Rtt35.s:105    .text:0000000000000060 .L0 
     /tmp/cc7Rtt35.s:112    .text:0000000000000068 .L0 
     /tmp/cc7Rtt35.s:119    .text:000000000000006c .L0 
     /tmp/cc7Rtt35.s:120    .text:000000000000006c .L0 
src/interruptRoutine.cpp:20     .text:000000000000006c .L0 
     /tmp/cc7Rtt35.s:128    .text:0000000000000070 .L0 
     /tmp/cc7Rtt35.s:211    .text:0000000000000094 .L0 
     /tmp/cc7Rtt35.s:212    .text:0000000000000094 .L0 
     /tmp/cc7Rtt35.s:213    .text:0000000000000094 .L0 
src/interruptRoutine.cpp:26     .text:0000000000000094 .L0 
     /tmp/cc7Rtt35.s:220    .text:0000000000000098 .L0 
     /tmp/cc7Rtt35.s:221    .text:0000000000000098 .L0 
     /tmp/cc7Rtt35.s:223    .text:0000000000000098 .L0 
     /tmp/cc7Rtt35.s:230    .text:00000000000000a4 .L0 
     /tmp/cc7Rtt35.s:231    .text:00000000000000a4 .L0 
     /tmp/cc7Rtt35.s:232    .text:00000000000000a4 .L0 
     /tmp/cc7Rtt35.s:237    .text:00000000000000a8 .L0 
  src/../h/Riscv.hpp:95     .text:00000000000000a8 .L0 
     /tmp/cc7Rtt35.s:250    .text:00000000000000ac .L0 
     /tmp/cc7Rtt35.s:251    .text:00000000000000b0 .L0 
     /tmp/cc7Rtt35.s:252    .text:00000000000000b0 .L0 
     /tmp/cc7Rtt35.s:254    .text:00000000000000b4 .L0 
     /tmp/cc7Rtt35.s:255    .text:00000000000000b4 .L0 
     /tmp/cc7Rtt35.s:257    .text:00000000000000b8 .L0 
     /tmp/cc7Rtt35.s:259    .text:00000000000000bc .L0 
     /tmp/cc7Rtt35.s:261    .text:00000000000000c0 .L0 
GAS LISTING /tmp/cc7Rtt35.s 			page 16


     /tmp/cc7Rtt35.s:263    .text:00000000000000c4 .L0 
     /tmp/cc7Rtt35.s:267    .text:00000000000000c8 .L0 
     /tmp/cc7Rtt35.s:272    .text:00000000000000c8 .L0 
     /tmp/cc7Rtt35.s:273    .text:00000000000000c8 .L0 
     /tmp/cc7Rtt35.s:274    .text:00000000000000c8 .L0 
src/interruptRoutine.cpp:33     .text:00000000000000c8 .L0 
     /tmp/cc7Rtt35.s:281    .text:00000000000000cc .L0 
     /tmp/cc7Rtt35.s:283    .text:00000000000000cc .L0 
     /tmp/cc7Rtt35.s:286    .text:00000000000000d4 .L0 
     /tmp/cc7Rtt35.s:289    .text:00000000000000d8 .L0 
     /tmp/cc7Rtt35.s:290    .text:00000000000000d8 .L0 
     /tmp/cc7Rtt35.s:291    .text:00000000000000d8 .L0 
     /tmp/cc7Rtt35.s:292    .text:00000000000000d8 .L0 
     /tmp/cc7Rtt35.s:293    .text:00000000000000d8 .L0 
     /tmp/cc7Rtt35.s:294    .text:00000000000000d8 .L0 
src/interruptRoutine.cpp:42     .text:00000000000000d8 .L0 
     /tmp/cc7Rtt35.s:301    .text:00000000000000dc .L0 
src/interruptRoutine.cpp:43     .text:00000000000000dc .L0 
     /tmp/cc7Rtt35.s:307    .text:00000000000000e0 .L0 
src/interruptRoutine.cpp:44     .text:00000000000000e0 .L0 
     /tmp/cc7Rtt35.s:313    .text:00000000000000e4 .L0 
src/interruptRoutine.cpp:45     .text:00000000000000e4 .L0 
     /tmp/cc7Rtt35.s:319    .text:00000000000000e8 .L0 
     /tmp/cc7Rtt35.s:321    .text:00000000000000e8 .L0 
     /tmp/cc7Rtt35.s:324    .text:00000000000000f0 .L0 
     /tmp/cc7Rtt35.s:326    .text:00000000000000f4 .L0 
     /tmp/cc7Rtt35.s:328    .text:00000000000000f8 .L0 
src/interruptRoutine.cpp:48     .text:00000000000000f8 .L0 
     /tmp/cc7Rtt35.s:337    .text:0000000000000100 .L0 
src/interruptRoutine.cpp:51     .text:0000000000000100 .L0 
     /tmp/cc7Rtt35.s:347    .text:0000000000000108 .L0 
     /tmp/cc7Rtt35.s:348    .text:0000000000000108 .L0 
     /tmp/cc7Rtt35.s:349    .text:0000000000000108 .L0 
     /tmp/cc7Rtt35.s:353    .text:0000000000000118 .L0 
     /tmp/cc7Rtt35.s:354    .text:0000000000000118 .L0 
     /tmp/cc7Rtt35.s:358    .text:0000000000000124 .L0 
     /tmp/cc7Rtt35.s:359    .text:0000000000000124 .L0 
     /tmp/cc7Rtt35.s:363    .text:0000000000000134 .L0 
     /tmp/cc7Rtt35.s:364    .text:0000000000000134 .L0 
     /tmp/cc7Rtt35.s:368    .text:0000000000000140 .L0 
     /tmp/cc7Rtt35.s:369    .text:0000000000000140 .L0 
     /tmp/cc7Rtt35.s:373    .text:0000000000000150 .L0 
     /tmp/cc7Rtt35.s:374    .text:0000000000000150 .L0 
     /tmp/cc7Rtt35.s:378    .text:000000000000015c .L0 
     /tmp/cc7Rtt35.s:384    .text:0000000000000160 .L0 
     /tmp/cc7Rtt35.s:385    .text:0000000000000160 .L0 
     /tmp/cc7Rtt35.s:390    .text:000000000000016c .L0 
     /tmp/cc7Rtt35.s:391    .text:000000000000016c .L0 
     /tmp/cc7Rtt35.s:395    .text:000000000000017c .L0 
     /tmp/cc7Rtt35.s:396    .text:000000000000017c .L0 
     /tmp/cc7Rtt35.s:400    .text:000000000000018c .L0 
     /tmp/cc7Rtt35.s:401    .text:000000000000018c .L0 
     /tmp/cc7Rtt35.s:405    .text:0000000000000198 .L0 
     /tmp/cc7Rtt35.s:406    .text:0000000000000198 .L0 
     /tmp/cc7Rtt35.s:410    .text:00000000000001a8 .L0 
     /tmp/cc7Rtt35.s:411    .text:00000000000001a8 .L0 
     /tmp/cc7Rtt35.s:416    .text:00000000000001b4 .L0 
GAS LISTING /tmp/cc7Rtt35.s 			page 17


     /tmp/cc7Rtt35.s:417    .text:00000000000001b8 .L0 
     /tmp/cc7Rtt35.s:427    .text:00000000000001b8 .L0 
     /tmp/cc7Rtt35.s:139    .rodata:0000000000000000 .L5
     /tmp/cc7Rtt35.s:131    .text:000000000000007c .L0 
     /tmp/cc7Rtt35.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/cc7Rtt35.s:349    .text:0000000000000108 .L0 
     /tmp/cc7Rtt35.s:11     .rodata.str1.8:0000000000000018 .LC1
     /tmp/cc7Rtt35.s:359    .text:0000000000000124 .L0 
     /tmp/cc7Rtt35.s:14     .rodata.str1.8:0000000000000028 .LC2
     /tmp/cc7Rtt35.s:369    .text:0000000000000140 .L0 
     /tmp/cc7Rtt35.s:17     .rodata.str1.8:0000000000000030 .LC3
     /tmp/cc7Rtt35.s:391    .text:000000000000016c .L0 
     /tmp/cc7Rtt35.s:20     .rodata.str1.8:0000000000000050 .LC4
     /tmp/cc7Rtt35.s:396    .text:000000000000017c .L0 
     /tmp/cc7Rtt35.s:406    .text:0000000000000198 .L0 
     /tmp/cc7Rtt35.s:114    .text:000000000000006c .L14
     /tmp/cc7Rtt35.s:380    .text:0000000000000160 .L15
     /tmp/cc7Rtt35.s:388    .text:000000000000016c .L12
     /tmp/cc7Rtt35.s:244    .text:00000000000000ac .L1
     /tmp/cc7Rtt35.s:345    .text:0000000000000108 .L3
     /tmp/cc7Rtt35.s:228    .text:00000000000000a4 .L4
     /tmp/cc7Rtt35.s:335    .text:0000000000000100 .L9
     /tmp/cc7Rtt35.s:208    .text:0000000000000094 .L8
     /tmp/cc7Rtt35.s:266    .text:00000000000000c8 .L7
     /tmp/cc7Rtt35.s:287    .text:00000000000000d8 .L6
     /tmp/cc7Rtt35.s:1540   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc7Rtt35.s:2754   .debug_str:0000000000000637 .LASF121
     /tmp/cc7Rtt35.s:2632   .debug_str:00000000000002cb .LASF122
     /tmp/cc7Rtt35.s:2626   .debug_str:0000000000000283 .LASF123
     /tmp/cc7Rtt35.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc7Rtt35.s:420    .text:00000000000001b8 .Letext0
     /tmp/cc7Rtt35.s:2540   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc7Rtt35.s:2678   .debug_str:0000000000000447 .LASF0
     /tmp/cc7Rtt35.s:2698   .debug_str:0000000000000498 .LASF1
     /tmp/cc7Rtt35.s:2666   .debug_str:00000000000003d3 .LASF2
     /tmp/cc7Rtt35.s:2638   .debug_str:0000000000000314 .LASF4
     /tmp/cc7Rtt35.s:2736   .debug_str:00000000000005c2 .LASF3
     /tmp/cc7Rtt35.s:2568   .debug_str:00000000000000ae .LASF5
     /tmp/cc7Rtt35.s:2590   .debug_str:000000000000014e .LASF6
     /tmp/cc7Rtt35.s:2700   .debug_str:00000000000004ab .LASF7
     /tmp/cc7Rtt35.s:2676   .debug_str:0000000000000434 .LASF8
     /tmp/cc7Rtt35.s:2768   .debug_str:000000000000074b .LASF9
     /tmp/cc7Rtt35.s:2624   .debug_str:0000000000000275 .LASF10
     /tmp/cc7Rtt35.s:2712   .debug_str:000000000000050a .LASF11
     /tmp/cc7Rtt35.s:2756   .debug_str:00000000000006fb .LASF12
     /tmp/cc7Rtt35.s:2570   .debug_str:00000000000000b5 .LASF13
     /tmp/cc7Rtt35.s:2550   .debug_str:000000000000003b .LASF14
     /tmp/cc7Rtt35.s:2574   .debug_str:00000000000000cf .LASF15
     /tmp/cc7Rtt35.s:2730   .debug_str:000000000000058e .LASF16
     /tmp/cc7Rtt35.s:2584   .debug_str:000000000000010d .LASF17
     /tmp/cc7Rtt35.s:2662   .debug_str:00000000000003b8 .LASF31
     /tmp/cc7Rtt35.s:2764   .debug_str:000000000000072f .LASF21
     /tmp/cc7Rtt35.s:2794   .debug_str:0000000000000805 .LASF18
     /tmp/cc7Rtt35.s:2778   .debug_str:0000000000000796 .LASF19
     /tmp/cc7Rtt35.s:2748   .debug_str:0000000000000604 .LASF20
     /tmp/cc7Rtt35.s:2640   .debug_str:000000000000031b .LASF22
     /tmp/cc7Rtt35.s:2762   .debug_str:0000000000000727 .LASF23
GAS LISTING /tmp/cc7Rtt35.s 			page 18


     /tmp/cc7Rtt35.s:2728   .debug_str:000000000000056f .LASF25
     /tmp/cc7Rtt35.s:2580   .debug_str:00000000000000f6 .LASF24
     /tmp/cc7Rtt35.s:2548   .debug_str:000000000000001d .LASF26
     /tmp/cc7Rtt35.s:2596   .debug_str:0000000000000178 .LASF41
     /tmp/cc7Rtt35.s:2544   .debug_str:0000000000000009 .LASF27
     /tmp/cc7Rtt35.s:2788   .debug_str:00000000000007e7 .LASF28
     /tmp/cc7Rtt35.s:2708   .debug_str:00000000000004e6 .LASF29
     /tmp/cc7Rtt35.s:2604   .debug_str:00000000000001ca .LASF69
     /tmp/cc7Rtt35.s:2672   .debug_str:00000000000003f7 .LASF71
     /tmp/cc7Rtt35.s:2610   .debug_str:00000000000001fc .LASF30
     /tmp/cc7Rtt35.s:2694   .debug_str:0000000000000487 .LASF32
     /tmp/cc7Rtt35.s:2652   .debug_str:000000000000035c .LASF124
     /tmp/cc7Rtt35.s:2742   .debug_str:00000000000005e7 .LASF33
     /tmp/cc7Rtt35.s:2692   .debug_str:000000000000047e .LASF34
     /tmp/cc7Rtt35.s:2646   .debug_str:000000000000033e .LASF35
     /tmp/cc7Rtt35.s:2566   .debug_str:00000000000000a0 .LASF36
     /tmp/cc7Rtt35.s:2602   .debug_str:00000000000001af .LASF38
     /tmp/cc7Rtt35.s:2744   .debug_str:00000000000005f0 .LASF37
     /tmp/cc7Rtt35.s:2636   .debug_str:00000000000002fa .LASF39
     /tmp/cc7Rtt35.s:2552   .debug_str:000000000000004b .LASF43
     /tmp/cc7Rtt35.s:2606   .debug_str:00000000000001d4 .LASF45
     /tmp/cc7Rtt35.s:2600   .debug_str:00000000000001a6 .LASF40
     /tmp/cc7Rtt35.s:2598   .debug_str:0000000000000191 .LASF42
     /tmp/cc7Rtt35.s:2738   .debug_str:00000000000005d4 .LASF44
     /tmp/cc7Rtt35.s:2720   .debug_str:000000000000053f .LASF46
     /tmp/cc7Rtt35.s:2726   .debug_str:0000000000000568 .LASF47
     /tmp/cc7Rtt35.s:2622   .debug_str:0000000000000262 .LASF48
     /tmp/cc7Rtt35.s:2614   .debug_str:0000000000000214 .LASF49
     /tmp/cc7Rtt35.s:2586   .debug_str:0000000000000123 .LASF50
     /tmp/cc7Rtt35.s:2546   .debug_str:0000000000000015 .LASF51
     /tmp/cc7Rtt35.s:2630   .debug_str:00000000000002b7 .LASF52
     /tmp/cc7Rtt35.s:2680   .debug_str:0000000000000454 .LASF53
     /tmp/cc7Rtt35.s:2782   .debug_str:00000000000007ab .LASF54
     /tmp/cc7Rtt35.s:2562   .debug_str:0000000000000083 .LASF55
     /tmp/cc7Rtt35.s:2612   .debug_str:0000000000000201 .LASF56
     /tmp/cc7Rtt35.s:2620   .debug_str:000000000000025c .LASF57
     /tmp/cc7Rtt35.s:2752   .debug_str:0000000000000625 .LASF58
     /tmp/cc7Rtt35.s:2558   .debug_str:0000000000000066 .LASF59
     /tmp/cc7Rtt35.s:2800   .debug_str:0000000000000827 .LASF60
     /tmp/cc7Rtt35.s:2792   .debug_str:00000000000007fa .LASF61
     /tmp/cc7Rtt35.s:2734   .debug_str:00000000000005aa .LASF62
     /tmp/cc7Rtt35.s:2696   .debug_str:000000000000048d .LASF63
     /tmp/cc7Rtt35.s:2654   .debug_str:0000000000000367 .LASF64
     /tmp/cc7Rtt35.s:2572   .debug_str:00000000000000c5 .LASF65
     /tmp/cc7Rtt35.s:2634   .debug_str:00000000000002e4 .LASF66
     /tmp/cc7Rtt35.s:2670   .debug_str:00000000000003ed .LASF67
     /tmp/cc7Rtt35.s:2628   .debug_str:00000000000002a1 .LASF68
     /tmp/cc7Rtt35.s:2576   .debug_str:00000000000000db .LASF70
     /tmp/cc7Rtt35.s:2796   .debug_str:000000000000080a .LASF72
     /tmp/cc7Rtt35.s:2542   .debug_str:0000000000000000 .LASF73
     /tmp/cc7Rtt35.s:2556   .debug_str:000000000000005e .LASF125
     /tmp/cc7Rtt35.s:2650   .debug_str:000000000000034f .LASF74
     /tmp/cc7Rtt35.s:2784   .debug_str:00000000000007be .LASF75
     /tmp/cc7Rtt35.s:2724   .debug_str:0000000000000563 .LASF126
     /tmp/cc7Rtt35.s:2702   .debug_str:00000000000004be .LASF78
     /tmp/cc7Rtt35.s:2656   .debug_str:000000000000037f .LASF80
     /tmp/cc7Rtt35.s:2668   .debug_str:00000000000003e1 .LASF76
GAS LISTING /tmp/cc7Rtt35.s 			page 19


     /tmp/cc7Rtt35.s:2588   .debug_str:0000000000000137 .LASF77
     /tmp/cc7Rtt35.s:2554   .debug_str:0000000000000054 .LASF79
     /tmp/cc7Rtt35.s:2706   .debug_str:00000000000004d2 .LASF81
     /tmp/cc7Rtt35.s:2642   .debug_str:000000000000032a .LASF82
     /tmp/cc7Rtt35.s:2658   .debug_str:0000000000000395 .LASF83
     /tmp/cc7Rtt35.s:2660   .debug_str:00000000000003ab .LASF84
     /tmp/cc7Rtt35.s:2710   .debug_str:00000000000004f2 .LASF85
     /tmp/cc7Rtt35.s:2766   .debug_str:000000000000073e .LASF86
     /tmp/cc7Rtt35.s:2770   .debug_str:000000000000075b .LASF87
     /tmp/cc7Rtt35.s:2740   .debug_str:00000000000005db .LASF88
     /tmp/cc7Rtt35.s:2560   .debug_str:000000000000006c .LASF89
     /tmp/cc7Rtt35.s:2664   .debug_str:00000000000003c8 .LASF90
     /tmp/cc7Rtt35.s:2616   .debug_str:000000000000021c .LASF91
     /tmp/cc7Rtt35.s:2732   .debug_str:00000000000005a4 .LASF92
     /tmp/cc7Rtt35.s:2780   .debug_str:000000000000079b .LASF93
     /tmp/cc7Rtt35.s:2682   .debug_str:000000000000045b .LASF94
     /tmp/cc7Rtt35.s:2608   .debug_str:00000000000001e9 .LASF95
     /tmp/cc7Rtt35.s:2578   .debug_str:00000000000000e6 .LASF96
     /tmp/cc7Rtt35.s:2750   .debug_str:0000000000000609 .LASF97
     /tmp/cc7Rtt35.s:2776   .debug_str:000000000000078e .LASF98
     /tmp/cc7Rtt35.s:2722   .debug_str:0000000000000552 .LASF99
     /tmp/cc7Rtt35.s:2564   .debug_str:000000000000008a .LASF127
     /tmp/cc7Rtt35.s:2648   .debug_str:0000000000000347 .LASF100
     /tmp/cc7Rtt35.s:2760   .debug_str:0000000000000718 .LASF101
     /tmp/cc7Rtt35.s:2684   .debug_str:0000000000000464 .LASF102
     /tmp/cc7Rtt35.s:2686   .debug_str:000000000000046a .LASF103
     /tmp/cc7Rtt35.s:2690   .debug_str:0000000000000474 .LASF104
     /tmp/cc7Rtt35.s:2644   .debug_str:0000000000000335 .LASF105
     /tmp/cc7Rtt35.s:2674   .debug_str:000000000000042c .LASF106
     /tmp/cc7Rtt35.s:2772   .debug_str:0000000000000773 .LASF128
     /tmp/cc7Rtt35.s:2618   .debug_str:0000000000000234 .LASF129
     /tmp/cc7Rtt35.s:2582   .debug_str:00000000000000fc .LASF107
     /tmp/cc7Rtt35.s:27     .text:0000000000000000 .LFB43
     /tmp/cc7Rtt35.s:418    .text:00000000000001b8 .LFE43
     /tmp/cc7Rtt35.s:2786   .debug_str:00000000000007e0 .LASF108
     /tmp/cc7Rtt35.s:2405   .debug_loc:0000000000000000 .LLST0
     /tmp/cc7Rtt35.s:2688   .debug_str:000000000000046f .LASF109
     /tmp/cc7Rtt35.s:2420   .debug_loc:0000000000000049 .LLST1
     /tmp/cc7Rtt35.s:2526   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc7Rtt35.s:2790   .debug_str:00000000000007f3 .LASF110
     /tmp/cc7Rtt35.s:2437   .debug_loc:0000000000000094 .LLST3
     /tmp/cc7Rtt35.s:2448   .debug_loc:00000000000000ca .LLST4
     /tmp/cc7Rtt35.s:2463   .debug_loc:0000000000000104 .LLST5
     /tmp/cc7Rtt35.s:2746   .debug_str:00000000000005fd .LASF111
     /tmp/cc7Rtt35.s:2470   .debug_loc:0000000000000127 .LLST6
     /tmp/cc7Rtt35.s:2704   .debug_str:00000000000004c9 .LASF112
     /tmp/cc7Rtt35.s:2477   .debug_loc:000000000000014a .LLST7
     /tmp/cc7Rtt35.s:2484   .debug_loc:000000000000016d .LLST8
     /tmp/cc7Rtt35.s:2491   .debug_loc:0000000000000190 .LLST9
     /tmp/cc7Rtt35.s:226    .text:00000000000000a4 .LVL7
     /tmp/cc7Rtt35.s:284    .text:00000000000000d4 .LVL12
     /tmp/cc7Rtt35.s:322    .text:00000000000000f0 .LVL17
     /tmp/cc7Rtt35.s:351    .text:0000000000000118 .LVL19
     /tmp/cc7Rtt35.s:356    .text:0000000000000124 .LVL20
     /tmp/cc7Rtt35.s:361    .text:0000000000000134 .LVL21
     /tmp/cc7Rtt35.s:366    .text:0000000000000140 .LVL22
     /tmp/cc7Rtt35.s:371    .text:0000000000000150 .LVL23
GAS LISTING /tmp/cc7Rtt35.s 			page 20


     /tmp/cc7Rtt35.s:376    .text:000000000000015c .LVL24
     /tmp/cc7Rtt35.s:234    .text:00000000000000a8 .LBB23
     /tmp/cc7Rtt35.s:246    .text:00000000000000ac .LBE23
     /tmp/cc7Rtt35.s:2498   .debug_loc:00000000000001b3 .LLST10
     /tmp/cc7Rtt35.s:46     .text:000000000000001c .LBB14
     /tmp/cc7Rtt35.s:63     .text:0000000000000028 .LBE14
     /tmp/cc7Rtt35.s:65     .text:0000000000000028 .LBB16
     /tmp/cc7Rtt35.s:81     .text:0000000000000034 .LBE16
     /tmp/cc7Rtt35.s:101    .text:0000000000000060 .LBB19
     /tmp/cc7Rtt35.s:116    .text:000000000000006c .LBE19
     /tmp/cc7Rtt35.s:2505   .debug_loc:00000000000001d6 .LLST2
     /tmp/cc7Rtt35.s:386    .text:0000000000000168 .LVL26
     /tmp/cc7Rtt35.s:393    .text:000000000000017c .LVL27
     /tmp/cc7Rtt35.s:398    .text:000000000000018c .LVL28
     /tmp/cc7Rtt35.s:403    .text:0000000000000198 .LVL29
     /tmp/cc7Rtt35.s:408    .text:00000000000001a8 .LVL30
     /tmp/cc7Rtt35.s:413    .text:00000000000001b4 .LVL31
     /tmp/cc7Rtt35.s:2798   .debug_str:0000000000000822 .LASF113
     /tmp/cc7Rtt35.s:2592   .debug_str:0000000000000155 .LASF114
     /tmp/cc7Rtt35.s:2716   .debug_str:0000000000000521 .LASF116
     /tmp/cc7Rtt35.s:2718   .debug_str:000000000000052d .LASF115
     /tmp/cc7Rtt35.s:2774   .debug_str:0000000000000781 .LASF117
     /tmp/cc7Rtt35.s:2594   .debug_str:0000000000000168 .LASF118
     /tmp/cc7Rtt35.s:2758   .debug_str:000000000000070a .LASF119
     /tmp/cc7Rtt35.s:2714   .debug_str:0000000000000519 .LASF120
     /tmp/cc7Rtt35.s:61     .text:0000000000000028 .LVL0
     /tmp/cc7Rtt35.s:265    .text:00000000000000c8 .LVL10
     /tmp/cc7Rtt35.s:317    .text:00000000000000e8 .LVL16
     /tmp/cc7Rtt35.s:344    .text:0000000000000108 .LVL18
     /tmp/cc7Rtt35.s:79     .text:0000000000000034 .LVL1
     /tmp/cc7Rtt35.s:233    .text:00000000000000a8 .LVL8
     /tmp/cc7Rtt35.s:242    .text:00000000000000ac .LVL9
     /tmp/cc7Rtt35.s:125    .text:0000000000000070 .LVL4
     /tmp/cc7Rtt35.s:379    .text:0000000000000160 .LVL25
     /tmp/cc7Rtt35.s:218    .text:0000000000000098 .LVL5
     /tmp/cc7Rtt35.s:224    .text:000000000000009c .LVL6
     /tmp/cc7Rtt35.s:279    .text:00000000000000cc .LVL11
     /tmp/cc7Rtt35.s:311    .text:00000000000000e4 .LVL15
     /tmp/cc7Rtt35.s:305    .text:00000000000000e0 .LVL14
     /tmp/cc7Rtt35.s:299    .text:00000000000000dc .LVL13
     /tmp/cc7Rtt35.s:100    .text:0000000000000060 .LVL2
     /tmp/cc7Rtt35.s:113    .text:000000000000006c .LVL3
     /tmp/cc7Rtt35.s:428    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc7Rtt35.s:117    .text:000000000000006c .LBB21
     /tmp/cc7Rtt35.s:247    .text:00000000000000ac .LBE21
     /tmp/cc7Rtt35.s:269    .text:00000000000000c8 .LBB26
     /tmp/cc7Rtt35.s:382    .text:0000000000000160 .LBE26
     /tmp/cc7Rtt35.s:209    .text:0000000000000094 .LBB22
     /tmp/cc7Rtt35.s:229    .text:00000000000000a4 .LBE22
     /tmp/cc7Rtt35.s:270    .text:00000000000000c8 .LBB25
     /tmp/cc7Rtt35.s:381    .text:0000000000000160 .LBE25

UNDEFINED SYMBOLS
_ZN15MemoryAllocator7kmallocEm
_ZN15MemoryAllocator5kfreeEPv
_ZN3TCB12createThreadEPFvPvES0_Pm
_Z11printStringPKc
GAS LISTING /tmp/cc7Rtt35.s 			page 21


_Z12printIntegerm
console_handler
_Z7printlnPKc
