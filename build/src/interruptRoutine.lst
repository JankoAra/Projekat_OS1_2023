GAS LISTING /tmp/ccsigIod.s 			page 1


   1              		.file	"interruptRoutine.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata
   7              		.align	3
   8              	.LC0:
   9 0000 0A4E6570 		.string	"\nNepostojeci op code: "
   9      6F73746F 
   9      6A656369 
   9      206F7020 
   9      636F6465 
  10 0017 00       		.align	3
  11              	.LC1:
  12 0018 0A736361 		.string	"\nscause: "
  12      7573653A 
  12      2000
  13 0022 00000000 		.align	3
  13      0000
  14              	.LC2:
  15 0028 0A736570 		.string	"\nsepc: "
  15      633A2000 
  16              		.align	3
  17              	.LC3:
  18 0030 0A477265 		.string	"\nGreska u prekidnoj rutini"
  18      736B6120 
  18      75207072 
  18      656B6964 
  18      6E6F6A20 
  19 004b 00000000 		.align	3
  19      00
  20              	.LC4:
  21 0050 73636175 		.string	"scause: "
  21      73653A20 
  21      00
  22              		.text
  23              		.align	2
  24              		.globl	interruptRoutine
  26              	interruptRoutine:
  27              	.LFB43:
  28              		.file 1 "src/interruptRoutine.cpp"
   1:src/interruptRoutine.cpp **** //
   2:src/interruptRoutine.cpp **** // Created by os on 5/22/23.
   3:src/interruptRoutine.cpp **** //
   4:src/interruptRoutine.cpp **** 
   5:src/interruptRoutine.cpp **** #include "../lib/console.h"
   6:src/interruptRoutine.cpp **** #include "../lib/hw.h"
   7:src/interruptRoutine.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/interruptRoutine.cpp **** #include "../h/helper.hpp"
   9:src/interruptRoutine.cpp **** #include "../h/Riscv.hpp"
  10:src/interruptRoutine.cpp **** #include "../h/syscall_c.hpp"
  11:src/interruptRoutine.cpp **** #include "../h/TCB.hpp"
  12:src/interruptRoutine.cpp **** 
  13:src/interruptRoutine.cpp **** #pragma GCC optimize("O0")
  14:src/interruptRoutine.cpp **** 
  15:src/interruptRoutine.cpp **** extern "C" void interruptRoutine() {
GAS LISTING /tmp/ccsigIod.s 			page 2


  29              		.loc 1 15 36
  30              		.cfi_startproc
  31 0000 130101F6 		addi	sp,sp,-160
  32              		.cfi_def_cfa_offset 160
  33 0004 233C1108 		sd	ra,152(sp)
  34 0008 23388108 		sd	s0,144(sp)
  35              		.cfi_offset 1, -8
  36              		.cfi_offset 8, -16
  37 000c 1304010A 		addi	s0,sp,160
  38              		.cfi_def_cfa 8, 0
  16:src/interruptRoutine.cpp **** 	//uint64 scause = Riscv::r_scause();
  17:src/interruptRoutine.cpp **** 	//uint64 sepc = Riscv::r_sepc();
  18:src/interruptRoutine.cpp **** 	uint64 scause, sepc;
  39              		.loc 1 18 2
  19:src/interruptRoutine.cpp **** 	__asm__ volatile("csrr %[scause], scause":[scause] "=r"(scause): : "a5", "a0", "a1", "a2", "a3", "
  40              		.loc 1 19 2
  41              		.loc 1 19 116 is_stmt 0
  42              	#APP
  43              	# 19 "src/interruptRoutine.cpp" 1
  20              		__asm__ volatile("csrr %[sepc], sepc":[sepc] "=r"(sepc): : "a5", "a0", "a1", "a2", "a3", "a4", "a6
  44              		csrr t1, scause
  45              	# 0 "" 2
  46              	#NO_APP
  47 0014 233464FE 		sd	t1,-24(s0)
  48              	.LVL0:
  49              		.loc 1 20 2 is_stmt 1
  50              		.loc 1 20 108 is_stmt 0
  51              	#APP
  52              	# 20 "src/interruptRoutine.cpp" 1
  21              		uint64 a0, a1, a2, a3, a4, a5, a6, a7;
  53              		csrr t1, sepc
  54              	# 0 "" 2
  55              	.LVL1:
  56              	#NO_APP
  57 001c 233064FE 		sd	t1,-32(s0)
  58              	.LVL2:
  59              		.loc 1 21 2 is_stmt 1
  22:src/interruptRoutine.cpp **** 	__asm__ volatile("mv %[ax], a0":[ax] "=r"(a0): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  60              		.loc 1 22 2
  61              		.loc 1 22 98 is_stmt 0
  62              	#APP
  63              	# 22 "src/interruptRoutine.cpp" 1
  23              		__asm__ volatile("mv %[ax], a1":[ax] "=r"(a1): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  64              		mv t1, a0
  65              	# 0 "" 2
  66              	.LVL3:
  67              	#NO_APP
  68 0024 233C64FC 		sd	t1,-40(s0)
  69              	.LVL4:
  70              		.loc 1 23 2 is_stmt 1
  71              		.loc 1 23 98 is_stmt 0
  72              	#APP
  73              	# 23 "src/interruptRoutine.cpp" 1
  24              		__asm__ volatile("mv %[ax], a2":[ax] "=r"(a2): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  74              		mv t1, a1
  75              	# 0 "" 2
  76              	.LVL5:
GAS LISTING /tmp/ccsigIod.s 			page 3


  77              	#NO_APP
  78 002c 233864FC 		sd	t1,-48(s0)
  79              	.LVL6:
  80              		.loc 1 24 2 is_stmt 1
  81              		.loc 1 24 98 is_stmt 0
  82              	#APP
  83              	# 24 "src/interruptRoutine.cpp" 1
  25              		__asm__ volatile("mv %[ax], a3":[ax] "=r"(a3): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  84              		mv t1, a2
  85              	# 0 "" 2
  86              	.LVL7:
  87              	#NO_APP
  88 0034 233464FC 		sd	t1,-56(s0)
  89              	.LVL8:
  90              		.loc 1 25 2 is_stmt 1
  91              		.loc 1 25 98 is_stmt 0
  92              	#APP
  93              	# 25 "src/interruptRoutine.cpp" 1
  26              		__asm__ volatile("mv %[ax], a4":[ax] "=r"(a4): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
  94              		mv t1, a3
  95              	# 0 "" 2
  96              	.LVL9:
  97              	#NO_APP
  98 003c 233064FC 		sd	t1,-64(s0)
  99              	.LVL10:
 100              		.loc 1 26 2 is_stmt 1
 101              		.loc 1 26 98 is_stmt 0
 102              	#APP
 103              	# 26 "src/interruptRoutine.cpp" 1
  27              		__asm__ volatile("mv %[ax], a5":[ax] "=r"(a5): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 104              		mv t1, a4
 105              	# 0 "" 2
 106              	.LVL11:
 107              	#NO_APP
 108 0044 233C64FA 		sd	t1,-72(s0)
 109              	.LVL12:
 110              		.loc 1 27 2 is_stmt 1
 111              		.loc 1 27 98 is_stmt 0
 112              	#APP
 113              	# 27 "src/interruptRoutine.cpp" 1
  28              		__asm__ volatile("mv %[ax], a6":[ax] "=r"(a6): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 114              		mv t1, a5
 115              	# 0 "" 2
 116              	.LVL13:
 117              	#NO_APP
 118 004c 233864FA 		sd	t1,-80(s0)
 119              	.LVL14:
 120              		.loc 1 28 2 is_stmt 1
 121              		.loc 1 28 98 is_stmt 0
 122              	#APP
 123              	# 28 "src/interruptRoutine.cpp" 1
  29              		__asm__ volatile("mv %[ax], a7":[ax] "=r"(a7): : "a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 124              		mv t1, a6
 125              	# 0 "" 2
 126              	.LVL15:
 127              	#NO_APP
 128 0054 233464FA 		sd	t1,-88(s0)
GAS LISTING /tmp/ccsigIod.s 			page 4


 129              	.LVL16:
 130              		.loc 1 29 2 is_stmt 1
 131              		.loc 1 29 98 is_stmt 0
 132              	#APP
 133              	# 29 "src/interruptRoutine.cpp" 1
  30              	
 134              		mv t1, a7
 135              	# 0 "" 2
 136              	.LVL17:
 137              	#NO_APP
 138 005c 233064FA 		sd	t1,-96(s0)
 139              	.LVL18:
  31:src/interruptRoutine.cpp **** 	if (scause == 0x09 || scause == 0x08) {
 140              		.loc 1 31 2 is_stmt 1
 141              	.LBB2:
 142 0060 033784FE 		ld	a4,-24(s0)
 143 0064 93079000 		li	a5,9
 144 0068 6308F700 		beq	a4,a5,.L2
 145              		.loc 1 31 21 is_stmt 0 discriminator 1
 146 006c 033784FE 		ld	a4,-24(s0)
 147 0070 93078000 		li	a5,8
 148 0074 631AF714 		bne	a4,a5,.L3
 149              	.L2:
 150              	.LBB3:
  32:src/interruptRoutine.cpp **** 		//prekid zbog poziva ecall
  33:src/interruptRoutine.cpp **** 		uint64 opCode = a0;
 151              		.loc 1 33 3 is_stmt 1
 152              		.loc 1 33 10 is_stmt 0
 153 0078 833784FD 		ld	a5,-40(s0)
 154 007c 233CF4F8 		sd	a5,-104(s0)
 155              	.LVL19:
  34:src/interruptRoutine.cpp **** 
  35:src/interruptRoutine.cpp **** 		switch (opCode) {
 156              		.loc 1 35 3 is_stmt 1
 157 0080 033784F9 		ld	a4,-104(s0)
 158 0084 93072004 		li	a5,66
 159              	.LVL20:
 160 0088 63E4E70C 		bgtu	a4,a5,.L4
 161 008c 833784F9 		ld	a5,-104(s0)
 162 0090 13972700 		slli	a4,a5,2
 163              	.LVL21:
 164 0094 97070000 		lla	a5,.L6
 164      93870700 
 165              	.LVL22:
 166 009c B307F700 		add	a5,a4,a5
 167 00a0 83A70700 		lw	a5,0(a5)
 168 00a4 1B870700 		sext.w	a4,a5
 169 00a8 97070000 		lla	a5,.L6
 169      93870700 
 170 00b0 B307F700 		add	a5,a4,a5
 171 00b4 67800700 		jr	a5
 172              		.section	.rodata
 173 0059 000000   		.align	2
 174              		.align	2
 175              	.L6:
 176 005c 00000000 		.word	.L4-.L6
 177 0060 00000000 		.word	.L18-.L6
GAS LISTING /tmp/ccsigIod.s 			page 5


 178 0064 00000000 		.word	.L17-.L6
 179 0068 00000000 		.word	.L4-.L6
 180 006c 00000000 		.word	.L4-.L6
 181 0070 00000000 		.word	.L4-.L6
 182 0074 00000000 		.word	.L4-.L6
 183 0078 00000000 		.word	.L4-.L6
 184 007c 00000000 		.word	.L4-.L6
 185 0080 00000000 		.word	.L4-.L6
 186 0084 00000000 		.word	.L4-.L6
 187 0088 00000000 		.word	.L4-.L6
 188 008c 00000000 		.word	.L4-.L6
 189 0090 00000000 		.word	.L4-.L6
 190 0094 00000000 		.word	.L4-.L6
 191 0098 00000000 		.word	.L4-.L6
 192 009c 00000000 		.word	.L4-.L6
 193 00a0 00000000 		.word	.L16-.L6
 194 00a4 00000000 		.word	.L25-.L6
 195 00a8 00000000 		.word	.L25-.L6
 196 00ac 00000000 		.word	.L25-.L6
 197 00b0 00000000 		.word	.L4-.L6
 198 00b4 00000000 		.word	.L4-.L6
 199 00b8 00000000 		.word	.L4-.L6
 200 00bc 00000000 		.word	.L4-.L6
 201 00c0 00000000 		.word	.L4-.L6
 202 00c4 00000000 		.word	.L4-.L6
 203 00c8 00000000 		.word	.L4-.L6
 204 00cc 00000000 		.word	.L4-.L6
 205 00d0 00000000 		.word	.L4-.L6
 206 00d4 00000000 		.word	.L4-.L6
 207 00d8 00000000 		.word	.L4-.L6
 208 00dc 00000000 		.word	.L4-.L6
 209 00e0 00000000 		.word	.L25-.L6
 210 00e4 00000000 		.word	.L25-.L6
 211 00e8 00000000 		.word	.L25-.L6
 212 00ec 00000000 		.word	.L25-.L6
 213 00f0 00000000 		.word	.L4-.L6
 214 00f4 00000000 		.word	.L4-.L6
 215 00f8 00000000 		.word	.L4-.L6
 216 00fc 00000000 		.word	.L4-.L6
 217 0100 00000000 		.word	.L4-.L6
 218 0104 00000000 		.word	.L4-.L6
 219 0108 00000000 		.word	.L4-.L6
 220 010c 00000000 		.word	.L4-.L6
 221 0110 00000000 		.word	.L4-.L6
 222 0114 00000000 		.word	.L4-.L6
 223 0118 00000000 		.word	.L4-.L6
 224 011c 00000000 		.word	.L4-.L6
 225 0120 00000000 		.word	.L25-.L6
 226 0124 00000000 		.word	.L4-.L6
 227 0128 00000000 		.word	.L4-.L6
 228 012c 00000000 		.word	.L4-.L6
 229 0130 00000000 		.word	.L4-.L6
 230 0134 00000000 		.word	.L4-.L6
 231 0138 00000000 		.word	.L4-.L6
 232 013c 00000000 		.word	.L4-.L6
 233 0140 00000000 		.word	.L4-.L6
 234 0144 00000000 		.word	.L4-.L6
GAS LISTING /tmp/ccsigIod.s 			page 6


 235 0148 00000000 		.word	.L4-.L6
 236 014c 00000000 		.word	.L4-.L6
 237 0150 00000000 		.word	.L4-.L6
 238 0154 00000000 		.word	.L4-.L6
 239 0158 00000000 		.word	.L4-.L6
 240 015c 00000000 		.word	.L4-.L6
 241 0160 00000000 		.word	.L25-.L6
 242 0164 00000000 		.word	.L25-.L6
 243              		.text
 244              	.L18:
 245              	.LBB4:
 246              	.LBB5:
  36:src/interruptRoutine.cpp **** 			case 0x01:
 247              		.loc 1 36 4
  37:src/interruptRoutine.cpp **** 				//mem_alloc
  38:src/interruptRoutine.cpp **** 				size_t size;
 248              		.loc 1 38 5
  39:src/interruptRoutine.cpp **** 				size = (size_t)a1;
 249              		.loc 1 39 5
 250              		.loc 1 39 10 is_stmt 0
 251 00b8 833704FD 		ld	a5,-48(s0)
 252 00bc 2334F4F6 		sd	a5,-152(s0)
 253              	.LVL23:
  40:src/interruptRoutine.cpp **** 				//__asm__ volatile("mv %[size], a1":[size] "=r"(size));
  41:src/interruptRoutine.cpp **** 				size = size * MEM_BLOCK_SIZE;
 254              		.loc 1 41 5 is_stmt 1
 255              		.loc 1 41 10 is_stmt 0
 256 00c0 833784F6 		ld	a5,-152(s0)
 257 00c4 93976700 		slli	a5,a5,6
 258              	.LVL24:
 259 00c8 2334F4F6 		sd	a5,-152(s0)
 260              	.LVL25:
  42:src/interruptRoutine.cpp **** 				MemoryAllocator::kmalloc(size);
 261              		.loc 1 42 5 is_stmt 1
 262              		.loc 1 42 29 is_stmt 0
 263 00cc 033584F6 		ld	a0,-152(s0)
 264 00d0 97000000 		call	_ZN15MemoryAllocator7kmallocEm@plt
 264      E7800000 
 265              	.LVL26:
  43:src/interruptRoutine.cpp **** 				break;
 266              		.loc 1 43 5 is_stmt 1
 267 00d8 6F00400D 		j	.L19
 268              	.LVL27:
 269              	.L17:
  44:src/interruptRoutine.cpp **** 			case 0x02:
 270              		.loc 1 44 4
  45:src/interruptRoutine.cpp **** 				//mem_free
  46:src/interruptRoutine.cpp **** 				void* ptr;
 271              		.loc 1 46 5
  47:src/interruptRoutine.cpp **** 				ptr = (void*)a1;
 272              		.loc 1 47 5
 273              		.loc 1 47 9 is_stmt 0
 274 00dc 833704FD 		ld	a5,-48(s0)
 275 00e0 2338F4F6 		sd	a5,-144(s0)
 276              	.LVL28:
  48:src/interruptRoutine.cpp **** 				//__asm__ volatile("mv %[ptr], a1" :[ptr]"=r"(ptr));
  49:src/interruptRoutine.cpp **** 				MemoryAllocator::kfree(ptr);
GAS LISTING /tmp/ccsigIod.s 			page 7


 277              		.loc 1 49 5 is_stmt 1
 278              		.loc 1 49 27 is_stmt 0
 279 00e4 033504F7 		ld	a0,-144(s0)
 280 00e8 97000000 		call	_ZN15MemoryAllocator5kfreeEPv@plt
 280      E7800000 
 281              	.LVL29:
  50:src/interruptRoutine.cpp **** 				break;
 282              		.loc 1 50 5 is_stmt 1
 283 00f0 6F00C00B 		j	.L19
 284              	.LVL30:
 285              	.L16:
  51:src/interruptRoutine.cpp **** 			case 0x11:
 286              		.loc 1 51 4
  52:src/interruptRoutine.cpp **** 				//thread_create
  53:src/interruptRoutine.cpp **** 				thread_t* handle;
 287              		.loc 1 53 5
  54:src/interruptRoutine.cpp **** 				handle = (thread_t*)a1;
 288              		.loc 1 54 5
 289              		.loc 1 54 12 is_stmt 0
 290 00f4 833704FD 		ld	a5,-48(s0)
 291 00f8 2338F4F8 		sd	a5,-112(s0)
 292              	.LVL31:
  55:src/interruptRoutine.cpp **** 				void (* function)(void*);
 293              		.loc 1 55 5 is_stmt 1
  56:src/interruptRoutine.cpp **** 				function = (void (*)(void*))a2;
 294              		.loc 1 56 5
 295              		.loc 1 56 14 is_stmt 0
 296 00fc 833784FC 		ld	a5,-56(s0)
 297              	.LVL32:
 298 0100 2334F4F8 		sd	a5,-120(s0)
 299              	.LVL33:
  57:src/interruptRoutine.cpp **** 				void* args;
 300              		.loc 1 57 5 is_stmt 1
  58:src/interruptRoutine.cpp **** 				args = (void*)a3;
 301              		.loc 1 58 5
 302              		.loc 1 58 10 is_stmt 0
 303 0104 833704FC 		ld	a5,-64(s0)
 304              	.LVL34:
 305 0108 2330F4F8 		sd	a5,-128(s0)
 306              	.LVL35:
  59:src/interruptRoutine.cpp **** 				uint64* sp;
 307              		.loc 1 59 5 is_stmt 1
  60:src/interruptRoutine.cpp **** 				sp = (uint64*)a4;
 308              		.loc 1 60 5
 309              		.loc 1 60 8 is_stmt 0
 310 010c 833784FB 		ld	a5,-72(s0)
 311              	.LVL36:
 312 0110 233CF4F6 		sd	a5,-136(s0)
 313              	.LVL37:
  61:src/interruptRoutine.cpp **** //				__asm__ volatile("mv %[handle], a1":[handle]"=r"(handle));
  62:src/interruptRoutine.cpp **** //				__asm__ volatile("mv %[f], a2":[f]"=r"(function));
  63:src/interruptRoutine.cpp **** //				__asm__ volatile("mv %[args], a3":[args]"=r"(args));
  64:src/interruptRoutine.cpp **** //				__asm__ volatile("mv %[sp], a4":[sp]"=r"(sp));
  65:src/interruptRoutine.cpp **** 
  66:src/interruptRoutine.cpp **** 				*handle = TCB::createThread(function, args, sp);
 314              		.loc 1 66 5 is_stmt 1
 315              		.loc 1 66 32 is_stmt 0
GAS LISTING /tmp/ccsigIod.s 			page 8


 316 0114 033684F7 		ld	a2,-136(s0)
 317 0118 833504F8 		ld	a1,-128(s0)
 318 011c 033584F8 		ld	a0,-120(s0)
 319 0120 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 319      E7800000 
 320              	.LVL38:
 321 0128 13070500 		mv	a4,a0
 322              		.loc 1 66 13
 323 012c 833704F9 		ld	a5,-112(s0)
 324 0130 23B0E700 		sd	a4,0(a5)
  67:src/interruptRoutine.cpp **** 				if (*handle != nullptr) {
 325              		.loc 1 67 5 is_stmt 1
 326              		.loc 1 67 9 is_stmt 0
 327 0134 833704F9 		ld	a5,-112(s0)
 328 0138 83B70700 		ld	a5,0(a5)
 329              		.loc 1 67 5
 330 013c 63860700 		beqz	a5,.L20
  68:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, 0");
 331              		.loc 1 68 6 is_stmt 1
 332              		.loc 1 68 34 is_stmt 0
 333              	#APP
 334              	# 68 "src/interruptRoutine.cpp" 1
  69              					} else {
  70:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, -1");
  71:src/interruptRoutine.cpp **** 				}
  72:src/interruptRoutine.cpp **** 				break;
 335              		li a0, 0
 336              	# 0 "" 2
 337              		.loc 1 72 5
 338              	#NO_APP
 339 0144 6F008006 		j	.L19
 340              	.L20:
  70:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, -1");
 341              		.loc 1 70 6 is_stmt 1
  70:src/interruptRoutine.cpp **** 					__asm__ volatile("li a0, -1");
 342              		.loc 1 70 35 is_stmt 0
 343              	#APP
 344              	# 70 "src/interruptRoutine.cpp" 1
 345              		li a0, -1
 346              	# 0 "" 2
 347              		.loc 1 72 5 is_stmt 1
 348              	#NO_APP
 349 014c 6F000006 		j	.L19
 350              	.LVL39:
 351              	.L4:
  73:src/interruptRoutine.cpp **** 			case 0x12:
  74:src/interruptRoutine.cpp **** 				//thread_exit
  75:src/interruptRoutine.cpp **** 				break;
  76:src/interruptRoutine.cpp **** 			case 0x13:
  77:src/interruptRoutine.cpp **** 				//thread_dispatch
  78:src/interruptRoutine.cpp **** 				break;
  79:src/interruptRoutine.cpp **** 			case 0x14:
  80:src/interruptRoutine.cpp **** 				//thread_join
  81:src/interruptRoutine.cpp **** 				break;
  82:src/interruptRoutine.cpp **** 			case 0x21:
  83:src/interruptRoutine.cpp **** 				//sem_open
  84:src/interruptRoutine.cpp **** 				break;
GAS LISTING /tmp/ccsigIod.s 			page 9


  85:src/interruptRoutine.cpp **** 			case 0x22:
  86:src/interruptRoutine.cpp **** 				//sem_close
  87:src/interruptRoutine.cpp **** 				break;
  88:src/interruptRoutine.cpp **** 			case 0x23:
  89:src/interruptRoutine.cpp **** 				//sem_wait
  90:src/interruptRoutine.cpp **** 				break;
  91:src/interruptRoutine.cpp **** 			case 0x24:
  92:src/interruptRoutine.cpp **** 				//sem_signal
  93:src/interruptRoutine.cpp **** 				break;
  94:src/interruptRoutine.cpp **** 			case 0x31:
  95:src/interruptRoutine.cpp **** 				//time_sleep
  96:src/interruptRoutine.cpp **** 				break;
  97:src/interruptRoutine.cpp **** 			case 0x41:
  98:src/interruptRoutine.cpp **** 				//getc
  99:src/interruptRoutine.cpp **** 				break;
 100:src/interruptRoutine.cpp **** 			case 0x42:
 101:src/interruptRoutine.cpp **** 				//putc
 102:src/interruptRoutine.cpp **** 				break;
 103:src/interruptRoutine.cpp **** 			default:
 352              		.loc 1 103 4
 104:src/interruptRoutine.cpp **** 				printString("\nNepostojeci op code: ");
 353              		.loc 1 104 5
 354              		.loc 1 104 16 is_stmt 0
 355 0150 17050000 		lla	a0,.LC0
 355      13050500 
 356 0158 97000000 		call	_Z11printStringPKc@plt
 356      E7800000 
 357              	.LVL40:
 105:src/interruptRoutine.cpp **** 				printInteger(opCode);
 358              		.loc 1 105 5 is_stmt 1
 359              		.loc 1 105 17 is_stmt 0
 360 0160 033584F9 		ld	a0,-104(s0)
 361 0164 97000000 		call	_Z12printIntegerm@plt
 361      E7800000 
 362              	.LVL41:
 106:src/interruptRoutine.cpp **** 				printString("\nscause: ");
 363              		.loc 1 106 5 is_stmt 1
 364              		.loc 1 106 16 is_stmt 0
 365 016c 17050000 		lla	a0,.LC1
 365      13050500 
 366 0174 97000000 		call	_Z11printStringPKc@plt
 366      E7800000 
 367              	.LVL42:
 107:src/interruptRoutine.cpp **** 				printInteger(scause);
 368              		.loc 1 107 5 is_stmt 1
 369              		.loc 1 107 17 is_stmt 0
 370 017c 033584FE 		ld	a0,-24(s0)
 371 0180 97000000 		call	_Z12printIntegerm@plt
 371      E7800000 
 372              	.LVL43:
 108:src/interruptRoutine.cpp **** 				printString("\nsepc: ");
 373              		.loc 1 108 5 is_stmt 1
 374              		.loc 1 108 16 is_stmt 0
 375 0188 17050000 		lla	a0,.LC2
 375      13050500 
 376 0190 97000000 		call	_Z11printStringPKc@plt
 376      E7800000 
GAS LISTING /tmp/ccsigIod.s 			page 10


 377              	.LVL44:
 109:src/interruptRoutine.cpp **** 				printInteger(sepc);
 378              		.loc 1 109 5 is_stmt 1
 379              		.loc 1 109 17 is_stmt 0
 380 0198 033504FE 		ld	a0,-32(s0)
 381 019c 97000000 		call	_Z12printIntegerm@plt
 381      E7800000 
 382              	.LVL45:
 110:src/interruptRoutine.cpp **** 				break;
 383              		.loc 1 110 5 is_stmt 1
 384 01a4 6F008000 		j	.L19
 385              	.LVL46:
 386              	.L25:
  75:src/interruptRoutine.cpp **** 			case 0x13:
 387              		.loc 1 75 5 is_stmt 0
 388 01a8 13000000 		nop
 389              	.LVL47:
 390              	.L19:
 391              	.LBE5:
 392              	.LBE4:
 111:src/interruptRoutine.cpp **** 		}
 112:src/interruptRoutine.cpp **** 		//sepc pokazuje na ecall instrukciju, treba preci na sledecu instrukciju
 113:src/interruptRoutine.cpp **** 		//sepc += 4;
 114:src/interruptRoutine.cpp **** 		__asm__ volatile("addi %[dst], %[src], 0x4":[dst]"=r"(sepc):[src]"r"(
 393              		.loc 1 114 3 is_stmt 1
 115:src/interruptRoutine.cpp **** 				sepc):"a5", "a0", "a1", "a2", "a3", "a4", "a6", "a7");
 394              		.loc 1 115 58 is_stmt 0
 395 01ac 033304FE 		ld	t1,-32(s0)
 396              	#APP
 397              	# 115 "src/interruptRoutine.cpp" 1
 116              			__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc):"a5", "a0", "a1", "a2", "a3", "a4", "a6"
 398              		addi t1, t1, 0x4
 399              	# 0 "" 2
 400              	.LVL48:
 401              	#NO_APP
 402 01b4 233064FE 		sd	t1,-32(s0)
 403              	.LVL49:
 404              		.loc 1 116 3 is_stmt 1
 405              		.loc 1 116 107 is_stmt 0
 406 01b8 033304FE 		ld	t1,-32(s0)
 407              	#APP
 408              	# 116 "src/interruptRoutine.cpp" 1
 117              			//Riscv::w_sepc(sepc + 4);
 409              		csrw sepc, t1
 410              	# 0 "" 2
 411              	#NO_APP
 412              	.LBE3:
 413 01c0 13000000 		nop
 414              	.LBE2:
 118:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 9)) {
 119:src/interruptRoutine.cpp **** 		//spoljasnji hardverski prekid
 120:src/interruptRoutine.cpp **** 		console_handler();
 121:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
 122:src/interruptRoutine.cpp **** 		//prekid od tajmera
 123:src/interruptRoutine.cpp **** 		Riscv::mc_sip(Riscv::SIP_SSIP);
 124:src/interruptRoutine.cpp **** 	} else {
 125:src/interruptRoutine.cpp **** 		println("\nGreska u prekidnoj rutini");
GAS LISTING /tmp/ccsigIod.s 			page 11


 126:src/interruptRoutine.cpp **** 		printString("scause: ");
 127:src/interruptRoutine.cpp **** 		printInteger(scause);
 128:src/interruptRoutine.cpp **** 		printString("\nsepc: ");
 129:src/interruptRoutine.cpp **** 		printInteger(sepc);
 130:src/interruptRoutine.cpp **** 	}
 131:src/interruptRoutine.cpp **** }
 415              		.loc 1 131 1
 416 01c4 6F000009 		j	.L26
 417              	.LVL50:
 418              	.L3:
 419              	.LBB6:
 118:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 9)) {
 420              		.loc 1 118 9 is_stmt 1
 421 01c8 033784FE 		ld	a4,-24(s0)
 422              	.LVL51:
 423 01cc 9307F0FF 		li	a5,-1
 424 01d0 9397F703 		slli	a5,a5,63
 425 01d4 93879700 		addi	a5,a5,9
 426 01d8 6318F700 		bne	a4,a5,.L23
 120:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
 427              		.loc 1 120 3
 120:src/interruptRoutine.cpp **** 	} else if (scause == (1UL << 63 | 1)) {
 428              		.loc 1 120 18 is_stmt 0
 429 01dc 97000000 		call	console_handler@plt
 429      E7800000 
 430              	.LVL52:
 431              	.LBE6:
 432              		.loc 1 131 1
 433 01e4 6F000007 		j	.L26
 434              	.LVL53:
 435              	.L23:
 436              	.LBB7:
 121:src/interruptRoutine.cpp **** 		//prekid od tajmera
 437              		.loc 1 121 9 is_stmt 1
 438 01e8 033784FE 		ld	a4,-24(s0)
 439 01ec 9307F0FF 		li	a5,-1
 440 01f0 9397F703 		slli	a5,a5,63
 441 01f4 93871700 		addi	a5,a5,1
 442 01f8 631AF700 		bne	a4,a5,.L24
 123:src/interruptRoutine.cpp **** 	} else {
 443              		.loc 1 123 3
 123:src/interruptRoutine.cpp **** 	} else {
 444              		.loc 1 123 16 is_stmt 0
 445 01fc 13052000 		li	a0,2
 446 0200 97000000 		call	_ZN5Riscv6mc_sipEm
 446      E7800000 
 447              	.LVL54:
 448              	.LBE7:
 449              		.loc 1 131 1
 450 0208 6F00C004 		j	.L26
 451              	.LVL55:
 452              	.L24:
 453              	.LBB8:
 125:src/interruptRoutine.cpp **** 		printString("scause: ");
 454              		.loc 1 125 3 is_stmt 1
 125:src/interruptRoutine.cpp **** 		printString("scause: ");
 455              		.loc 1 125 10 is_stmt 0
GAS LISTING /tmp/ccsigIod.s 			page 12


 456 020c 17050000 		lla	a0,.LC3
 456      13050500 
 457 0214 97000000 		call	_Z7printlnPKc@plt
 457      E7800000 
 458              	.LVL56:
 126:src/interruptRoutine.cpp **** 		printInteger(scause);
 459              		.loc 1 126 3 is_stmt 1
 126:src/interruptRoutine.cpp **** 		printInteger(scause);
 460              		.loc 1 126 14 is_stmt 0
 461 021c 17050000 		lla	a0,.LC4
 461      13050500 
 462 0224 97000000 		call	_Z11printStringPKc@plt
 462      E7800000 
 463              	.LVL57:
 127:src/interruptRoutine.cpp **** 		printString("\nsepc: ");
 464              		.loc 1 127 3 is_stmt 1
 127:src/interruptRoutine.cpp **** 		printString("\nsepc: ");
 465              		.loc 1 127 15 is_stmt 0
 466 022c 033584FE 		ld	a0,-24(s0)
 467 0230 97000000 		call	_Z12printIntegerm@plt
 467      E7800000 
 468              	.LVL58:
 128:src/interruptRoutine.cpp **** 		printInteger(sepc);
 469              		.loc 1 128 3 is_stmt 1
 128:src/interruptRoutine.cpp **** 		printInteger(sepc);
 470              		.loc 1 128 14 is_stmt 0
 471 0238 17050000 		lla	a0,.LC2
 471      13050500 
 472 0240 97000000 		call	_Z11printStringPKc@plt
 472      E7800000 
 473              	.LVL59:
 129:src/interruptRoutine.cpp **** 	}
 474              		.loc 1 129 3 is_stmt 1
 129:src/interruptRoutine.cpp **** 	}
 475              		.loc 1 129 15 is_stmt 0
 476 0248 033504FE 		ld	a0,-32(s0)
 477 024c 97000000 		call	_Z12printIntegerm@plt
 477      E7800000 
 478              	.LVL60:
 479              	.L26:
 480              	.LBE8:
 481              		.loc 1 131 1
 482 0254 13000000 		nop
 483 0258 83308109 		ld	ra,152(sp)
 484              		.cfi_restore 1
 485 025c 03340109 		ld	s0,144(sp)
 486              		.cfi_restore 8
 487              		.cfi_def_cfa 2, 160
 488              	.LVL61:
 489 0260 1301010A 		addi	sp,sp,160
 490              		.cfi_def_cfa_offset 0
 491              	.LVL62:
 492 0264 67800000 		jr	ra
 493              		.cfi_endproc
 494              	.LFE43:
 496              		.section	.text._ZN5Riscv6mc_sipEm,"axG",@progbits,_ZN5Riscv6mc_sipEm,comdat
 497              		.align	2
GAS LISTING /tmp/ccsigIod.s 			page 13


 498              		.weak	_ZN5Riscv6mc_sipEm
 500              	_ZN5Riscv6mc_sipEm:
 501              	.LFB10:
 502              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	//stavljanje registara x3-x31 na stek
  14:src/../h/Riscv.hpp **** 	static void pushRegisters();    //implementacija u asm
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp **** 	//skidanje registara x3-x31 sa steka
  17:src/../h/Riscv.hpp **** 	static void popRegisters();     //implementacija u asm
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp **** 	//read scause
  20:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp **** 	//write scause
  23:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp **** 	//read sepc
  26:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp **** 	//write sepc
  29:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp **** 	//read stvec
  32:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp **** 	//write stvec
  35:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  38:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),    //postoji zahtev za softverski prekid
  39:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),    //postoji prekid od tajmera
  40:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)        //postoji zahtev za spoljasnji hardverski prekid
  41:src/../h/Riscv.hpp **** 	};
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp **** 	//mask set sip
  44:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp **** 	//mask clear sip
  47:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp **** 	//read sip
  50:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp **** 	//write sip
  53:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
GAS LISTING /tmp/ccsigIod.s 			page 14


  54:src/../h/Riscv.hpp **** 
  55:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  56:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  57:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  58:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  59:src/../h/Riscv.hpp **** 	};
  60:src/../h/Riscv.hpp **** 
  61:src/../h/Riscv.hpp **** 	//mask set sstatus
  62:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  63:src/../h/Riscv.hpp **** 
  64:src/../h/Riscv.hpp **** 	//mask clear sstatus
  65:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  66:src/../h/Riscv.hpp **** 
  67:src/../h/Riscv.hpp **** 	//read sstatus
  68:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  69:src/../h/Riscv.hpp **** 
  70:src/../h/Riscv.hpp **** 	//write sstatus
  71:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  72:src/../h/Riscv.hpp **** 
  73:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  74:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  75:src/../h/Riscv.hpp **** 
  76:src/../h/Riscv.hpp **** };
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  79:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  80:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  81:src/../h/Riscv.hpp **** 	return scause;
  82:src/../h/Riscv.hpp **** }
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  85:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  86:src/../h/Riscv.hpp **** }
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  89:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
  90:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
  91:src/../h/Riscv.hpp **** 	return sepc;
  92:src/../h/Riscv.hpp **** }
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
  95:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
  99:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 100:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 101:src/../h/Riscv.hpp **** 	return stvec;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 105:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 109:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 110:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccsigIod.s 			page 15


 111:src/../h/Riscv.hpp **** 
 112:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 503              		.loc 2 112 40 is_stmt 1
 504              		.cfi_startproc
 505              	.LVL63:
 506 0000 130101FF 		addi	sp,sp,-16
 507              		.cfi_def_cfa_offset 16
 508 0004 23348100 		sd	s0,8(sp)
 509              		.cfi_offset 8, -8
 510 0008 13040101 		addi	s0,sp,16
 511              		.cfi_def_cfa 8, 0
 113:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 512              		.loc 2 113 2
 513              		.loc 2 113 58 is_stmt 0
 514              	#APP
 515              	# 113 "src/../h/Riscv.hpp" 1
 114              	}
 516              		csrc sip, a0
 517              	# 0 "" 2
 518              		.loc 2 114 1
 519              	#NO_APP
 520 0010 03348100 		ld	s0,8(sp)
 521              		.cfi_restore 8
 522              		.cfi_def_cfa 2, 16
 523 0014 13010101 		addi	sp,sp,16
 524              		.cfi_def_cfa_offset 0
 525 0018 67800000 		jr	ra
 526              		.cfi_endproc
 527              	.LFE10:
 529              		.text
 530              	.Letext0:
 531              		.file 3 "src/../lib/hw.h"
 532              		.file 4 "src/../h/MemoryAllocator.hpp"
 533              		.file 5 "src/../h/syscall_c.hpp"
 534              		.file 6 "src/../h/TCB.hpp"
 535              		.file 7 "src/../h/helper.hpp"
 536              		.file 8 "src/../lib/console.h"
GAS LISTING /tmp/ccsigIod.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 interruptRoutine.cpp
     /tmp/ccsigIod.s:26     .text:0000000000000000 interruptRoutine
     /tmp/ccsigIod.s:30     .text:0000000000000000 .L0 
     /tmp/ccsigIod.s:31     .text:0000000000000000 .L0 
     /tmp/ccsigIod.s:32     .text:0000000000000004 .L0 
     /tmp/ccsigIod.s:35     .text:000000000000000c .L0 
     /tmp/ccsigIod.s:36     .text:000000000000000c .L0 
     /tmp/ccsigIod.s:38     .text:0000000000000010 .L0 
     /tmp/ccsigIod.s:40     .text:0000000000000010 .L0 
     /tmp/ccsigIod.s:41     .text:0000000000000010 .L0 
src/interruptRoutine.cpp:19     .text:0000000000000010 .L0 
     /tmp/ccsigIod.s:50     .text:0000000000000018 .L0 
src/interruptRoutine.cpp:20     .text:0000000000000018 .L0 
     /tmp/ccsigIod.s:60     .text:0000000000000020 .L0 
     /tmp/ccsigIod.s:61     .text:0000000000000020 .L0 
src/interruptRoutine.cpp:22     .text:0000000000000020 .L0 
     /tmp/ccsigIod.s:71     .text:0000000000000028 .L0 
src/interruptRoutine.cpp:23     .text:0000000000000028 .L0 
     /tmp/ccsigIod.s:81     .text:0000000000000030 .L0 
src/interruptRoutine.cpp:24     .text:0000000000000030 .L0 
     /tmp/ccsigIod.s:91     .text:0000000000000038 .L0 
src/interruptRoutine.cpp:25     .text:0000000000000038 .L0 
     /tmp/ccsigIod.s:101    .text:0000000000000040 .L0 
src/interruptRoutine.cpp:26     .text:0000000000000040 .L0 
     /tmp/ccsigIod.s:111    .text:0000000000000048 .L0 
src/interruptRoutine.cpp:27     .text:0000000000000048 .L0 
     /tmp/ccsigIod.s:121    .text:0000000000000050 .L0 
src/interruptRoutine.cpp:28     .text:0000000000000050 .L0 
     /tmp/ccsigIod.s:131    .text:0000000000000058 .L0 
src/interruptRoutine.cpp:29     .text:0000000000000058 .L0 
     /tmp/ccsigIod.s:142    .text:0000000000000060 .L0 
     /tmp/ccsigIod.s:146    .text:000000000000006c .L0 
     /tmp/ccsigIod.s:152    .text:0000000000000078 .L0 
     /tmp/ccsigIod.s:153    .text:0000000000000078 .L0 
     /tmp/ccsigIod.s:157    .text:0000000000000080 .L0 
     /tmp/ccsigIod.s:248    .text:00000000000000b8 .L0 
     /tmp/ccsigIod.s:249    .text:00000000000000b8 .L0 
     /tmp/ccsigIod.s:250    .text:00000000000000b8 .L0 
     /tmp/ccsigIod.s:251    .text:00000000000000b8 .L0 
     /tmp/ccsigIod.s:255    .text:00000000000000c0 .L0 
     /tmp/ccsigIod.s:256    .text:00000000000000c0 .L0 
     /tmp/ccsigIod.s:262    .text:00000000000000cc .L0 
     /tmp/ccsigIod.s:263    .text:00000000000000cc .L0 
     /tmp/ccsigIod.s:267    .text:00000000000000d8 .L0 
     /tmp/ccsigIod.s:271    .text:00000000000000dc .L0 
     /tmp/ccsigIod.s:272    .text:00000000000000dc .L0 
     /tmp/ccsigIod.s:273    .text:00000000000000dc .L0 
     /tmp/ccsigIod.s:274    .text:00000000000000dc .L0 
     /tmp/ccsigIod.s:278    .text:00000000000000e4 .L0 
     /tmp/ccsigIod.s:279    .text:00000000000000e4 .L0 
     /tmp/ccsigIod.s:283    .text:00000000000000f0 .L0 
     /tmp/ccsigIod.s:287    .text:00000000000000f4 .L0 
     /tmp/ccsigIod.s:288    .text:00000000000000f4 .L0 
     /tmp/ccsigIod.s:289    .text:00000000000000f4 .L0 
     /tmp/ccsigIod.s:290    .text:00000000000000f4 .L0 
     /tmp/ccsigIod.s:294    .text:00000000000000fc .L0 
GAS LISTING /tmp/ccsigIod.s 			page 17


     /tmp/ccsigIod.s:295    .text:00000000000000fc .L0 
     /tmp/ccsigIod.s:296    .text:00000000000000fc .L0 
     /tmp/ccsigIod.s:301    .text:0000000000000104 .L0 
     /tmp/ccsigIod.s:302    .text:0000000000000104 .L0 
     /tmp/ccsigIod.s:303    .text:0000000000000104 .L0 
     /tmp/ccsigIod.s:308    .text:000000000000010c .L0 
     /tmp/ccsigIod.s:309    .text:000000000000010c .L0 
     /tmp/ccsigIod.s:310    .text:000000000000010c .L0 
     /tmp/ccsigIod.s:315    .text:0000000000000114 .L0 
     /tmp/ccsigIod.s:316    .text:0000000000000114 .L0 
     /tmp/ccsigIod.s:323    .text:000000000000012c .L0 
     /tmp/ccsigIod.s:326    .text:0000000000000134 .L0 
     /tmp/ccsigIod.s:327    .text:0000000000000134 .L0 
     /tmp/ccsigIod.s:330    .text:000000000000013c .L0 
     /tmp/ccsigIod.s:332    .text:0000000000000140 .L0 
src/interruptRoutine.cpp:68     .text:0000000000000140 .L0 
     /tmp/ccsigIod.s:339    .text:0000000000000144 .L0 
     /tmp/ccsigIod.s:342    .text:0000000000000148 .L0 
src/interruptRoutine.cpp:70     .text:0000000000000148 .L0 
     /tmp/ccsigIod.s:349    .text:000000000000014c .L0 
     /tmp/ccsigIod.s:353    .text:0000000000000150 .L0 
     /tmp/ccsigIod.s:354    .text:0000000000000150 .L0 
     /tmp/ccsigIod.s:355    .text:0000000000000150 .L0 
     /tmp/ccsigIod.s:359    .text:0000000000000160 .L0 
     /tmp/ccsigIod.s:360    .text:0000000000000160 .L0 
     /tmp/ccsigIod.s:364    .text:000000000000016c .L0 
     /tmp/ccsigIod.s:365    .text:000000000000016c .L0 
     /tmp/ccsigIod.s:369    .text:000000000000017c .L0 
     /tmp/ccsigIod.s:370    .text:000000000000017c .L0 
     /tmp/ccsigIod.s:374    .text:0000000000000188 .L0 
     /tmp/ccsigIod.s:375    .text:0000000000000188 .L0 
     /tmp/ccsigIod.s:379    .text:0000000000000198 .L0 
     /tmp/ccsigIod.s:380    .text:0000000000000198 .L0 
     /tmp/ccsigIod.s:384    .text:00000000000001a4 .L0 
     /tmp/ccsigIod.s:388    .text:00000000000001a8 .L0 
     /tmp/ccsigIod.s:394    .text:00000000000001ac .L0 
     /tmp/ccsigIod.s:395    .text:00000000000001ac .L0 
     /tmp/ccsigIod.s:405    .text:00000000000001b8 .L0 
     /tmp/ccsigIod.s:406    .text:00000000000001b8 .L0 
     /tmp/ccsigIod.s:416    .text:00000000000001c4 .L0 
     /tmp/ccsigIod.s:421    .text:00000000000001c8 .L0 
     /tmp/ccsigIod.s:428    .text:00000000000001dc .L0 
     /tmp/ccsigIod.s:429    .text:00000000000001dc .L0 
     /tmp/ccsigIod.s:433    .text:00000000000001e4 .L0 
     /tmp/ccsigIod.s:438    .text:00000000000001e8 .L0 
     /tmp/ccsigIod.s:444    .text:00000000000001fc .L0 
     /tmp/ccsigIod.s:445    .text:00000000000001fc .L0 
     /tmp/ccsigIod.s:500    .text._ZN5Riscv6mc_sipEm:0000000000000000 _ZN5Riscv6mc_sipEm
     /tmp/ccsigIod.s:450    .text:0000000000000208 .L0 
     /tmp/ccsigIod.s:455    .text:000000000000020c .L0 
     /tmp/ccsigIod.s:456    .text:000000000000020c .L0 
     /tmp/ccsigIod.s:460    .text:000000000000021c .L0 
     /tmp/ccsigIod.s:461    .text:000000000000021c .L0 
     /tmp/ccsigIod.s:465    .text:000000000000022c .L0 
     /tmp/ccsigIod.s:466    .text:000000000000022c .L0 
     /tmp/ccsigIod.s:470    .text:0000000000000238 .L0 
     /tmp/ccsigIod.s:471    .text:0000000000000238 .L0 
GAS LISTING /tmp/ccsigIod.s 			page 18


     /tmp/ccsigIod.s:475    .text:0000000000000248 .L0 
     /tmp/ccsigIod.s:476    .text:0000000000000248 .L0 
     /tmp/ccsigIod.s:482    .text:0000000000000254 .L0 
     /tmp/ccsigIod.s:484    .text:000000000000025c .L0 
     /tmp/ccsigIod.s:486    .text:0000000000000260 .L0 
     /tmp/ccsigIod.s:487    .text:0000000000000260 .L0 
     /tmp/ccsigIod.s:490    .text:0000000000000264 .L0 
     /tmp/ccsigIod.s:493    .text:0000000000000268 .L0 
     /tmp/ccsigIod.s:504    .text._ZN5Riscv6mc_sipEm:0000000000000000 .L0 
     /tmp/ccsigIod.s:506    .text._ZN5Riscv6mc_sipEm:0000000000000000 .L0 
     /tmp/ccsigIod.s:507    .text._ZN5Riscv6mc_sipEm:0000000000000004 .L0 
     /tmp/ccsigIod.s:509    .text._ZN5Riscv6mc_sipEm:0000000000000008 .L0 
     /tmp/ccsigIod.s:511    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
     /tmp/ccsigIod.s:513    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
  src/../h/Riscv.hpp:113    .text._ZN5Riscv6mc_sipEm:000000000000000c .L0 
     /tmp/ccsigIod.s:520    .text._ZN5Riscv6mc_sipEm:0000000000000010 .L0 
     /tmp/ccsigIod.s:521    .text._ZN5Riscv6mc_sipEm:0000000000000014 .L0 
     /tmp/ccsigIod.s:522    .text._ZN5Riscv6mc_sipEm:0000000000000014 .L0 
     /tmp/ccsigIod.s:524    .text._ZN5Riscv6mc_sipEm:0000000000000018 .L0 
     /tmp/ccsigIod.s:526    .text._ZN5Riscv6mc_sipEm:000000000000001c .L0 
     /tmp/ccsigIod.s:537    .text:0000000000000268 .L0 
     /tmp/ccsigIod.s:529    .text._ZN5Riscv6mc_sipEm:000000000000001c .L0 
     /tmp/ccsigIod.s:175    .rodata:000000000000005c .L6
     /tmp/ccsigIod.s:164    .text:0000000000000094 .L0 
     /tmp/ccsigIod.s:169    .text:00000000000000a8 .L0 
     /tmp/ccsigIod.s:8      .rodata:0000000000000000 .LC0
     /tmp/ccsigIod.s:355    .text:0000000000000150 .L0 
     /tmp/ccsigIod.s:11     .rodata:0000000000000018 .LC1
     /tmp/ccsigIod.s:365    .text:000000000000016c .L0 
     /tmp/ccsigIod.s:14     .rodata:0000000000000028 .LC2
     /tmp/ccsigIod.s:375    .text:0000000000000188 .L0 
     /tmp/ccsigIod.s:17     .rodata:0000000000000030 .LC3
     /tmp/ccsigIod.s:456    .text:000000000000020c .L0 
     /tmp/ccsigIod.s:20     .rodata:0000000000000050 .LC4
     /tmp/ccsigIod.s:461    .text:000000000000021c .L0 
     /tmp/ccsigIod.s:471    .text:0000000000000238 .L0 
     /tmp/ccsigIod.s:149    .text:0000000000000078 .L2
     /tmp/ccsigIod.s:418    .text:00000000000001c8 .L3
     /tmp/ccsigIod.s:351    .text:0000000000000150 .L4
     /tmp/ccsigIod.s:390    .text:00000000000001ac .L19
     /tmp/ccsigIod.s:340    .text:0000000000000148 .L20
     /tmp/ccsigIod.s:479    .text:0000000000000254 .L26
     /tmp/ccsigIod.s:435    .text:00000000000001e8 .L23
     /tmp/ccsigIod.s:452    .text:000000000000020c .L24
     /tmp/ccsigIod.s:244    .text:00000000000000b8 .L18
     /tmp/ccsigIod.s:269    .text:00000000000000dc .L17
     /tmp/ccsigIod.s:285    .text:00000000000000f4 .L16
     /tmp/ccsigIod.s:386    .text:00000000000001a8 .L25
     /tmp/ccsigIod.s:1672   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccsigIod.s:3126   .debug_str:0000000000000629 .LASF120
     /tmp/ccsigIod.s:3002   .debug_str:00000000000002c0 .LASF121
     /tmp/ccsigIod.s:2996   .debug_str:0000000000000278 .LASF122
     /tmp/ccsigIod.s:2902   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccsigIod.s:2910   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccsigIod.s:3048   .debug_str:000000000000043c .LASF0
     /tmp/ccsigIod.s:3068   .debug_str:000000000000048d .LASF1
     /tmp/ccsigIod.s:3036   .debug_str:00000000000003c8 .LASF2
GAS LISTING /tmp/ccsigIod.s 			page 19


     /tmp/ccsigIod.s:3008   .debug_str:0000000000000309 .LASF4
     /tmp/ccsigIod.s:3108   .debug_str:00000000000005be .LASF3
     /tmp/ccsigIod.s:2938   .debug_str:00000000000000ae .LASF5
     /tmp/ccsigIod.s:2960   .debug_str:0000000000000143 .LASF6
     /tmp/ccsigIod.s:3072   .debug_str:00000000000004a7 .LASF7
     /tmp/ccsigIod.s:3046   .debug_str:0000000000000429 .LASF8
     /tmp/ccsigIod.s:3140   .debug_str:000000000000073d .LASF9
     /tmp/ccsigIod.s:2994   .debug_str:000000000000026a .LASF10
     /tmp/ccsigIod.s:3084   .debug_str:0000000000000506 .LASF11
     /tmp/ccsigIod.s:3128   .debug_str:00000000000006ed .LASF12
     /tmp/ccsigIod.s:2940   .debug_str:00000000000000b5 .LASF13
     /tmp/ccsigIod.s:2920   .debug_str:000000000000003b .LASF14
     /tmp/ccsigIod.s:2944   .debug_str:00000000000000cf .LASF15
     /tmp/ccsigIod.s:3102   .debug_str:000000000000058a .LASF16
     /tmp/ccsigIod.s:2954   .debug_str:0000000000000102 .LASF17
     /tmp/ccsigIod.s:3032   .debug_str:00000000000003ad .LASF31
     /tmp/ccsigIod.s:3136   .debug_str:0000000000000721 .LASF21
     /tmp/ccsigIod.s:3164   .debug_str:00000000000007f0 .LASF18
     /tmp/ccsigIod.s:3150   .debug_str:0000000000000788 .LASF19
     /tmp/ccsigIod.s:3122   .debug_str:0000000000000612 .LASF20
     /tmp/ccsigIod.s:3010   .debug_str:0000000000000310 .LASF22
     /tmp/ccsigIod.s:3134   .debug_str:0000000000000719 .LASF23
     /tmp/ccsigIod.s:3100   .debug_str:000000000000056b .LASF25
     /tmp/ccsigIod.s:2950   .debug_str:00000000000000eb .LASF24
     /tmp/ccsigIod.s:2918   .debug_str:000000000000001d .LASF26
     /tmp/ccsigIod.s:2966   .debug_str:000000000000016d .LASF41
     /tmp/ccsigIod.s:2914   .debug_str:0000000000000009 .LASF27
     /tmp/ccsigIod.s:3160   .debug_str:00000000000007d9 .LASF28
     /tmp/ccsigIod.s:3080   .debug_str:00000000000004e2 .LASF29
     /tmp/ccsigIod.s:2974   .debug_str:00000000000001bf .LASF69
     /tmp/ccsigIod.s:3042   .debug_str:00000000000003ec .LASF71
     /tmp/ccsigIod.s:2980   .debug_str:00000000000001f1 .LASF30
     /tmp/ccsigIod.s:3064   .debug_str:000000000000047c .LASF32
     /tmp/ccsigIod.s:3022   .debug_str:0000000000000351 .LASF123
     /tmp/ccsigIod.s:3116   .debug_str:00000000000005f5 .LASF33
     /tmp/ccsigIod.s:3062   .debug_str:0000000000000473 .LASF34
     /tmp/ccsigIod.s:3016   .debug_str:0000000000000333 .LASF35
     /tmp/ccsigIod.s:2936   .debug_str:00000000000000a0 .LASF36
     /tmp/ccsigIod.s:2972   .debug_str:00000000000001a4 .LASF38
     /tmp/ccsigIod.s:3118   .debug_str:00000000000005fe .LASF37
     /tmp/ccsigIod.s:3006   .debug_str:00000000000002ef .LASF39
     /tmp/ccsigIod.s:2922   .debug_str:000000000000004b .LASF43
     /tmp/ccsigIod.s:2976   .debug_str:00000000000001c9 .LASF45
     /tmp/ccsigIod.s:2970   .debug_str:000000000000019b .LASF40
     /tmp/ccsigIod.s:2968   .debug_str:0000000000000186 .LASF42
     /tmp/ccsigIod.s:3110   .debug_str:00000000000005d0 .LASF44
     /tmp/ccsigIod.s:3092   .debug_str:000000000000053b .LASF46
     /tmp/ccsigIod.s:3098   .debug_str:0000000000000564 .LASF47
     /tmp/ccsigIod.s:2992   .debug_str:0000000000000257 .LASF48
     /tmp/ccsigIod.s:2984   .debug_str:0000000000000209 .LASF49
     /tmp/ccsigIod.s:2956   .debug_str:0000000000000118 .LASF50
     /tmp/ccsigIod.s:2916   .debug_str:0000000000000015 .LASF51
     /tmp/ccsigIod.s:3000   .debug_str:00000000000002ac .LASF52
     /tmp/ccsigIod.s:3050   .debug_str:0000000000000449 .LASF53
     /tmp/ccsigIod.s:3154   .debug_str:000000000000079d .LASF54
     /tmp/ccsigIod.s:2932   .debug_str:0000000000000083 .LASF55
     /tmp/ccsigIod.s:2982   .debug_str:00000000000001f6 .LASF56
GAS LISTING /tmp/ccsigIod.s 			page 20


     /tmp/ccsigIod.s:2990   .debug_str:0000000000000251 .LASF57
     /tmp/ccsigIod.s:3124   .debug_str:0000000000000617 .LASF58
     /tmp/ccsigIod.s:2928   .debug_str:0000000000000066 .LASF59
     /tmp/ccsigIod.s:3170   .debug_str:0000000000000815 .LASF60
     /tmp/ccsigIod.s:3162   .debug_str:00000000000007e5 .LASF61
     /tmp/ccsigIod.s:3106   .debug_str:00000000000005a6 .LASF62
     /tmp/ccsigIod.s:3066   .debug_str:0000000000000482 .LASF63
     /tmp/ccsigIod.s:3024   .debug_str:000000000000035c .LASF64
     /tmp/ccsigIod.s:2942   .debug_str:00000000000000c5 .LASF65
     /tmp/ccsigIod.s:3004   .debug_str:00000000000002d9 .LASF66
     /tmp/ccsigIod.s:3040   .debug_str:00000000000003e2 .LASF67
     /tmp/ccsigIod.s:2998   .debug_str:0000000000000296 .LASF68
     /tmp/ccsigIod.s:2946   .debug_str:00000000000000db .LASF70
     /tmp/ccsigIod.s:3166   .debug_str:00000000000007f5 .LASF72
     /tmp/ccsigIod.s:2912   .debug_str:0000000000000000 .LASF73
     /tmp/ccsigIod.s:2926   .debug_str:000000000000005e .LASF124
     /tmp/ccsigIod.s:3020   .debug_str:0000000000000344 .LASF74
     /tmp/ccsigIod.s:3156   .debug_str:00000000000007b0 .LASF75
     /tmp/ccsigIod.s:3096   .debug_str:000000000000055f .LASF125
     /tmp/ccsigIod.s:3074   .debug_str:00000000000004ba .LASF78
     /tmp/ccsigIod.s:3026   .debug_str:0000000000000374 .LASF80
     /tmp/ccsigIod.s:3038   .debug_str:00000000000003d6 .LASF76
     /tmp/ccsigIod.s:2958   .debug_str:000000000000012c .LASF77
     /tmp/ccsigIod.s:2924   .debug_str:0000000000000054 .LASF79
     /tmp/ccsigIod.s:3078   .debug_str:00000000000004ce .LASF81
     /tmp/ccsigIod.s:3012   .debug_str:000000000000031f .LASF82
     /tmp/ccsigIod.s:3028   .debug_str:000000000000038a .LASF83
     /tmp/ccsigIod.s:3030   .debug_str:00000000000003a0 .LASF84
     /tmp/ccsigIod.s:3082   .debug_str:00000000000004ee .LASF85
     /tmp/ccsigIod.s:3138   .debug_str:0000000000000730 .LASF86
     /tmp/ccsigIod.s:3142   .debug_str:000000000000074d .LASF87
     /tmp/ccsigIod.s:3114   .debug_str:00000000000005e9 .LASF88
     /tmp/ccsigIod.s:2930   .debug_str:000000000000006c .LASF89
     /tmp/ccsigIod.s:3034   .debug_str:00000000000003bd .LASF90
     /tmp/ccsigIod.s:2986   .debug_str:0000000000000211 .LASF91
     /tmp/ccsigIod.s:3104   .debug_str:00000000000005a0 .LASF92
     /tmp/ccsigIod.s:3152   .debug_str:000000000000078d .LASF93
     /tmp/ccsigIod.s:3052   .debug_str:0000000000000450 .LASF94
     /tmp/ccsigIod.s:2978   .debug_str:00000000000001de .LASF95
     /tmp/ccsigIod.s:3168   .debug_str:000000000000080d .LASF96
     /tmp/ccsigIod.s:3112   .debug_str:00000000000005d7 .LASF97
     /tmp/ccsigIod.s:3148   .debug_str:0000000000000780 .LASF98
     /tmp/ccsigIod.s:3094   .debug_str:000000000000054e .LASF99
     /tmp/ccsigIod.s:3018   .debug_str:000000000000033c .LASF100
     /tmp/ccsigIod.s:3132   .debug_str:000000000000070a .LASF101
     /tmp/ccsigIod.s:3054   .debug_str:0000000000000459 .LASF102
     /tmp/ccsigIod.s:3056   .debug_str:000000000000045f .LASF103
     /tmp/ccsigIod.s:3060   .debug_str:0000000000000469 .LASF104
     /tmp/ccsigIod.s:3014   .debug_str:000000000000032a .LASF105
     /tmp/ccsigIod.s:3044   .debug_str:0000000000000421 .LASF106
     /tmp/ccsigIod.s:2934   .debug_str:000000000000008a .LASF126
     /tmp/ccsigIod.s:3144   .debug_str:0000000000000765 .LASF127
     /tmp/ccsigIod.s:2988   .debug_str:0000000000000229 .LASF128
     /tmp/ccsigIod.s:2952   .debug_str:00000000000000f1 .LASF107
     /tmp/ccsigIod.s:27     .text:0000000000000000 .LFB43
     /tmp/ccsigIod.s:494    .text:0000000000000268 .LFE43
     /tmp/ccsigIod.s:3158   .debug_str:00000000000007d2 .LASF108
GAS LISTING /tmp/ccsigIod.s 			page 21


     /tmp/ccsigIod.s:2480   .debug_loc:0000000000000000 .LLST0
     /tmp/ccsigIod.s:3058   .debug_str:0000000000000464 .LASF109
     /tmp/ccsigIod.s:2511   .debug_loc:0000000000000087 .LLST1
     /tmp/ccsigIod.s:2542   .debug_loc:000000000000010e .LLST2
     /tmp/ccsigIod.s:2564   .debug_loc:000000000000016e .LLST3
     /tmp/ccsigIod.s:2586   .debug_loc:00000000000001ce .LLST4
     /tmp/ccsigIod.s:2608   .debug_loc:000000000000022e .LLST5
     /tmp/ccsigIod.s:2630   .debug_loc:000000000000028e .LLST6
     /tmp/ccsigIod.s:2652   .debug_loc:00000000000002f0 .LLST7
     /tmp/ccsigIod.s:2674   .debug_loc:0000000000000352 .LLST8
     /tmp/ccsigIod.s:2696   .debug_loc:00000000000003b4 .LLST9
     /tmp/ccsigIod.s:150    .text:0000000000000078 .LBB3
     /tmp/ccsigIod.s:412    .text:00000000000001c0 .LBE3
     /tmp/ccsigIod.s:3070   .debug_str:00000000000004a0 .LASF110
     /tmp/ccsigIod.s:2781   .debug_loc:000000000000052e .LLST10
     /tmp/ccsigIod.s:246    .text:00000000000000b8 .LBB5
     /tmp/ccsigIod.s:391    .text:00000000000001ac .LBE5
     /tmp/ccsigIod.s:2806   .debug_loc:00000000000005a0 .LLST11
     /tmp/ccsigIod.s:2827   .debug_loc:00000000000005ff .LLST12
     /tmp/ccsigIod.s:3120   .debug_str:000000000000060b .LASF111
     /tmp/ccsigIod.s:2839   .debug_loc:0000000000000637 .LLST13
     /tmp/ccsigIod.s:3076   .debug_str:00000000000004c5 .LASF112
     /tmp/ccsigIod.s:2851   .debug_loc:000000000000066e .LLST14
     /tmp/ccsigIod.s:2863   .debug_loc:00000000000006a5 .LLST15
     /tmp/ccsigIod.s:2875   .debug_loc:00000000000006dc .LLST16
     /tmp/ccsigIod.s:265    .text:00000000000000d8 .LVL26
     /tmp/ccsigIod.s:281    .text:00000000000000f0 .LVL29
     /tmp/ccsigIod.s:320    .text:0000000000000128 .LVL38
     /tmp/ccsigIod.s:357    .text:0000000000000160 .LVL40
     /tmp/ccsigIod.s:362    .text:000000000000016c .LVL41
     /tmp/ccsigIod.s:367    .text:000000000000017c .LVL42
     /tmp/ccsigIod.s:372    .text:0000000000000188 .LVL43
     /tmp/ccsigIod.s:377    .text:0000000000000198 .LVL44
     /tmp/ccsigIod.s:382    .text:00000000000001a4 .LVL45
     /tmp/ccsigIod.s:430    .text:00000000000001e4 .LVL52
     /tmp/ccsigIod.s:447    .text:0000000000000208 .LVL54
     /tmp/ccsigIod.s:458    .text:000000000000021c .LVL56
     /tmp/ccsigIod.s:463    .text:000000000000022c .LVL57
     /tmp/ccsigIod.s:468    .text:0000000000000238 .LVL58
     /tmp/ccsigIod.s:473    .text:0000000000000248 .LVL59
     /tmp/ccsigIod.s:478    .text:0000000000000254 .LVL60
     /tmp/ccsigIod.s:501    .text._ZN5Riscv6mc_sipEm:0000000000000000 .LFB10
     /tmp/ccsigIod.s:527    .text._ZN5Riscv6mc_sipEm:000000000000001c .LFE10
     /tmp/ccsigIod.s:2948   .debug_str:00000000000000e6 .LASF129
     /tmp/ccsigIod.s:2962   .debug_str:000000000000014a .LASF113
     /tmp/ccsigIod.s:3088   .debug_str:000000000000051d .LASF115
     /tmp/ccsigIod.s:3090   .debug_str:0000000000000529 .LASF114
     /tmp/ccsigIod.s:3146   .debug_str:0000000000000773 .LASF116
     /tmp/ccsigIod.s:2964   .debug_str:000000000000015d .LASF117
     /tmp/ccsigIod.s:3130   .debug_str:00000000000006fc .LASF118
     /tmp/ccsigIod.s:3086   .debug_str:0000000000000515 .LASF119
     /tmp/ccsigIod.s:48     .text:0000000000000018 .LVL0
     /tmp/ccsigIod.s:55     .text:000000000000001c .LVL1
     /tmp/ccsigIod.s:417    .text:00000000000001c8 .LVL50
     /tmp/ccsigIod.s:422    .text:00000000000001cc .LVL51
     /tmp/ccsigIod.s:488    .text:0000000000000260 .LVL61
     /tmp/ccsigIod.s:491    .text:0000000000000264 .LVL62
GAS LISTING /tmp/ccsigIod.s 			page 22


     /tmp/ccsigIod.s:58     .text:0000000000000020 .LVL2
     /tmp/ccsigIod.s:66     .text:0000000000000024 .LVL3
     /tmp/ccsigIod.s:400    .text:00000000000001b4 .LVL48
     /tmp/ccsigIod.s:403    .text:00000000000001b8 .LVL49
     /tmp/ccsigIod.s:69     .text:0000000000000028 .LVL4
     /tmp/ccsigIod.s:76     .text:000000000000002c .LVL5
     /tmp/ccsigIod.s:79     .text:0000000000000030 .LVL6
     /tmp/ccsigIod.s:86     .text:0000000000000034 .LVL7
     /tmp/ccsigIod.s:89     .text:0000000000000038 .LVL8
     /tmp/ccsigIod.s:96     .text:000000000000003c .LVL9
     /tmp/ccsigIod.s:99     .text:0000000000000040 .LVL10
     /tmp/ccsigIod.s:106    .text:0000000000000044 .LVL11
     /tmp/ccsigIod.s:109    .text:0000000000000048 .LVL12
     /tmp/ccsigIod.s:116    .text:000000000000004c .LVL13
     /tmp/ccsigIod.s:119    .text:0000000000000050 .LVL14
     /tmp/ccsigIod.s:126    .text:0000000000000054 .LVL15
     /tmp/ccsigIod.s:129    .text:0000000000000058 .LVL16
     /tmp/ccsigIod.s:136    .text:000000000000005c .LVL17
     /tmp/ccsigIod.s:139    .text:0000000000000060 .LVL18
     /tmp/ccsigIod.s:268    .text:00000000000000dc .LVL27
     /tmp/ccsigIod.s:284    .text:00000000000000f4 .LVL30
     /tmp/ccsigIod.s:350    .text:0000000000000150 .LVL39
     /tmp/ccsigIod.s:385    .text:00000000000001a8 .LVL46
     /tmp/ccsigIod.s:389    .text:00000000000001ac .LVL47
     /tmp/ccsigIod.s:434    .text:00000000000001e8 .LVL53
     /tmp/ccsigIod.s:451    .text:000000000000020c .LVL55
     /tmp/ccsigIod.s:155    .text:0000000000000080 .LVL19
     /tmp/ccsigIod.s:159    .text:0000000000000088 .LVL20
     /tmp/ccsigIod.s:163    .text:0000000000000094 .LVL21
     /tmp/ccsigIod.s:165    .text:000000000000009c .LVL22
     /tmp/ccsigIod.s:253    .text:00000000000000c0 .LVL23
     /tmp/ccsigIod.s:258    .text:00000000000000c8 .LVL24
     /tmp/ccsigIod.s:260    .text:00000000000000cc .LVL25
     /tmp/ccsigIod.s:276    .text:00000000000000e4 .LVL28
     /tmp/ccsigIod.s:292    .text:00000000000000fc .LVL31
     /tmp/ccsigIod.s:297    .text:0000000000000100 .LVL32
     /tmp/ccsigIod.s:299    .text:0000000000000104 .LVL33
     /tmp/ccsigIod.s:304    .text:0000000000000108 .LVL34
     /tmp/ccsigIod.s:306    .text:000000000000010c .LVL35
     /tmp/ccsigIod.s:311    .text:0000000000000110 .LVL36
     /tmp/ccsigIod.s:313    .text:0000000000000114 .LVL37
     /tmp/ccsigIod.s:538    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccsigIod.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccsigIod.s:530    .text:0000000000000268 .Letext0

UNDEFINED SYMBOLS
_ZN15MemoryAllocator7kmallocEm
_ZN15MemoryAllocator5kfreeEPv
_ZN3TCB12createThreadEPFvPvES0_Pm
_Z11printStringPKc
_Z12printIntegerm
console_handler
_Z7printlnPKc
