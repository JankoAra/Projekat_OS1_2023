GAS LISTING /tmp/ccwb65mv.s 			page 1


   1              		.file	"TCB.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN3TCB7wrapperEv
   9              	_ZN3TCB7wrapperEv:
  10              	.LFB57:
  11              		.file 1 "src/TCB.cpp"
   1:src/TCB.cpp   **** //
   2:src/TCB.cpp   **** // Created by os on 5/23/23.
   3:src/TCB.cpp   **** //
   4:src/TCB.cpp   **** 
   5:src/TCB.cpp   **** #include "../h/TCB.hpp"
   6:src/TCB.cpp   **** #include "../h/Riscv.hpp"
   7:src/TCB.cpp   **** #include "../h/Scheduler.hpp"
   8:src/TCB.cpp   **** #include "../h/KSem.hpp"
   9:src/TCB.cpp   **** 
  10:src/TCB.cpp   **** void kernelConsumerFunction(void*);
  11:src/TCB.cpp   **** 
  12:src/TCB.cpp   **** void idle(void*);
  13:src/TCB.cpp   **** 
  14:src/TCB.cpp   **** void userMain();
  15:src/TCB.cpp   **** 
  16:src/TCB.cpp   **** int main();
  17:src/TCB.cpp   **** 
  18:src/TCB.cpp   **** TCB* TCB::running = nullptr;
  19:src/TCB.cpp   **** uint64 TCB::runningTimeSlice = 0;
  20:src/TCB.cpp   **** 
  21:src/TCB.cpp   **** TCB* TCB::createThread(TCB::Body function, void* args, uint64* stack) {
  22:src/TCB.cpp   ****     TCB* newThread = new TCB(function, args, stack);
  23:src/TCB.cpp   ****     return newThread;
  24:src/TCB.cpp   **** }
  25:src/TCB.cpp   **** 
  26:src/TCB.cpp   **** void TCB::dispatch() {
  27:src/TCB.cpp   ****     TCB* old = TCB::running;
  28:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  29:src/TCB.cpp   ****         Scheduler::put(old);
  30:src/TCB.cpp   ****     } else if (old->status == FINISHED) {
  31:src/TCB.cpp   ****         //brisanje steka niti ako je zavrsena, objekat TCB ostaje zbog moguceg join-a
  32:src/TCB.cpp   ****         delete old->stack;
  33:src/TCB.cpp   ****         old->stack = nullptr;
  34:src/TCB.cpp   ****     }
  35:src/TCB.cpp   ****     TCB::running = Scheduler::get();
  36:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  37:src/TCB.cpp   **** 
  38:src/TCB.cpp   ****     //sada biramo u kom rezimu ce se izvrsavati nit, upisom bita SSTATUS_SPP
  39:src/TCB.cpp   ****     //ako treba da se izvrsava kernel nit, povratak je u sistemski rezim, inace u korisnicki
  40:src/TCB.cpp   ****     if (TCB::running->threadFunction == (TCB::Body)main || TCB::running->threadFunction == kernelCo
  41:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  42:src/TCB.cpp   ****         Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  43:src/TCB.cpp   ****     } else {
  44:src/TCB.cpp   ****         Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
  45:src/TCB.cpp   ****     }
  46:src/TCB.cpp   **** 
  47:src/TCB.cpp   ****     if (old != TCB::running) TCB::contextSwitch(&old->context, &running->context);
GAS LISTING /tmp/ccwb65mv.s 			page 2


  48:src/TCB.cpp   **** }
  49:src/TCB.cpp   **** 
  50:src/TCB.cpp   **** void TCB::wrapper() {
  12              		.loc 1 50 21
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  51:src/TCB.cpp   ****     //pocetak wrappera se izvrsava u supervisor modu,
  52:src/TCB.cpp   ****     //jer nismo izasli iz prekidne rutine prilikom promene konteksta (dispatch)
  53:src/TCB.cpp   ****     Riscv::returnFromInterrupt();
  22              		.loc 1 53 5
  23              		.loc 1 53 31 is_stmt 0
  24 0010 97000000 		call	_ZN5Riscv19returnFromInterruptEv@plt
  24      E7800000 
  25              	.LVL0:
  54:src/TCB.cpp   ****     //na dalje se izvrsavamo u user modu (osim za kernel funkcije)
  55:src/TCB.cpp   ****     running->threadFunction(running->args);
  26              		.loc 1 55 5 is_stmt 1
  27              		.loc 1 55 14 is_stmt 0
  28 0018 97070000 		ld	a5,.LANCHOR0
  28      83B70700 
  29 0020 03B70701 		ld	a4,16(a5)
  30              		.loc 1 55 28
  31 0024 03B50702 		ld	a0,32(a5)
  32 0028 E7000700 		jalr	a4
  33              	.LVL1:
  56:src/TCB.cpp   ****     //i dalje smo u user modu, moramo promenu niti vrsiti sistemskim pozivom
  57:src/TCB.cpp   ****     thread_exit();
  34              		.loc 1 57 5 is_stmt 1
  35              		.loc 1 57 16 is_stmt 0
  36 002c 97000000 		call	_Z11thread_exitv@plt
  36      E7800000 
  37              	.LVL2:
  58:src/TCB.cpp   **** }
  38              		.loc 1 58 1
  39 0034 83308100 		ld	ra,8(sp)
  40              		.cfi_restore 1
  41 0038 03340100 		ld	s0,0(sp)
  42              		.cfi_restore 8
  43              		.cfi_def_cfa 2, 16
  44 003c 13010101 		addi	sp,sp,16
  45              		.cfi_def_cfa_offset 0
  46 0040 67800000 		jr	ra
  47              		.cfi_endproc
  48              	.LFE57:
  50              		.align	2
  51              		.globl	_ZN3TCB8dispatchEv
  53              	_ZN3TCB8dispatchEv:
  54              	.LFB56:
  26:src/TCB.cpp   ****     TCB* old = TCB::running;
  55              		.loc 1 26 22 is_stmt 1
GAS LISTING /tmp/ccwb65mv.s 			page 3


  56              		.cfi_startproc
  57 0044 130101FE 		addi	sp,sp,-32
  58              		.cfi_def_cfa_offset 32
  59 0048 233C1100 		sd	ra,24(sp)
  60 004c 23388100 		sd	s0,16(sp)
  61 0050 23349100 		sd	s1,8(sp)
  62              		.cfi_offset 1, -8
  63              		.cfi_offset 8, -16
  64              		.cfi_offset 9, -24
  65 0054 13040102 		addi	s0,sp,32
  66              		.cfi_def_cfa 8, 0
  27:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  67              		.loc 1 27 5
  27:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  68              		.loc 1 27 10 is_stmt 0
  69 0058 97040000 		ld	s1,.LANCHOR0
  69      83B40400 
  70              	.LVL3:
  28:src/TCB.cpp   ****         Scheduler::put(old);
  71              		.loc 1 28 5 is_stmt 1
  28:src/TCB.cpp   ****         Scheduler::put(old);
  72              		.loc 1 28 14 is_stmt 0
  73 0060 83A78405 		lw	a5,88(s1)
  28:src/TCB.cpp   ****         Scheduler::put(old);
  74              		.loc 1 28 5
  75 0064 13071000 		li	a4,1
  76 0068 638EE704 		beq	a5,a4,.L12
  30:src/TCB.cpp   ****         //brisanje steka niti ako je zavrsena, objekat TCB ostaje zbog moguceg join-a
  77              		.loc 1 30 12 is_stmt 1
  78 006c 13075000 		li	a4,5
  79 0070 6382E706 		beq	a5,a4,.L13
  80              	.L5:
  35:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  81              		.loc 1 35 5
  35:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  82              		.loc 1 35 34 is_stmt 0
  83 0074 97000000 		call	_ZN9Scheduler3getEv@plt
  83      E7800000 
  84              	.LVL4:
  85 007c 93050500 		mv	a1,a0
  35:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  86              		.loc 1 35 18
  87 0080 97070000 		lla	a5,.LANCHOR0
  87      93870700 
  88 0088 23B0A700 		sd	a0,0(a5)
  36:src/TCB.cpp   **** 
  89              		.loc 1 36 5 is_stmt 1
  36:src/TCB.cpp   **** 
  90              		.loc 1 36 27 is_stmt 0
  91 008c 23B40700 		sd	zero,8(a5)
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  92              		.loc 1 40 5 is_stmt 1
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  93              		.loc 1 40 23 is_stmt 0
  94 0090 83370501 		ld	a5,16(a0)
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  95              		.loc 1 40 5
GAS LISTING /tmp/ccwb65mv.s 			page 4


  96 0094 17070000 		la	a4,main
  96      03370700 
  97 009c 6388E704 		beq	a5,a4,.L7
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  98              		.loc 1 40 57 discriminator 1
  99 00a0 17070000 		la	a4,_Z22kernelConsumerFunctionPv
  99      03370700 
 100 00a8 6382E704 		beq	a5,a4,.L7
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
 101              		.loc 1 40 115 discriminator 2
 102 00ac 17070000 		la	a4,_Z4idlePv
 102      03370700 
 103 00b4 638CE702 		beq	a5,a4,.L7
  44:src/TCB.cpp   ****     }
 104              		.loc 1 44 9 is_stmt 1
 105              	.LVL5:
 106              	.LBB43:
 107              	.LBB44:
 108              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	static void returnFromInterrupt();
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp **** 	//read scause
  16:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp **** 	//write scause
  19:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp **** 	//read sepc
  22:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp **** 	//write sepc
  25:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp **** 	//read stvec
  28:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp **** 	//write stvec
  31:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  34:src/../h/Riscv.hpp **** 		//postoji zahtev za softverski prekid
  35:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),
  36:src/../h/Riscv.hpp **** 		//postoji prekid od tajmera
  37:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),
  38:src/../h/Riscv.hpp **** 		//postoji zahtev za spoljasnji hardverski prekid
GAS LISTING /tmp/ccwb65mv.s 			page 5


  39:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)
  40:src/../h/Riscv.hpp **** 	};
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp **** 	//mask set sip
  43:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  44:src/../h/Riscv.hpp **** 
  45:src/../h/Riscv.hpp **** 	//mask clear sip
  46:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp **** 	//read sip
  49:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** 	//write sip
  52:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp **** 	//kada se pozove sret, SIE dobija vrednost SPIE, SPIE se postavlja na 1,
  55:src/../h/Riscv.hpp **** 	//rezim se postavlja na osnovu SPP bita, SPP se postavlja na 0
  56:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  57:src/../h/Riscv.hpp **** 		//1 - dozvoljeni prekidi; 0- nedozvoljeni prekidi; igonrise se u korisnickom rezimu
  58:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  59:src/../h/Riscv.hpp **** 		//prethodna vrednost bita SIE
  60:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  61:src/../h/Riscv.hpp **** 		//iz kog rezima se desio skok; 0 - iz korisnickog; 1 - iz sistemskog
  62:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  63:src/../h/Riscv.hpp **** 	};
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp **** 	//mask set sstatus
  66:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp **** 	//mask clear sstatus
  69:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp **** 	//read sstatus
  72:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp **** 	//write sstatus
  75:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp **** };
  78:src/../h/Riscv.hpp **** 
  79:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  80:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  81:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  82:src/../h/Riscv.hpp **** 	return scause;
  83:src/../h/Riscv.hpp **** }
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  86:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  87:src/../h/Riscv.hpp **** }
  88:src/../h/Riscv.hpp **** 
  89:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  90:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
  91:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
  92:src/../h/Riscv.hpp **** 	return sepc;
  93:src/../h/Riscv.hpp **** }
  94:src/../h/Riscv.hpp **** 
  95:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
GAS LISTING /tmp/ccwb65mv.s 			page 6


  96:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 100:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 101:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 102:src/../h/Riscv.hpp **** 	return stvec;
 103:src/../h/Riscv.hpp **** }
 104:src/../h/Riscv.hpp **** 
 105:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 106:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 107:src/../h/Riscv.hpp **** }
 108:src/../h/Riscv.hpp **** 
 109:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 110:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 111:src/../h/Riscv.hpp **** }
 112:src/../h/Riscv.hpp **** 
 113:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 114:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 115:src/../h/Riscv.hpp **** }
 116:src/../h/Riscv.hpp **** 
 117:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 118:src/../h/Riscv.hpp **** 	uint64 volatile sip;
 119:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sip], sip": [sip] "=r"(sip));
 120:src/../h/Riscv.hpp **** 	return sip;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 124:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sip, %[sip]": :[sip] "r"(sip));
 125:src/../h/Riscv.hpp **** }
 126:src/../h/Riscv.hpp **** 
 127:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 128:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sstatus, %[mask]": :[mask] "r"(mask));
 129:src/../h/Riscv.hpp **** }
 130:src/../h/Riscv.hpp **** 
 131:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 132:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sstatus, %[mask]": :[mask] "r"(mask));
 109              		.loc 2 132 2
 110              		.loc 2 132 62 is_stmt 0
 111 00b8 93070010 		li	a5,256
 112              	#APP
 113              	# 132 "src/../h/Riscv.hpp" 1
 133              	}
 114              		csrc sstatus, a5
 115              	# 0 "" 2
 116              		.loc 2 133 1
 117              	#NO_APP
 118 00c0 6F004003 		j	.L9
 119              	.LVL6:
 120              	.L12:
 121              	.LBE44:
 122              	.LBE43:
  29:src/TCB.cpp   ****     } else if (old->status == FINISHED) {
 123              		.loc 1 29 9 is_stmt 1
  29:src/TCB.cpp   ****     } else if (old->status == FINISHED) {
 124              		.loc 1 29 23 is_stmt 0
 125 00c4 13850400 		mv	a0,s1
GAS LISTING /tmp/ccwb65mv.s 			page 7


 126 00c8 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 126      E7800000 
 127              	.LVL7:
 128 00d0 6FF05FFA 		j	.L5
 129              	.L13:
  32:src/TCB.cpp   ****         old->stack = nullptr;
 130              		.loc 1 32 9 is_stmt 1
  32:src/TCB.cpp   ****         old->stack = nullptr;
 131              		.loc 1 32 21 is_stmt 0
 132 00d4 03B58401 		ld	a0,24(s1)
  32:src/TCB.cpp   ****         old->stack = nullptr;
 133              		.loc 1 32 26
 134 00d8 63060500 		beqz	a0,.L6
  32:src/TCB.cpp   ****         old->stack = nullptr;
 135              		.loc 1 32 21 discriminator 1
 136 00dc 97000000 		call	_ZdlPv@plt
 136      E7800000 
 137              	.LVL8:
 138              	.L6:
  33:src/TCB.cpp   ****     }
 139              		.loc 1 33 9 is_stmt 1
  33:src/TCB.cpp   ****     }
 140              		.loc 1 33 20 is_stmt 0
 141 00e4 23BC0400 		sd	zero,24(s1)
 142 00e8 6FF0DFF8 		j	.L5
 143              	.L7:
  42:src/TCB.cpp   ****     } else {
 144              		.loc 1 42 9 is_stmt 1
 145              	.LVL9:
 146              	.LBB45:
 147              	.LBB46:
 128:src/../h/Riscv.hpp **** }
 148              		.loc 2 128 2
 128:src/../h/Riscv.hpp **** }
 149              		.loc 2 128 62 is_stmt 0
 150 00ec 93070010 		li	a5,256
 151              	#APP
 152              	# 128 "src/../h/Riscv.hpp" 1
 153              		csrs sstatus, a5
 154              	# 0 "" 2
 155              	.LVL10:
 156              	#NO_APP
 157              	.L9:
 158              	.LBE46:
 159              	.LBE45:
  47:src/TCB.cpp   **** }
 160              		.loc 1 47 5 is_stmt 1
 161 00f4 6388B400 		beq	s1,a1,.L3
  47:src/TCB.cpp   **** }
 162              		.loc 1 47 30 discriminator 1
  47:src/TCB.cpp   **** }
 163              		.loc 1 47 48 is_stmt 0 discriminator 1
 164 00f8 13850400 		mv	a0,s1
 165 00fc 97000000 		call	_ZN3TCB13contextSwitchEPNS_7ContextES1_@plt
 165      E7800000 
 166              	.LVL11:
 167              	.L3:
GAS LISTING /tmp/ccwb65mv.s 			page 8


  48:src/TCB.cpp   **** 
 168              		.loc 1 48 1
 169 0104 83308101 		ld	ra,24(sp)
 170              		.cfi_restore 1
 171 0108 03340101 		ld	s0,16(sp)
 172              		.cfi_restore 8
 173              		.cfi_def_cfa 2, 32
 174 010c 83348100 		ld	s1,8(sp)
 175              		.cfi_restore 9
 176              	.LVL12:
 177 0110 13010102 		addi	sp,sp,32
 178              		.cfi_def_cfa_offset 0
 179 0114 67800000 		jr	ra
 180              		.cfi_endproc
 181              	.LFE56:
 183              		.align	2
 184              		.globl	_ZN3TCBnwEm
 186              	_ZN3TCBnwEm:
 187              	.LFB58:
  59:src/TCB.cpp   **** 
  60:src/TCB.cpp   **** void* TCB::operator new(size_t size) {
 188              		.loc 1 60 38 is_stmt 1
 189              		.cfi_startproc
 190              	.LVL13:
 191 0118 130101FF 		addi	sp,sp,-16
 192              		.cfi_def_cfa_offset 16
 193 011c 23341100 		sd	ra,8(sp)
 194 0120 23308100 		sd	s0,0(sp)
 195              		.cfi_offset 1, -8
 196              		.cfi_offset 8, -16
 197 0124 13040101 		addi	s0,sp,16
 198              		.cfi_def_cfa 8, 0
  61:src/TCB.cpp   ****     return mem_alloc(size);
 199              		.loc 1 61 5
 200              		.loc 1 61 21 is_stmt 0
 201 0128 97000000 		call	_Z9mem_allocm@plt
 201      E7800000 
 202              	.LVL14:
  62:src/TCB.cpp   **** }
 203              		.loc 1 62 1
 204 0130 83308100 		ld	ra,8(sp)
 205              		.cfi_restore 1
 206 0134 03340100 		ld	s0,0(sp)
 207              		.cfi_restore 8
 208              		.cfi_def_cfa 2, 16
 209 0138 13010101 		addi	sp,sp,16
 210              		.cfi_def_cfa_offset 0
 211 013c 67800000 		jr	ra
 212              		.cfi_endproc
 213              	.LFE58:
 215              		.align	2
 216              		.globl	_ZN3TCB12createThreadEPFvPvES0_Pm
 218              	_ZN3TCB12createThreadEPFvPvES0_Pm:
 219              	.LFB55:
  21:src/TCB.cpp   ****     TCB* newThread = new TCB(function, args, stack);
 220              		.loc 1 21 71 is_stmt 1
 221              		.cfi_startproc
GAS LISTING /tmp/ccwb65mv.s 			page 9


 222              	.LVL15:
 223 0140 130101FD 		addi	sp,sp,-48
 224              		.cfi_def_cfa_offset 48
 225 0144 23341102 		sd	ra,40(sp)
 226 0148 23308102 		sd	s0,32(sp)
 227 014c 233C9100 		sd	s1,24(sp)
 228 0150 23382101 		sd	s2,16(sp)
 229 0154 23343101 		sd	s3,8(sp)
 230              		.cfi_offset 1, -8
 231              		.cfi_offset 8, -16
 232              		.cfi_offset 9, -24
 233              		.cfi_offset 18, -32
 234              		.cfi_offset 19, -40
 235 0158 13040103 		addi	s0,sp,48
 236              		.cfi_def_cfa 8, 0
 237 015c 13090500 		mv	s2,a0
 238 0160 93890500 		mv	s3,a1
 239 0164 93040600 		mv	s1,a2
  22:src/TCB.cpp   ****     return newThread;
 240              		.loc 1 22 5
  22:src/TCB.cpp   ****     return newThread;
 241              		.loc 1 22 51 is_stmt 0
 242 0168 13050007 		li	a0,112
 243              	.LVL16:
 244 016c 97000000 		call	_ZN3TCBnwEm
 244      E7800000 
 245              	.LVL17:
 246              	.LBB47:
 247              	.LBB48:
 248              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 5/23/23.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJEKAT2023_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJEKAT2023_TCB_HPP
   7:src/../h/TCB.hpp **** 
   8:src/../h/TCB.hpp **** #include "../lib/hw.h"
   9:src/../h/TCB.hpp **** #include "../h/ThreadQueue.hpp"
  10:src/../h/TCB.hpp **** 
  11:src/../h/TCB.hpp **** int main();
  12:src/../h/TCB.hpp **** 
  13:src/../h/TCB.hpp **** class TCB {
  14:src/../h/TCB.hpp **** public:
  15:src/../h/TCB.hpp ****     friend class Scheduler;
  16:src/../h/TCB.hpp **** 
  17:src/../h/TCB.hpp ****     using Body = void (*)(void*);
  18:src/../h/TCB.hpp **** 
  19:src/../h/TCB.hpp ****     enum ThreadStatus {
  20:src/../h/TCB.hpp ****         CREATED, ACTIVE, BLOCKED, JOINING, SLEEPING, FINISHED
  21:src/../h/TCB.hpp ****     };
  22:src/../h/TCB.hpp **** 
  23:src/../h/TCB.hpp ****     static TCB* createThread(Body function, void* args, uint64* stack);
  24:src/../h/TCB.hpp **** 
  25:src/../h/TCB.hpp ****     void setStatus(ThreadStatus stat) { this->status = stat; }
  26:src/../h/TCB.hpp **** 
  27:src/../h/TCB.hpp ****     ThreadStatus getStatus() { return this->status; }
GAS LISTING /tmp/ccwb65mv.s 			page 10


  28:src/../h/TCB.hpp **** 
  29:src/../h/TCB.hpp ****     uint64 getTimeSlice() { return timeSlice; }
  30:src/../h/TCB.hpp **** 
  31:src/../h/TCB.hpp ****     Body getBody() { return threadFunction; }
  32:src/../h/TCB.hpp **** 
  33:src/../h/TCB.hpp ****     ThreadQueue* getListOfJoiningThreads() { return &waitingToJoin; }
  34:src/../h/TCB.hpp **** 
  35:src/../h/TCB.hpp ****     void setMySemaphore(KSem* sem) { mySemaphore = sem; }
  36:src/../h/TCB.hpp **** 
  37:src/../h/TCB.hpp ****     void setJoiningWithTCB(TCB* tcb) { joiningWithTCB = tcb; }
  38:src/../h/TCB.hpp **** 
  39:src/../h/TCB.hpp ****     static TCB* getRunning() { return running; }
  40:src/../h/TCB.hpp **** 
  41:src/../h/TCB.hpp ****     static void setRunning(TCB* newRunning) { running = newRunning; }
  42:src/../h/TCB.hpp **** 
  43:src/../h/TCB.hpp ****     static uint64 &getRunningTimeSlice() { return runningTimeSlice; }
  44:src/../h/TCB.hpp **** 
  45:src/../h/TCB.hpp ****     static void threadJoin(TCB* handle);
  46:src/../h/TCB.hpp **** 
  47:src/../h/TCB.hpp ****     static void releaseJoined(TCB* handle);
  48:src/../h/TCB.hpp **** 
  49:src/../h/TCB.hpp ****     static void dispatch();
  50:src/../h/TCB.hpp **** 
  51:src/../h/TCB.hpp ****     static void wrapper();
  52:src/../h/TCB.hpp **** 
  53:src/../h/TCB.hpp ****     static void quitThread(TCB* handle);
  54:src/../h/TCB.hpp **** 
  55:src/../h/TCB.hpp ****     static void* operator new(size_t size);
  56:src/../h/TCB.hpp **** 
  57:src/../h/TCB.hpp ****     static void operator delete(void* ptr);
  58:src/../h/TCB.hpp **** 
  59:src/../h/TCB.hpp **** private:
  60:src/../h/TCB.hpp ****     TCB(Body function, void* args, uint64* stack) : threadFunction(function), stack(stack), args(ar
  61:src/../h/TCB.hpp ****                                                     timeSlice(DEFAULT_TIME_SLICE), nextInScheduler(
  62:src/../h/TCB.hpp ****                                                     timeToSleep(0),
  63:src/../h/TCB.hpp ****                                                     nextSleeping(nullptr), status(CREATED), mySemap
  64:src/../h/TCB.hpp ****                                                     joiningWithTCB(nullptr) {
 249              		.loc 3 64 75
 250 0174 23382501 		sd	s2,16(a0)
 251 0178 233C9500 		sd	s1,24(a0)
 252 017c 23303503 		sd	s3,32(a0)
 253 0180 93072000 		li	a5,2
 254 0184 2334F502 		sd	a5,40(a0)
 255 0188 23380502 		sd	zero,48(a0)
 256 018c 233C0502 		sd	zero,56(a0)
 257 0190 23300504 		sd	zero,64(a0)
 258              	.LVL18:
 259              	.LBB49:
 260              	.LBB50:
 261              		.file 4 "src/../h/../h/ThreadQueue.hpp"
   1:src/../h/../h/ThreadQueue.hpp **** //
   2:src/../h/../h/ThreadQueue.hpp **** // Created by os on 6/4/23.
   3:src/../h/../h/ThreadQueue.hpp **** //
   4:src/../h/../h/ThreadQueue.hpp **** 
   5:src/../h/../h/ThreadQueue.hpp **** #ifndef PROJEKAT2023_THREADQUEUE_HPP
   6:src/../h/../h/ThreadQueue.hpp **** #define PROJEKAT2023_THREADQUEUE_HPP
   7:src/../h/../h/ThreadQueue.hpp **** 
GAS LISTING /tmp/ccwb65mv.s 			page 11


   8:src/../h/../h/ThreadQueue.hpp **** #include "../h/syscall_c.hpp"
   9:src/../h/../h/ThreadQueue.hpp **** 
  10:src/../h/../h/ThreadQueue.hpp **** class TCB;
  11:src/../h/../h/ThreadQueue.hpp **** 
  12:src/../h/../h/ThreadQueue.hpp **** class ThreadQueue {
  13:src/../h/../h/ThreadQueue.hpp **** private:
  14:src/../h/../h/ThreadQueue.hpp ****     struct Node {
  15:src/../h/../h/ThreadQueue.hpp ****         TCB* data;
  16:src/../h/../h/ThreadQueue.hpp ****         Node* next;
  17:src/../h/../h/ThreadQueue.hpp **** 
  18:src/../h/../h/ThreadQueue.hpp ****         Node(TCB* d) : data(d), next(nullptr) {}
  19:src/../h/../h/ThreadQueue.hpp **** 
  20:src/../h/../h/ThreadQueue.hpp ****         static void* operator new(size_t size) {
  21:src/../h/../h/ThreadQueue.hpp ****             return mem_alloc(size);
  22:src/../h/../h/ThreadQueue.hpp ****         }
  23:src/../h/../h/ThreadQueue.hpp **** 
  24:src/../h/../h/ThreadQueue.hpp ****         static void operator delete(void* ptr) {
  25:src/../h/../h/ThreadQueue.hpp ****             mem_free(ptr);
  26:src/../h/../h/ThreadQueue.hpp ****         }
  27:src/../h/../h/ThreadQueue.hpp ****     };
  28:src/../h/../h/ThreadQueue.hpp **** 
  29:src/../h/../h/ThreadQueue.hpp ****     Node* front;
  30:src/../h/../h/ThreadQueue.hpp ****     Node* back;
  31:src/../h/../h/ThreadQueue.hpp **** 
  32:src/../h/../h/ThreadQueue.hpp **** public:
  33:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue() : front(nullptr), back(nullptr) {}
 262              		.loc 4 33 49
 263 0194 23340504 		sd	zero,72(a0)
 264 0198 23380504 		sd	zero,80(a0)
 265              	.LVL19:
 266              	.LBE50:
 267              	.LBE49:
 268              		.loc 3 64 75
 269 019c 232C0504 		sw	zero,88(a0)
 270 01a0 23300506 		sd	zero,96(a0)
 271 01a4 23340506 		sd	zero,104(a0)
 272              	.LBB51:
  65:src/../h/TCB.hpp ****         //formiranje pocetnog konteksta;
  66:src/../h/TCB.hpp ****         //specijalni uslovi za main funkciju kojoj se pocetni kontekst automatski formira
  67:src/../h/TCB.hpp ****         uint64 startRa = threadFunction != (TCB::Body)main ? (uint64)&wrapper : 0;
 273              		.loc 3 67 9 is_stmt 1
 274              		.loc 3 67 60 is_stmt 0
 275 01a8 97070000 		la	a5,main
 275      83B70700 
 276 01b0 630EF902 		beq	s2,a5,.L19
 277 01b4 97070000 		lla	a5,_ZN3TCB7wrapperEv
 277      93870700 
 278              	.L17:
 279              	.LVL20:
  68:src/../h/TCB.hpp ****         uint64 startSp = stack != nullptr ? (uint64)((char*)stack + DEFAULT_STACK_SIZE) : 0;
 280              		.loc 3 68 9 is_stmt 1
 281              		.loc 3 68 43 is_stmt 0
 282 01bc 638C0402 		beqz	s1,.L20
 283              		.loc 3 68 67
 284 01c0 37160000 		li	a2,4096
 285 01c4 B384C400 		add	s1,s1,a2
 286              	.LVL21:
GAS LISTING /tmp/ccwb65mv.s 			page 12


 287              	.L18:
  69:src/../h/TCB.hpp ****         this->context.ra = startRa;
 288              		.loc 3 69 9 is_stmt 1
 289              		.loc 3 69 26 is_stmt 0
 290 01c8 2330F500 		sd	a5,0(a0)
  70:src/../h/TCB.hpp ****         this->context.sp = startSp;
 291              		.loc 3 70 9 is_stmt 1
 292              		.loc 3 70 26 is_stmt 0
 293 01cc 23349500 		sd	s1,8(a0)
 294              	.LVL22:
 295              	.LBE51:
 296              	.LBE48:
 297              	.LBE47:
  23:src/TCB.cpp   **** }
 298              		.loc 1 23 5 is_stmt 1
  24:src/TCB.cpp   **** 
 299              		.loc 1 24 1 is_stmt 0
 300 01d0 83308102 		ld	ra,40(sp)
 301              		.cfi_remember_state
 302              		.cfi_restore 1
 303 01d4 03340102 		ld	s0,32(sp)
 304              		.cfi_restore 8
 305              		.cfi_def_cfa 2, 48
 306 01d8 83348101 		ld	s1,24(sp)
 307              		.cfi_restore 9
 308              	.LVL23:
 309 01dc 03390101 		ld	s2,16(sp)
 310              		.cfi_restore 18
 311              	.LVL24:
 312 01e0 83398100 		ld	s3,8(sp)
 313              		.cfi_restore 19
 314              	.LVL25:
 315 01e4 13010103 		addi	sp,sp,48
 316              		.cfi_def_cfa_offset 0
 317 01e8 67800000 		jr	ra
 318              	.LVL26:
 319              	.L19:
 320              		.cfi_restore_state
 321              	.LBB54:
 322              	.LBB53:
 323              	.LBB52:
  67:src/../h/TCB.hpp ****         uint64 startSp = stack != nullptr ? (uint64)((char*)stack + DEFAULT_STACK_SIZE) : 0;
 324              		.loc 3 67 60
 325 01ec 93070000 		li	a5,0
 326 01f0 6FF0DFFC 		j	.L17
 327              	.LVL27:
 328              	.L20:
  68:src/../h/TCB.hpp ****         this->context.ra = startRa;
 329              		.loc 3 68 43
 330 01f4 93040000 		li	s1,0
 331              	.LVL28:
 332 01f8 6FF01FFD 		j	.L18
 333              	.LBE52:
 334              	.LBE53:
 335              	.LBE54:
 336              		.cfi_endproc
 337              	.LFE55:
GAS LISTING /tmp/ccwb65mv.s 			page 13


 339              		.align	2
 340              		.globl	_ZN3TCBdlEPv
 342              	_ZN3TCBdlEPv:
 343              	.LFB59:
  63:src/TCB.cpp   **** 
  64:src/TCB.cpp   **** void TCB::operator delete(void* ptr) {
 344              		.loc 1 64 38 is_stmt 1
 345              		.cfi_startproc
 346              	.LVL29:
 347 01fc 130101FF 		addi	sp,sp,-16
 348              		.cfi_def_cfa_offset 16
 349 0200 23341100 		sd	ra,8(sp)
 350 0204 23308100 		sd	s0,0(sp)
 351              		.cfi_offset 1, -8
 352              		.cfi_offset 8, -16
 353 0208 13040101 		addi	s0,sp,16
 354              		.cfi_def_cfa 8, 0
  65:src/TCB.cpp   ****     mem_free(ptr);
 355              		.loc 1 65 5
 356              		.loc 1 65 13 is_stmt 0
 357 020c 97000000 		call	_Z8mem_freePv@plt
 357      E7800000 
 358              	.LVL30:
  66:src/TCB.cpp   **** }
 359              		.loc 1 66 1
 360 0214 83308100 		ld	ra,8(sp)
 361              		.cfi_restore 1
 362 0218 03340100 		ld	s0,0(sp)
 363              		.cfi_restore 8
 364              		.cfi_def_cfa 2, 16
 365 021c 13010101 		addi	sp,sp,16
 366              		.cfi_def_cfa_offset 0
 367 0220 67800000 		jr	ra
 368              		.cfi_endproc
 369              	.LFE59:
 371              		.align	2
 372              		.globl	_ZN3TCB10threadJoinEPS_
 374              	_ZN3TCB10threadJoinEPS_:
 375              	.LFB60:
  67:src/TCB.cpp   **** 
  68:src/TCB.cpp   **** void TCB::threadJoin(TCB* handle) {
 376              		.loc 1 68 35 is_stmt 1
 377              		.cfi_startproc
 378              	.LVL31:
  69:src/TCB.cpp   ****     if (handle->status == FINISHED || TCB::running == handle) return;
 379              		.loc 1 69 5
 380              		.loc 1 69 17 is_stmt 0
 381 0224 03278505 		lw	a4,88(a0)
 382              		.loc 1 69 5
 383 0228 93075000 		li	a5,5
 384 022c 6304F704 		beq	a4,a5,.L27
 385              		.loc 1 69 52 discriminator 2
 386 0230 97050000 		ld	a1,.LANCHOR0
 386      83B50500 
 387              		.loc 1 69 36 discriminator 2
 388 0238 638EA502 		beq	a1,a0,.L27
  68:src/TCB.cpp   ****     if (handle->status == FINISHED || TCB::running == handle) return;
GAS LISTING /tmp/ccwb65mv.s 			page 14


 389              		.loc 1 68 35
 390 023c 130101FF 		addi	sp,sp,-16
 391              		.cfi_def_cfa_offset 16
 392 0240 23341100 		sd	ra,8(sp)
 393 0244 23308100 		sd	s0,0(sp)
 394              		.cfi_offset 1, -8
 395              		.cfi_offset 8, -16
 396 0248 13040101 		addi	s0,sp,16
 397              		.cfi_def_cfa 8, 0
  70:src/TCB.cpp   ****     TCB::running->status = JOINING;
 398              		.loc 1 70 5 is_stmt 1
 399              		.loc 1 70 26 is_stmt 0
 400 024c 93073000 		li	a5,3
 401 0250 23ACF504 		sw	a5,88(a1)
  71:src/TCB.cpp   ****     TCB::running->setJoiningWithTCB(handle);
 402              		.loc 1 71 5 is_stmt 1
 403              	.LVL32:
 404              	.LBB55:
 405              	.LBB56:
  37:src/../h/TCB.hpp **** 
 406              		.loc 3 37 40
  37:src/../h/TCB.hpp **** 
 407              		.loc 3 37 55 is_stmt 0
 408 0254 23B4A506 		sd	a0,104(a1)
 409              	.LVL33:
 410              	.LBE56:
 411              	.LBE55:
  72:src/TCB.cpp   ****     handle->waitingToJoin.putLast(TCB::running);
 412              		.loc 1 72 5 is_stmt 1
 413              		.loc 1 72 34 is_stmt 0
 414 0258 13058504 		addi	a0,a0,72
 415              	.LVL34:
 416 025c 97000000 		call	_ZN11ThreadQueue7putLastEP3TCB@plt
 416      E7800000 
 417              	.LVL35:
  73:src/TCB.cpp   **** }
 418              		.loc 1 73 1
 419 0264 83308100 		ld	ra,8(sp)
 420              		.cfi_restore 1
 421 0268 03340100 		ld	s0,0(sp)
 422              		.cfi_restore 8
 423              		.cfi_def_cfa 2, 16
 424 026c 13010101 		addi	sp,sp,16
 425              		.cfi_def_cfa_offset 0
 426 0270 67800000 		jr	ra
 427              	.LVL36:
 428              	.L27:
 429 0274 67800000 		ret
 430              		.cfi_endproc
 431              	.LFE60:
 433              		.align	2
 434              		.globl	_ZN3TCB13releaseJoinedEPS_
 436              	_ZN3TCB13releaseJoinedEPS_:
 437              	.LFB61:
  74:src/TCB.cpp   **** 
  75:src/TCB.cpp   **** void TCB::releaseJoined(TCB* handle) {
 438              		.loc 1 75 38 is_stmt 1
GAS LISTING /tmp/ccwb65mv.s 			page 15


 439              		.cfi_startproc
 440              	.LVL37:
 441 0278 130101FE 		addi	sp,sp,-32
 442              		.cfi_def_cfa_offset 32
 443 027c 233C1100 		sd	ra,24(sp)
 444 0280 23388100 		sd	s0,16(sp)
 445 0284 23349100 		sd	s1,8(sp)
 446              		.cfi_offset 1, -8
 447              		.cfi_offset 8, -16
 448              		.cfi_offset 9, -24
 449 0288 13040102 		addi	s0,sp,32
 450              		.cfi_def_cfa 8, 0
 451 028c 93040500 		mv	s1,a0
 452              	.LVL38:
 453              	.L32:
  76:src/TCB.cpp   ****     while (!handle->waitingToJoin.isEmpty()) {
 454              		.loc 1 76 5
 455              		.loc 1 76 12
 456              	.LBB57:
 457              	.LBB58:
  34:src/../h/../h/ThreadQueue.hpp **** 
  35:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue(const ThreadQueue &) = delete;
  36:src/../h/../h/ThreadQueue.hpp **** 
  37:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue &operator=(const ThreadQueue &) = delete;
  38:src/../h/../h/ThreadQueue.hpp **** 
  39:src/../h/../h/ThreadQueue.hpp ****     ~ThreadQueue() {
  40:src/../h/../h/ThreadQueue.hpp ****         while (!isEmpty()) {
  41:src/../h/../h/ThreadQueue.hpp ****             Node* node = front;
  42:src/../h/../h/ThreadQueue.hpp ****             front = front->next;
  43:src/../h/../h/ThreadQueue.hpp ****             delete node;
  44:src/../h/../h/ThreadQueue.hpp ****         }
  45:src/../h/../h/ThreadQueue.hpp ****     }
  46:src/../h/../h/ThreadQueue.hpp **** 
  47:src/../h/../h/ThreadQueue.hpp ****     bool isEmpty() const {
  48:src/../h/../h/ThreadQueue.hpp ****         return front == nullptr;
 458              		.loc 4 48 9
 459              		.loc 4 48 16 is_stmt 0
 460 0290 83B78404 		ld	a5,72(s1)
 461              	.LVL39:
 462              	.LBE58:
 463              	.LBE57:
 464              		.loc 1 76 12
 465 0294 63800702 		beqz	a5,.L30
 466              	.LBB59:
  77:src/TCB.cpp   ****         TCB* tcb = handle->waitingToJoin.getFirst();
 467              		.loc 1 77 9 is_stmt 1
 468              		.loc 1 77 50 is_stmt 0
 469 0298 13858404 		addi	a0,s1,72
 470 029c 97000000 		call	_ZN11ThreadQueue8getFirstEv@plt
 470      E7800000 
 471              	.LVL40:
  78:src/TCB.cpp   ****         tcb->setJoiningWithTCB(nullptr);
 472              		.loc 1 78 9 is_stmt 1
 473              	.LBB60:
 474              	.LBB61:
  37:src/../h/TCB.hpp **** 
 475              		.loc 3 37 40
GAS LISTING /tmp/ccwb65mv.s 			page 16


  37:src/../h/TCB.hpp **** 
 476              		.loc 3 37 55 is_stmt 0
 477 02a4 23340506 		sd	zero,104(a0)
 478              	.LVL41:
 479              	.LBE61:
 480              	.LBE60:
  79:src/TCB.cpp   ****         Scheduler::put(tcb);
 481              		.loc 1 79 9 is_stmt 1
 482              		.loc 1 79 23 is_stmt 0
 483 02a8 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 483      E7800000 
 484              	.LVL42:
 485              	.LBE59:
  76:src/TCB.cpp   ****         TCB* tcb = handle->waitingToJoin.getFirst();
 486              		.loc 1 76 5
 487 02b0 6FF01FFE 		j	.L32
 488              	.L30:
  80:src/TCB.cpp   ****     }
  81:src/TCB.cpp   **** }
 489              		.loc 1 81 1
 490 02b4 83308101 		ld	ra,24(sp)
 491              		.cfi_restore 1
 492 02b8 03340101 		ld	s0,16(sp)
 493              		.cfi_restore 8
 494              		.cfi_def_cfa 2, 32
 495 02bc 83348100 		ld	s1,8(sp)
 496              		.cfi_restore 9
 497              	.LVL43:
 498 02c0 13010102 		addi	sp,sp,32
 499              		.cfi_def_cfa_offset 0
 500 02c4 67800000 		jr	ra
 501              		.cfi_endproc
 502              	.LFE61:
 504              		.align	2
 505              		.globl	_ZN3TCB10quitThreadEPS_
 507              	_ZN3TCB10quitThreadEPS_:
 508              	.LFB62:
  82:src/TCB.cpp   **** 
  83:src/TCB.cpp   **** void TCB::quitThread(TCB* handle) {
 509              		.loc 1 83 35 is_stmt 1
 510              		.cfi_startproc
 511              	.LVL44:
 512 02c8 130101FE 		addi	sp,sp,-32
 513              		.cfi_def_cfa_offset 32
 514 02cc 233C1100 		sd	ra,24(sp)
 515 02d0 23388100 		sd	s0,16(sp)
 516 02d4 23349100 		sd	s1,8(sp)
 517              		.cfi_offset 1, -8
 518              		.cfi_offset 8, -16
 519              		.cfi_offset 9, -24
 520 02d8 13040102 		addi	s0,sp,32
 521              		.cfi_def_cfa 8, 0
 522 02dc 93040500 		mv	s1,a0
  84:src/TCB.cpp   ****     TCB* prev, * curr;
 523              		.loc 1 84 5
  85:src/TCB.cpp   ****     switch (handle->status) {
 524              		.loc 1 85 5
GAS LISTING /tmp/ccwb65mv.s 			page 17


 525              		.loc 1 85 21 is_stmt 0
 526 02e0 83278505 		lw	a5,88(a0)
 527              		.loc 1 85 5
 528 02e4 13073000 		li	a4,3
 529 02e8 6380E710 		beq	a5,a4,.L35
 530 02ec 6362F704 		bgtu	a5,a4,.L36
 531 02f0 13071000 		li	a4,1
 532 02f4 6382E706 		beq	a5,a4,.L37
 533 02f8 13072000 		li	a4,2
 534 02fc 639EE708 		bne	a5,a4,.L39
  86:src/TCB.cpp   ****         case CREATED:
  87:src/TCB.cpp   ****             break;
  88:src/TCB.cpp   ****         case ACTIVE:
  89:src/TCB.cpp   ****             //nit je u Scheduler-u, treba da se izbaci nit i preveze Scheduler
  90:src/TCB.cpp   ****             for (prev = nullptr, curr = Scheduler::getHead();
  91:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
  92:src/TCB.cpp   ****             if (!prev) {
  93:src/TCB.cpp   ****                 Scheduler::setHead(curr->nextInScheduler);
  94:src/TCB.cpp   ****             } else {
  95:src/TCB.cpp   ****                 prev->nextInScheduler = curr->nextInScheduler;
  96:src/TCB.cpp   ****             }
  97:src/TCB.cpp   ****             if (curr == Scheduler::getTail()) {
  98:src/TCB.cpp   ****                 Scheduler::setTail(prev);
  99:src/TCB.cpp   ****             }
 100:src/TCB.cpp   ****             curr->nextInScheduler = nullptr;
 101:src/TCB.cpp   ****             break;
 102:src/TCB.cpp   ****         case BLOCKED:
 535              		.loc 1 102 9 is_stmt 1
 103:src/TCB.cpp   ****             //nit blokirana na semaforu, treba da se izbaci iz reda blokiranih na semaforu
 104:src/TCB.cpp   ****             if (handle->mySemaphore->getBlocked()->remove(handle) < 0) {
 536              		.loc 1 104 13
 537              		.loc 1 104 25 is_stmt 0
 538 0300 03350506 		ld	a0,96(a0)
 539              	.LVL45:
 540              	.LBB62:
 541              	.LBB63:
 542              		.file 5 "src/../h/KSem.hpp"
   1:src/../h/KSem.hpp **** //
   2:src/../h/KSem.hpp **** // Created by os on 6/4/23.
   3:src/../h/KSem.hpp **** //
   4:src/../h/KSem.hpp **** 
   5:src/../h/KSem.hpp **** #ifndef PROJEKAT2023_KSEM_HPP
   6:src/../h/KSem.hpp **** #define PROJEKAT2023_KSEM_HPP
   7:src/../h/KSem.hpp **** 
   8:src/../h/KSem.hpp **** #include "../h/ThreadQueue.hpp"
   9:src/../h/KSem.hpp **** 
  10:src/../h/KSem.hpp **** //klasa napravljena po uzoru na semafor u skolskom jezgru
  11:src/../h/KSem.hpp **** class KSem {
  12:src/../h/KSem.hpp **** public:
  13:src/../h/KSem.hpp ****     static KSem* initSem(uint val);
  14:src/../h/KSem.hpp **** 
  15:src/../h/KSem.hpp ****     int wait();
  16:src/../h/KSem.hpp **** 
  17:src/../h/KSem.hpp ****     int signal();
  18:src/../h/KSem.hpp **** 
  19:src/../h/KSem.hpp ****     //deaktiviranje semafora i oslobadjanje svih niti koje cekaju na njemu
  20:src/../h/KSem.hpp ****     static int closeSem(sem_t handle);
GAS LISTING /tmp/ccwb65mv.s 			page 18


  21:src/../h/KSem.hpp **** 
  22:src/../h/KSem.hpp ****     static void* operator new(size_t size);
  23:src/../h/KSem.hpp **** 
  24:src/../h/KSem.hpp ****     static void operator delete(void* ptr);
  25:src/../h/KSem.hpp **** 
  26:src/../h/KSem.hpp ****     ThreadQueue* getBlocked() { return &blocked; }
 543              		.loc 5 26 33 is_stmt 1
 544              	.LBE63:
 545              	.LBE62:
 546              		.loc 1 104 58 is_stmt 0
 547 0304 93850400 		mv	a1,s1
 548 0308 13058500 		addi	a0,a0,8
 549 030c 97000000 		call	_ZN11ThreadQueue6removeEP3TCB@plt
 549      E7800000 
 550              	.LVL46:
 551              		.loc 1 104 13
 552 0314 63420508 		bltz	a0,.L39
 105:src/TCB.cpp   ****                 //greska
 106:src/TCB.cpp   ****             } else {
 107:src/TCB.cpp   ****                 handle->mySemaphore->increaseVal(1);
 553              		.loc 1 107 17 is_stmt 1
 554              		.loc 1 107 25 is_stmt 0
 555 0318 03B70406 		ld	a4,96(s1)
 556              	.LVL47:
 557              	.LBB64:
 558              	.LBB65:
  27:src/../h/KSem.hpp **** 
  28:src/../h/KSem.hpp ****     void increaseVal(int add) { val += add; }
 559              		.loc 5 28 33 is_stmt 1
 560              		.loc 5 28 37 is_stmt 0
 561 031c 83270700 		lw	a5,0(a4)
 562 0320 9B871700 		addiw	a5,a5,1
 563 0324 2320F700 		sw	a5,0(a4)
 564              	.LVL48:
 565              	.LBE65:
 566              	.LBE64:
 108:src/TCB.cpp   ****                 handle->mySemaphore = nullptr;
 567              		.loc 1 108 17 is_stmt 1
 568              		.loc 1 108 37 is_stmt 0
 569 0328 23B00406 		sd	zero,96(s1)
 570 032c 6F00C006 		j	.L39
 571              	.L36:
  85:src/TCB.cpp   ****         case CREATED:
 572              		.loc 1 85 5
 573 0330 13074000 		li	a4,4
 574 0334 6392E706 		bne	a5,a4,.L39
 109:src/TCB.cpp   ****             }
 110:src/TCB.cpp   ****             break;
 111:src/TCB.cpp   ****         case JOINING:
 112:src/TCB.cpp   ****             //nit ceka da se neka druga nit zavrsi
 113:src/TCB.cpp   ****             if (handle->joiningWithTCB->getListOfJoiningThreads()->remove(handle) < 0) {
 114:src/TCB.cpp   ****                 //greska
 115:src/TCB.cpp   ****             } else {
 116:src/TCB.cpp   ****                 handle->joiningWithTCB = nullptr;
 117:src/TCB.cpp   ****             }
 118:src/TCB.cpp   ****             break;
 119:src/TCB.cpp   ****         case SLEEPING:
GAS LISTING /tmp/ccwb65mv.s 			page 19


 575              		.loc 1 119 9 is_stmt 1
 120:src/TCB.cpp   ****             //nit je u redu uspavanih, treba da se izbaci
 121:src/TCB.cpp   ****             for (prev = nullptr, curr = Scheduler::getSleepingHead();
 576              		.loc 1 121 13
 577              	.LVL49:
 578              	.LBB66:
 579              	.LBB67:
 580              		.file 6 "src/../h/Scheduler.hpp"
   1:src/../h/Scheduler.hpp **** //
   2:src/../h/Scheduler.hpp **** // Created by os on 5/25/23.
   3:src/../h/Scheduler.hpp **** //
   4:src/../h/Scheduler.hpp **** 
   5:src/../h/Scheduler.hpp **** #ifndef PROJEKAT2023_SCHEDULER_HPP
   6:src/../h/Scheduler.hpp **** #define PROJEKAT2023_SCHEDULER_HPP
   7:src/../h/Scheduler.hpp **** 
   8:src/../h/Scheduler.hpp **** class TCB;
   9:src/../h/Scheduler.hpp **** 
  10:src/../h/Scheduler.hpp **** typedef unsigned long time_t;
  11:src/../h/Scheduler.hpp **** 
  12:src/../h/Scheduler.hpp **** class Scheduler {
  13:src/../h/Scheduler.hpp **** private:
  14:src/../h/Scheduler.hpp ****     static TCB* head, * tail;
  15:src/../h/Scheduler.hpp ****     static TCB* sleepingHead;
  16:src/../h/Scheduler.hpp **** 
  17:src/../h/Scheduler.hpp ****     Scheduler() {}
  18:src/../h/Scheduler.hpp **** 
  19:src/../h/Scheduler.hpp **** public:
  20:src/../h/Scheduler.hpp ****     //stavljanje na kraj reda aktivnih niti
  21:src/../h/Scheduler.hpp ****     static void put(TCB* tcb);
  22:src/../h/Scheduler.hpp **** 
  23:src/../h/Scheduler.hpp ****     //uzimanje sa pocetka reda aktivnih niti
  24:src/../h/Scheduler.hpp ****     static TCB* get();
  25:src/../h/Scheduler.hpp **** 
  26:src/../h/Scheduler.hpp ****     //stavljanje u red uspavanih niti
  27:src/../h/Scheduler.hpp ****     static void putToSleep(TCB* tcb, time_t sleepTime);
  28:src/../h/Scheduler.hpp **** 
  29:src/../h/Scheduler.hpp ****     //azuriranje vrednosti u redu uspavanih niti, budjenje niti po potrebi
  30:src/../h/Scheduler.hpp ****     static void wake();
  31:src/../h/Scheduler.hpp **** 
  32:src/../h/Scheduler.hpp ****     static TCB* getHead() { return head; }
  33:src/../h/Scheduler.hpp **** 
  34:src/../h/Scheduler.hpp ****     static void setHead(TCB* tcb) { head = tcb; }
  35:src/../h/Scheduler.hpp **** 
  36:src/../h/Scheduler.hpp ****     static TCB* getTail() { return tail; }
  37:src/../h/Scheduler.hpp **** 
  38:src/../h/Scheduler.hpp ****     static void setTail(TCB* tcb) { tail = tcb; }
  39:src/../h/Scheduler.hpp **** 
  40:src/../h/Scheduler.hpp ****     static TCB* getSleepingHead() { return sleepingHead; }
 581              		.loc 6 40 37
 582              		.loc 6 40 44 is_stmt 0
 583 0338 97070000 		la	a5,_ZN9Scheduler12sleepingHeadE
 583      83B70700 
 584 0340 83B70700 		ld	a5,0(a5)
 585              	.LVL50:
 586              	.LBE67:
 587              	.LBE66:
 588              		.loc 1 121 23
GAS LISTING /tmp/ccwb65mv.s 			page 20


 589 0344 13070000 		li	a4,0
 590              	.LVL51:
 591              	.L47:
 122:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextSleeping);
 592              		.loc 1 122 23 is_stmt 1 discriminator 2
 593 0348 6380970C 		beq	a5,s1,.L46
 121:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextSleeping);
 594              		.loc 1 121 13 discriminator 1
 595              	.LVL52:
 596              		.loc 1 122 39 is_stmt 0 discriminator 1
 597 034c 13870700 		mv	a4,a5
 598              		.loc 1 122 52 discriminator 1
 599 0350 83B70704 		ld	a5,64(a5)
 600              	.LVL53:
 121:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextSleeping);
 601              		.loc 1 121 13 discriminator 1
 602 0354 6FF05FFF 		j	.L47
 603              	.LVL54:
 604              	.L37:
  88:src/TCB.cpp   ****             //nit je u Scheduler-u, treba da se izbaci nit i preveze Scheduler
 605              		.loc 1 88 9 is_stmt 1
  90:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
 606              		.loc 1 90 13
 607              	.LBB68:
 608              	.LBB69:
  32:src/../h/Scheduler.hpp **** 
 609              		.loc 6 32 29
  32:src/../h/Scheduler.hpp **** 
 610              		.loc 6 32 36 is_stmt 0
 611 0358 97070000 		la	a5,_ZN9Scheduler4headE
 611      83B70700 
 612 0360 83B70700 		ld	a5,0(a5)
 613              	.LVL55:
 614              	.LBE69:
 615              	.LBE68:
  90:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
 616              		.loc 1 90 23
 617 0364 13070000 		li	a4,0
 618              	.LVL56:
 619              	.L42:
  91:src/TCB.cpp   ****             if (!prev) {
 620              		.loc 1 91 23 is_stmt 1 discriminator 2
 621 0368 63889700 		beq	a5,s1,.L41
  90:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
 622              		.loc 1 90 13 discriminator 1
 623              	.LVL57:
  91:src/TCB.cpp   ****             if (!prev) {
 624              		.loc 1 91 39 is_stmt 0 discriminator 1
 625 036c 13870700 		mv	a4,a5
  91:src/TCB.cpp   ****             if (!prev) {
 626              		.loc 1 91 52 discriminator 1
 627 0370 83B70703 		ld	a5,48(a5)
 628              	.LVL58:
  90:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
 629              		.loc 1 90 13 discriminator 1
 630 0374 6FF05FFF 		j	.L42
 631              	.L41:
GAS LISTING /tmp/ccwb65mv.s 			page 21


  92:src/TCB.cpp   ****                 Scheduler::setHead(curr->nextInScheduler);
 632              		.loc 1 92 13 is_stmt 1
 633 0378 63060704 		beqz	a4,.L53
  95:src/TCB.cpp   ****             }
 634              		.loc 1 95 17
  95:src/TCB.cpp   ****             }
 635              		.loc 1 95 47 is_stmt 0
 636 037c 83B60703 		ld	a3,48(a5)
  95:src/TCB.cpp   ****             }
 637              		.loc 1 95 39
 638 0380 2338D702 		sd	a3,48(a4)
 639              	.L44:
  97:src/TCB.cpp   ****                 Scheduler::setTail(prev);
 640              		.loc 1 97 13 is_stmt 1
 641              	.LBB70:
 642              	.LBB71:
  36:src/../h/Scheduler.hpp **** 
 643              		.loc 6 36 29
  36:src/../h/Scheduler.hpp **** 
 644              		.loc 6 36 36 is_stmt 0
 645 0384 97060000 		la	a3,_ZN9Scheduler4tailE
 645      83B60600 
 646 038c 83B60600 		ld	a3,0(a3)
 647              	.LBE71:
 648              	.LBE70:
  97:src/TCB.cpp   ****                 Scheduler::setTail(prev);
 649              		.loc 1 97 13
 650 0390 6384D704 		beq	a5,a3,.L54
 651              	.L45:
 100:src/TCB.cpp   ****             break;
 652              		.loc 1 100 13 is_stmt 1
 100:src/TCB.cpp   ****             break;
 653              		.loc 1 100 35 is_stmt 0
 654 0394 23B80702 		sd	zero,48(a5)
 101:src/TCB.cpp   ****         case BLOCKED:
 655              		.loc 1 101 13 is_stmt 1
 656              	.LVL59:
 657              	.L39:
 123:src/TCB.cpp   ****             if (!prev) {
 124:src/TCB.cpp   ****                 Scheduler::setSleepingHead(curr->nextSleeping);
 125:src/TCB.cpp   ****             } else {
 126:src/TCB.cpp   ****                 prev->nextSleeping = curr->nextSleeping;
 127:src/TCB.cpp   ****             }
 128:src/TCB.cpp   ****             if (curr->nextSleeping) {
 129:src/TCB.cpp   ****                 curr->nextSleeping->timeToSleep += curr->timeToSleep;
 130:src/TCB.cpp   ****             }
 131:src/TCB.cpp   ****             curr->timeToSleep = 0;
 132:src/TCB.cpp   ****             curr->nextSleeping = nullptr;
 133:src/TCB.cpp   ****             break;
 134:src/TCB.cpp   ****         case FINISHED:
 135:src/TCB.cpp   ****             break;
 136:src/TCB.cpp   ****         default:
 137:src/TCB.cpp   ****             break;
 138:src/TCB.cpp   ****     }
 139:src/TCB.cpp   ****     handle->status = FINISHED;
 658              		.loc 1 139 5
 659              		.loc 1 139 20 is_stmt 0
GAS LISTING /tmp/ccwb65mv.s 			page 22


 660 0398 93075000 		li	a5,5
 661 039c 23ACF404 		sw	a5,88(s1)
 140:src/TCB.cpp   ****     delete handle->stack;
 662              		.loc 1 140 5 is_stmt 1
 663              		.loc 1 140 20 is_stmt 0
 664 03a0 03B58401 		ld	a0,24(s1)
 665              		.loc 1 140 25
 666 03a4 63060500 		beqz	a0,.L34
 667              		.loc 1 140 20 discriminator 1
 668 03a8 97000000 		call	_ZdlPv@plt
 668      E7800000 
 669              	.LVL60:
 670              	.L34:
 141:src/TCB.cpp   **** }
 671              		.loc 1 141 1
 672 03b0 83308101 		ld	ra,24(sp)
 673              		.cfi_remember_state
 674              		.cfi_restore 1
 675 03b4 03340101 		ld	s0,16(sp)
 676              		.cfi_restore 8
 677              		.cfi_def_cfa 2, 32
 678 03b8 83348100 		ld	s1,8(sp)
 679              		.cfi_restore 9
 680              	.LVL61:
 681 03bc 13010102 		addi	sp,sp,32
 682              		.cfi_def_cfa_offset 0
 683 03c0 67800000 		jr	ra
 684              	.LVL62:
 685              	.L53:
 686              		.cfi_restore_state
  93:src/TCB.cpp   ****             } else {
 687              		.loc 1 93 17 is_stmt 1
  93:src/TCB.cpp   ****             } else {
 688              		.loc 1 93 35 is_stmt 0
 689 03c4 03B60703 		ld	a2,48(a5)
 690              	.LVL63:
 691              	.LBB72:
 692              	.LBB73:
  34:src/../h/Scheduler.hpp **** 
 693              		.loc 6 34 37 is_stmt 1
  34:src/../h/Scheduler.hpp **** 
 694              		.loc 6 34 42 is_stmt 0
 695 03c8 97060000 		la	a3,_ZN9Scheduler4headE
 695      83B60600 
 696 03d0 23B0C600 		sd	a2,0(a3)
  34:src/../h/Scheduler.hpp **** 
 697              		.loc 6 34 49
 698 03d4 6FF01FFB 		j	.L44
 699              	.LVL64:
 700              	.L54:
 701              	.LBE73:
 702              	.LBE72:
  98:src/TCB.cpp   ****             }
 703              		.loc 1 98 17 is_stmt 1
 704              	.LBB74:
 705              	.LBB75:
  38:src/../h/Scheduler.hpp **** 
GAS LISTING /tmp/ccwb65mv.s 			page 23


 706              		.loc 6 38 37
  38:src/../h/Scheduler.hpp **** 
 707              		.loc 6 38 42 is_stmt 0
 708 03d8 97060000 		la	a3,_ZN9Scheduler4tailE
 708      83B60600 
 709 03e0 23B0E600 		sd	a4,0(a3)
  38:src/../h/Scheduler.hpp **** 
 710              		.loc 6 38 49
 711 03e4 6FF01FFB 		j	.L45
 712              	.LVL65:
 713              	.L35:
 714              	.LBE75:
 715              	.LBE74:
 111:src/TCB.cpp   ****             //nit ceka da se neka druga nit zavrsi
 716              		.loc 1 111 9 is_stmt 1
 113:src/TCB.cpp   ****                 //greska
 717              		.loc 1 113 13
 113:src/TCB.cpp   ****                 //greska
 718              		.loc 1 113 25 is_stmt 0
 719 03e8 03358506 		ld	a0,104(a0)
 720              	.LVL66:
 721              	.LBB76:
 722              	.LBB77:
  33:src/../h/TCB.hpp **** 
 723              		.loc 3 33 46 is_stmt 1
 724              	.LBE77:
 725              	.LBE76:
 113:src/TCB.cpp   ****                 //greska
 726              		.loc 1 113 74 is_stmt 0
 727 03ec 93850400 		mv	a1,s1
 728 03f0 13058504 		addi	a0,a0,72
 729 03f4 97000000 		call	_ZN11ThreadQueue6removeEP3TCB@plt
 729      E7800000 
 730              	.LVL67:
 113:src/TCB.cpp   ****                 //greska
 731              		.loc 1 113 13
 732 03fc E34E05F8 		bltz	a0,.L39
 116:src/TCB.cpp   ****             }
 733              		.loc 1 116 17 is_stmt 1
 116:src/TCB.cpp   ****             }
 734              		.loc 1 116 40 is_stmt 0
 735 0400 23B40406 		sd	zero,104(s1)
 736 0404 6FF05FF9 		j	.L39
 737              	.LVL68:
 738              	.L46:
 123:src/TCB.cpp   ****                 Scheduler::setSleepingHead(curr->nextSleeping);
 739              		.loc 1 123 13 is_stmt 1
 740 0408 63080702 		beqz	a4,.L55
 126:src/TCB.cpp   ****             }
 741              		.loc 1 126 17
 126:src/TCB.cpp   ****             }
 742              		.loc 1 126 44 is_stmt 0
 743 040c 83B60704 		ld	a3,64(a5)
 126:src/TCB.cpp   ****             }
 744              		.loc 1 126 36
 745 0410 2330D704 		sd	a3,64(a4)
 746              	.LVL69:
GAS LISTING /tmp/ccwb65mv.s 			page 24


 747              	.L49:
 128:src/TCB.cpp   ****                 curr->nextSleeping->timeToSleep += curr->timeToSleep;
 748              		.loc 1 128 13 is_stmt 1
 128:src/TCB.cpp   ****                 curr->nextSleeping->timeToSleep += curr->timeToSleep;
 749              		.loc 1 128 23 is_stmt 0
 750 0414 03B70704 		ld	a4,64(a5)
 128:src/TCB.cpp   ****                 curr->nextSleeping->timeToSleep += curr->timeToSleep;
 751              		.loc 1 128 13
 752 0418 630A0700 		beqz	a4,.L50
 129:src/TCB.cpp   ****             }
 753              		.loc 1 129 17 is_stmt 1
 129:src/TCB.cpp   ****             }
 754              		.loc 1 129 58 is_stmt 0
 755 041c 03B68703 		ld	a2,56(a5)
 129:src/TCB.cpp   ****             }
 756              		.loc 1 129 49
 757 0420 83368703 		ld	a3,56(a4)
 758 0424 B386C600 		add	a3,a3,a2
 759 0428 233CD702 		sd	a3,56(a4)
 760              	.L50:
 131:src/TCB.cpp   ****             curr->nextSleeping = nullptr;
 761              		.loc 1 131 13 is_stmt 1
 131:src/TCB.cpp   ****             curr->nextSleeping = nullptr;
 762              		.loc 1 131 31 is_stmt 0
 763 042c 23BC0702 		sd	zero,56(a5)
 132:src/TCB.cpp   ****             break;
 764              		.loc 1 132 13 is_stmt 1
 132:src/TCB.cpp   ****             break;
 765              		.loc 1 132 32 is_stmt 0
 766 0430 23B00704 		sd	zero,64(a5)
 133:src/TCB.cpp   ****         case FINISHED:
 767              		.loc 1 133 13 is_stmt 1
 768 0434 6FF05FF6 		j	.L39
 769              	.LVL70:
 770              	.L55:
 124:src/TCB.cpp   ****             } else {
 771              		.loc 1 124 17
 124:src/TCB.cpp   ****             } else {
 772              		.loc 1 124 43 is_stmt 0
 773 0438 83B60704 		ld	a3,64(a5)
 774              	.LVL71:
 775              	.LBB78:
 776              	.LBB79:
  41:src/../h/Scheduler.hpp **** 
  42:src/../h/Scheduler.hpp ****     static void setSleepingHead(TCB* tcb) { sleepingHead = tcb; }
 777              		.loc 6 42 45 is_stmt 1
 778              		.loc 6 42 58 is_stmt 0
 779 043c 17070000 		la	a4,_ZN9Scheduler12sleepingHeadE
 779      03370700 
 780              	.LVL72:
 781 0444 2330D700 		sd	a3,0(a4)
 782              		.loc 6 42 65
 783 0448 6FF0DFFC 		j	.L49
 784              	.LBE79:
 785              	.LBE78:
 786              		.cfi_endproc
 787              	.LFE62:
GAS LISTING /tmp/ccwb65mv.s 			page 25


 789              		.globl	_ZN3TCB16runningTimeSliceE
 790              		.globl	_ZN3TCB7runningE
 791              		.bss
 792              		.align	3
 793              		.set	.LANCHOR0,. + 0
 796              	_ZN3TCB7runningE:
 797 0000 00000000 		.zero	8
 797      00000000 
 800              	_ZN3TCB16runningTimeSliceE:
 801 0008 00000000 		.zero	8
 801      00000000 
 802              		.text
 803              	.Letext0:
 804              		.file 7 "src/../h/../lib/hw.h"
 805              		.file 8 "src/../h/../h/../h/syscall_c.hpp"
GAS LISTING /tmp/ccwb65mv.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 TCB.cpp
     /tmp/ccwb65mv.s:9      .text:0000000000000000 _ZN3TCB7wrapperEv
     /tmp/ccwb65mv.s:13     .text:0000000000000000 .L0 
     /tmp/ccwb65mv.s:14     .text:0000000000000000 .L0 
     /tmp/ccwb65mv.s:15     .text:0000000000000004 .L0 
     /tmp/ccwb65mv.s:18     .text:000000000000000c .L0 
     /tmp/ccwb65mv.s:19     .text:000000000000000c .L0 
     /tmp/ccwb65mv.s:21     .text:0000000000000010 .L0 
     /tmp/ccwb65mv.s:23     .text:0000000000000010 .L0 
     /tmp/ccwb65mv.s:24     .text:0000000000000010 .L0 
     /tmp/ccwb65mv.s:27     .text:0000000000000018 .L0 
     /tmp/ccwb65mv.s:28     .text:0000000000000018 .L0 
     /tmp/ccwb65mv.s:31     .text:0000000000000024 .L0 
     /tmp/ccwb65mv.s:35     .text:000000000000002c .L0 
     /tmp/ccwb65mv.s:36     .text:000000000000002c .L0 
     /tmp/ccwb65mv.s:39     .text:0000000000000034 .L0 
     /tmp/ccwb65mv.s:40     .text:0000000000000038 .L0 
     /tmp/ccwb65mv.s:42     .text:000000000000003c .L0 
     /tmp/ccwb65mv.s:43     .text:000000000000003c .L0 
     /tmp/ccwb65mv.s:45     .text:0000000000000040 .L0 
     /tmp/ccwb65mv.s:47     .text:0000000000000044 .L0 
     /tmp/ccwb65mv.s:53     .text:0000000000000044 _ZN3TCB8dispatchEv
     /tmp/ccwb65mv.s:56     .text:0000000000000044 .L0 
     /tmp/ccwb65mv.s:57     .text:0000000000000044 .L0 
     /tmp/ccwb65mv.s:58     .text:0000000000000048 .L0 
     /tmp/ccwb65mv.s:62     .text:0000000000000054 .L0 
     /tmp/ccwb65mv.s:63     .text:0000000000000054 .L0 
     /tmp/ccwb65mv.s:64     .text:0000000000000054 .L0 
     /tmp/ccwb65mv.s:66     .text:0000000000000058 .L0 
     /tmp/ccwb65mv.s:68     .text:0000000000000058 .L0 
     /tmp/ccwb65mv.s:69     .text:0000000000000058 .L0 
     /tmp/ccwb65mv.s:72     .text:0000000000000060 .L0 
     /tmp/ccwb65mv.s:73     .text:0000000000000060 .L0 
     /tmp/ccwb65mv.s:75     .text:0000000000000064 .L0 
     /tmp/ccwb65mv.s:78     .text:000000000000006c .L0 
     /tmp/ccwb65mv.s:82     .text:0000000000000074 .L0 
     /tmp/ccwb65mv.s:83     .text:0000000000000074 .L0 
     /tmp/ccwb65mv.s:87     .text:0000000000000080 .L0 
     /tmp/ccwb65mv.s:90     .text:000000000000008c .L0 
     /tmp/ccwb65mv.s:91     .text:000000000000008c .L0 
     /tmp/ccwb65mv.s:93     .text:0000000000000090 .L0 
     /tmp/ccwb65mv.s:94     .text:0000000000000090 .L0 
     /tmp/ccwb65mv.s:96     .text:0000000000000094 .L0 
     /tmp/ccwb65mv.s:99     .text:00000000000000a0 .L0 
     /tmp/ccwb65mv.s:102    .text:00000000000000ac .L0 
     /tmp/ccwb65mv.s:109    .text:00000000000000b8 .L0 
     /tmp/ccwb65mv.s:110    .text:00000000000000b8 .L0 
     /tmp/ccwb65mv.s:111    .text:00000000000000b8 .L0 
     /tmp/ccwb65mv.s:118    .text:00000000000000c0 .L0 
     /tmp/ccwb65mv.s:124    .text:00000000000000c4 .L0 
     /tmp/ccwb65mv.s:125    .text:00000000000000c4 .L0 
     /tmp/ccwb65mv.s:131    .text:00000000000000d4 .L0 
     /tmp/ccwb65mv.s:132    .text:00000000000000d4 .L0 
     /tmp/ccwb65mv.s:134    .text:00000000000000d8 .L0 
     /tmp/ccwb65mv.s:136    .text:00000000000000dc .L0 
     /tmp/ccwb65mv.s:140    .text:00000000000000e4 .L0 
GAS LISTING /tmp/ccwb65mv.s 			page 27


     /tmp/ccwb65mv.s:141    .text:00000000000000e4 .L0 
     /tmp/ccwb65mv.s:148    .text:00000000000000ec .L0 
     /tmp/ccwb65mv.s:149    .text:00000000000000ec .L0 
     /tmp/ccwb65mv.s:150    .text:00000000000000ec .L0 
     /tmp/ccwb65mv.s:161    .text:00000000000000f4 .L0 
     /tmp/ccwb65mv.s:163    .text:00000000000000f8 .L0 
     /tmp/ccwb65mv.s:164    .text:00000000000000f8 .L0 
     /tmp/ccwb65mv.s:169    .text:0000000000000104 .L0 
     /tmp/ccwb65mv.s:170    .text:0000000000000108 .L0 
     /tmp/ccwb65mv.s:172    .text:000000000000010c .L0 
     /tmp/ccwb65mv.s:173    .text:000000000000010c .L0 
     /tmp/ccwb65mv.s:175    .text:0000000000000110 .L0 
     /tmp/ccwb65mv.s:178    .text:0000000000000114 .L0 
     /tmp/ccwb65mv.s:180    .text:0000000000000118 .L0 
     /tmp/ccwb65mv.s:186    .text:0000000000000118 _ZN3TCBnwEm
     /tmp/ccwb65mv.s:189    .text:0000000000000118 .L0 
     /tmp/ccwb65mv.s:191    .text:0000000000000118 .L0 
     /tmp/ccwb65mv.s:192    .text:000000000000011c .L0 
     /tmp/ccwb65mv.s:195    .text:0000000000000124 .L0 
     /tmp/ccwb65mv.s:196    .text:0000000000000124 .L0 
     /tmp/ccwb65mv.s:198    .text:0000000000000128 .L0 
     /tmp/ccwb65mv.s:200    .text:0000000000000128 .L0 
     /tmp/ccwb65mv.s:201    .text:0000000000000128 .L0 
     /tmp/ccwb65mv.s:204    .text:0000000000000130 .L0 
     /tmp/ccwb65mv.s:205    .text:0000000000000134 .L0 
     /tmp/ccwb65mv.s:207    .text:0000000000000138 .L0 
     /tmp/ccwb65mv.s:208    .text:0000000000000138 .L0 
     /tmp/ccwb65mv.s:210    .text:000000000000013c .L0 
     /tmp/ccwb65mv.s:212    .text:0000000000000140 .L0 
     /tmp/ccwb65mv.s:218    .text:0000000000000140 _ZN3TCB12createThreadEPFvPvES0_Pm
     /tmp/ccwb65mv.s:221    .text:0000000000000140 .L0 
     /tmp/ccwb65mv.s:223    .text:0000000000000140 .L0 
     /tmp/ccwb65mv.s:224    .text:0000000000000144 .L0 
     /tmp/ccwb65mv.s:230    .text:0000000000000158 .L0 
     /tmp/ccwb65mv.s:231    .text:0000000000000158 .L0 
     /tmp/ccwb65mv.s:232    .text:0000000000000158 .L0 
     /tmp/ccwb65mv.s:233    .text:0000000000000158 .L0 
     /tmp/ccwb65mv.s:234    .text:0000000000000158 .L0 
     /tmp/ccwb65mv.s:236    .text:000000000000015c .L0 
     /tmp/ccwb65mv.s:241    .text:0000000000000168 .L0 
     /tmp/ccwb65mv.s:242    .text:0000000000000168 .L0 
     /tmp/ccwb65mv.s:250    .text:0000000000000174 .L0 
     /tmp/ccwb65mv.s:263    .text:0000000000000194 .L0 
     /tmp/ccwb65mv.s:269    .text:000000000000019c .L0 
     /tmp/ccwb65mv.s:274    .text:00000000000001a8 .L0 
     /tmp/ccwb65mv.s:275    .text:00000000000001a8 .L0 
     /tmp/ccwb65mv.s:281    .text:00000000000001bc .L0 
     /tmp/ccwb65mv.s:282    .text:00000000000001bc .L0 
     /tmp/ccwb65mv.s:284    .text:00000000000001c0 .L0 
     /tmp/ccwb65mv.s:289    .text:00000000000001c8 .L0 
     /tmp/ccwb65mv.s:290    .text:00000000000001c8 .L0 
     /tmp/ccwb65mv.s:292    .text:00000000000001cc .L0 
     /tmp/ccwb65mv.s:293    .text:00000000000001cc .L0 
     /tmp/ccwb65mv.s:299    .text:00000000000001d0 .L0 
     /tmp/ccwb65mv.s:300    .text:00000000000001d0 .L0 
     /tmp/ccwb65mv.s:301    .text:00000000000001d4 .L0 
     /tmp/ccwb65mv.s:302    .text:00000000000001d4 .L0 
GAS LISTING /tmp/ccwb65mv.s 			page 28


     /tmp/ccwb65mv.s:304    .text:00000000000001d8 .L0 
     /tmp/ccwb65mv.s:305    .text:00000000000001d8 .L0 
     /tmp/ccwb65mv.s:307    .text:00000000000001dc .L0 
     /tmp/ccwb65mv.s:310    .text:00000000000001e0 .L0 
     /tmp/ccwb65mv.s:313    .text:00000000000001e4 .L0 
     /tmp/ccwb65mv.s:316    .text:00000000000001e8 .L0 
     /tmp/ccwb65mv.s:320    .text:00000000000001ec .L0 
     /tmp/ccwb65mv.s:325    .text:00000000000001ec .L0 
     /tmp/ccwb65mv.s:330    .text:00000000000001f4 .L0 
     /tmp/ccwb65mv.s:336    .text:00000000000001fc .L0 
     /tmp/ccwb65mv.s:342    .text:00000000000001fc _ZN3TCBdlEPv
     /tmp/ccwb65mv.s:345    .text:00000000000001fc .L0 
     /tmp/ccwb65mv.s:347    .text:00000000000001fc .L0 
     /tmp/ccwb65mv.s:348    .text:0000000000000200 .L0 
     /tmp/ccwb65mv.s:351    .text:0000000000000208 .L0 
     /tmp/ccwb65mv.s:352    .text:0000000000000208 .L0 
     /tmp/ccwb65mv.s:354    .text:000000000000020c .L0 
     /tmp/ccwb65mv.s:356    .text:000000000000020c .L0 
     /tmp/ccwb65mv.s:357    .text:000000000000020c .L0 
     /tmp/ccwb65mv.s:360    .text:0000000000000214 .L0 
     /tmp/ccwb65mv.s:361    .text:0000000000000218 .L0 
     /tmp/ccwb65mv.s:363    .text:000000000000021c .L0 
     /tmp/ccwb65mv.s:364    .text:000000000000021c .L0 
     /tmp/ccwb65mv.s:366    .text:0000000000000220 .L0 
     /tmp/ccwb65mv.s:368    .text:0000000000000224 .L0 
     /tmp/ccwb65mv.s:374    .text:0000000000000224 _ZN3TCB10threadJoinEPS_
     /tmp/ccwb65mv.s:377    .text:0000000000000224 .L0 
     /tmp/ccwb65mv.s:379    .text:0000000000000224 .L0 
     /tmp/ccwb65mv.s:380    .text:0000000000000224 .L0 
     /tmp/ccwb65mv.s:381    .text:0000000000000224 .L0 
     /tmp/ccwb65mv.s:383    .text:0000000000000228 .L0 
     /tmp/ccwb65mv.s:386    .text:0000000000000230 .L0 
     /tmp/ccwb65mv.s:388    .text:0000000000000238 .L0 
     /tmp/ccwb65mv.s:390    .text:000000000000023c .L0 
     /tmp/ccwb65mv.s:391    .text:0000000000000240 .L0 
     /tmp/ccwb65mv.s:394    .text:0000000000000248 .L0 
     /tmp/ccwb65mv.s:395    .text:0000000000000248 .L0 
     /tmp/ccwb65mv.s:397    .text:000000000000024c .L0 
     /tmp/ccwb65mv.s:399    .text:000000000000024c .L0 
     /tmp/ccwb65mv.s:400    .text:000000000000024c .L0 
     /tmp/ccwb65mv.s:406    .text:0000000000000254 .L0 
     /tmp/ccwb65mv.s:407    .text:0000000000000254 .L0 
     /tmp/ccwb65mv.s:408    .text:0000000000000254 .L0 
     /tmp/ccwb65mv.s:413    .text:0000000000000258 .L0 
     /tmp/ccwb65mv.s:414    .text:0000000000000258 .L0 
     /tmp/ccwb65mv.s:419    .text:0000000000000264 .L0 
     /tmp/ccwb65mv.s:420    .text:0000000000000268 .L0 
     /tmp/ccwb65mv.s:422    .text:000000000000026c .L0 
     /tmp/ccwb65mv.s:423    .text:000000000000026c .L0 
     /tmp/ccwb65mv.s:425    .text:0000000000000270 .L0 
     /tmp/ccwb65mv.s:430    .text:0000000000000278 .L0 
     /tmp/ccwb65mv.s:436    .text:0000000000000278 _ZN3TCB13releaseJoinedEPS_
     /tmp/ccwb65mv.s:439    .text:0000000000000278 .L0 
     /tmp/ccwb65mv.s:441    .text:0000000000000278 .L0 
     /tmp/ccwb65mv.s:442    .text:000000000000027c .L0 
     /tmp/ccwb65mv.s:446    .text:0000000000000288 .L0 
     /tmp/ccwb65mv.s:447    .text:0000000000000288 .L0 
GAS LISTING /tmp/ccwb65mv.s 			page 29


     /tmp/ccwb65mv.s:448    .text:0000000000000288 .L0 
     /tmp/ccwb65mv.s:450    .text:000000000000028c .L0 
     /tmp/ccwb65mv.s:455    .text:0000000000000290 .L0 
     /tmp/ccwb65mv.s:458    .text:0000000000000290 .L0 
     /tmp/ccwb65mv.s:459    .text:0000000000000290 .L0 
     /tmp/ccwb65mv.s:460    .text:0000000000000290 .L0 
     /tmp/ccwb65mv.s:465    .text:0000000000000294 .L0 
     /tmp/ccwb65mv.s:468    .text:0000000000000298 .L0 
     /tmp/ccwb65mv.s:469    .text:0000000000000298 .L0 
     /tmp/ccwb65mv.s:475    .text:00000000000002a4 .L0 
     /tmp/ccwb65mv.s:476    .text:00000000000002a4 .L0 
     /tmp/ccwb65mv.s:477    .text:00000000000002a4 .L0 
     /tmp/ccwb65mv.s:482    .text:00000000000002a8 .L0 
     /tmp/ccwb65mv.s:483    .text:00000000000002a8 .L0 
     /tmp/ccwb65mv.s:487    .text:00000000000002b0 .L0 
     /tmp/ccwb65mv.s:490    .text:00000000000002b4 .L0 
     /tmp/ccwb65mv.s:491    .text:00000000000002b8 .L0 
     /tmp/ccwb65mv.s:493    .text:00000000000002bc .L0 
     /tmp/ccwb65mv.s:494    .text:00000000000002bc .L0 
     /tmp/ccwb65mv.s:496    .text:00000000000002c0 .L0 
     /tmp/ccwb65mv.s:499    .text:00000000000002c4 .L0 
     /tmp/ccwb65mv.s:501    .text:00000000000002c8 .L0 
     /tmp/ccwb65mv.s:507    .text:00000000000002c8 _ZN3TCB10quitThreadEPS_
     /tmp/ccwb65mv.s:510    .text:00000000000002c8 .L0 
     /tmp/ccwb65mv.s:512    .text:00000000000002c8 .L0 
     /tmp/ccwb65mv.s:513    .text:00000000000002cc .L0 
     /tmp/ccwb65mv.s:517    .text:00000000000002d8 .L0 
     /tmp/ccwb65mv.s:518    .text:00000000000002d8 .L0 
     /tmp/ccwb65mv.s:519    .text:00000000000002d8 .L0 
     /tmp/ccwb65mv.s:521    .text:00000000000002dc .L0 
     /tmp/ccwb65mv.s:524    .text:00000000000002e0 .L0 
     /tmp/ccwb65mv.s:525    .text:00000000000002e0 .L0 
     /tmp/ccwb65mv.s:526    .text:00000000000002e0 .L0 
     /tmp/ccwb65mv.s:528    .text:00000000000002e4 .L0 
     /tmp/ccwb65mv.s:536    .text:0000000000000300 .L0 
     /tmp/ccwb65mv.s:537    .text:0000000000000300 .L0 
     /tmp/ccwb65mv.s:538    .text:0000000000000300 .L0 
     /tmp/ccwb65mv.s:546    .text:0000000000000304 .L0 
     /tmp/ccwb65mv.s:547    .text:0000000000000304 .L0 
     /tmp/ccwb65mv.s:552    .text:0000000000000314 .L0 
     /tmp/ccwb65mv.s:554    .text:0000000000000318 .L0 
     /tmp/ccwb65mv.s:555    .text:0000000000000318 .L0 
     /tmp/ccwb65mv.s:560    .text:000000000000031c .L0 
     /tmp/ccwb65mv.s:561    .text:000000000000031c .L0 
     /tmp/ccwb65mv.s:568    .text:0000000000000328 .L0 
     /tmp/ccwb65mv.s:569    .text:0000000000000328 .L0 
     /tmp/ccwb65mv.s:573    .text:0000000000000330 .L0 
     /tmp/ccwb65mv.s:576    .text:0000000000000338 .L0 
     /tmp/ccwb65mv.s:581    .text:0000000000000338 .L0 
     /tmp/ccwb65mv.s:582    .text:0000000000000338 .L0 
     /tmp/ccwb65mv.s:583    .text:0000000000000338 .L0 
     /tmp/ccwb65mv.s:589    .text:0000000000000344 .L0 
     /tmp/ccwb65mv.s:593    .text:0000000000000348 .L0 
     /tmp/ccwb65mv.s:596    .text:000000000000034c .L0 
     /tmp/ccwb65mv.s:597    .text:000000000000034c .L0 
     /tmp/ccwb65mv.s:599    .text:0000000000000350 .L0 
     /tmp/ccwb65mv.s:602    .text:0000000000000354 .L0 
GAS LISTING /tmp/ccwb65mv.s 			page 30


     /tmp/ccwb65mv.s:606    .text:0000000000000358 .L0 
     /tmp/ccwb65mv.s:609    .text:0000000000000358 .L0 
     /tmp/ccwb65mv.s:610    .text:0000000000000358 .L0 
     /tmp/ccwb65mv.s:611    .text:0000000000000358 .L0 
     /tmp/ccwb65mv.s:617    .text:0000000000000364 .L0 
     /tmp/ccwb65mv.s:621    .text:0000000000000368 .L0 
     /tmp/ccwb65mv.s:624    .text:000000000000036c .L0 
     /tmp/ccwb65mv.s:625    .text:000000000000036c .L0 
     /tmp/ccwb65mv.s:627    .text:0000000000000370 .L0 
     /tmp/ccwb65mv.s:630    .text:0000000000000374 .L0 
     /tmp/ccwb65mv.s:633    .text:0000000000000378 .L0 
     /tmp/ccwb65mv.s:635    .text:000000000000037c .L0 
     /tmp/ccwb65mv.s:636    .text:000000000000037c .L0 
     /tmp/ccwb65mv.s:638    .text:0000000000000380 .L0 
     /tmp/ccwb65mv.s:643    .text:0000000000000384 .L0 
     /tmp/ccwb65mv.s:644    .text:0000000000000384 .L0 
     /tmp/ccwb65mv.s:645    .text:0000000000000384 .L0 
     /tmp/ccwb65mv.s:650    .text:0000000000000390 .L0 
     /tmp/ccwb65mv.s:653    .text:0000000000000394 .L0 
     /tmp/ccwb65mv.s:654    .text:0000000000000394 .L0 
     /tmp/ccwb65mv.s:658    .text:0000000000000398 .L0 
     /tmp/ccwb65mv.s:659    .text:0000000000000398 .L0 
     /tmp/ccwb65mv.s:660    .text:0000000000000398 .L0 
     /tmp/ccwb65mv.s:663    .text:00000000000003a0 .L0 
     /tmp/ccwb65mv.s:664    .text:00000000000003a0 .L0 
     /tmp/ccwb65mv.s:666    .text:00000000000003a4 .L0 
     /tmp/ccwb65mv.s:668    .text:00000000000003a8 .L0 
     /tmp/ccwb65mv.s:672    .text:00000000000003b0 .L0 
     /tmp/ccwb65mv.s:673    .text:00000000000003b4 .L0 
     /tmp/ccwb65mv.s:674    .text:00000000000003b4 .L0 
     /tmp/ccwb65mv.s:676    .text:00000000000003b8 .L0 
     /tmp/ccwb65mv.s:677    .text:00000000000003b8 .L0 
     /tmp/ccwb65mv.s:679    .text:00000000000003bc .L0 
     /tmp/ccwb65mv.s:682    .text:00000000000003c0 .L0 
     /tmp/ccwb65mv.s:686    .text:00000000000003c4 .L0 
     /tmp/ccwb65mv.s:688    .text:00000000000003c4 .L0 
     /tmp/ccwb65mv.s:689    .text:00000000000003c4 .L0 
     /tmp/ccwb65mv.s:694    .text:00000000000003c8 .L0 
     /tmp/ccwb65mv.s:695    .text:00000000000003c8 .L0 
     /tmp/ccwb65mv.s:698    .text:00000000000003d4 .L0 
     /tmp/ccwb65mv.s:706    .text:00000000000003d8 .L0 
     /tmp/ccwb65mv.s:707    .text:00000000000003d8 .L0 
     /tmp/ccwb65mv.s:708    .text:00000000000003d8 .L0 
     /tmp/ccwb65mv.s:711    .text:00000000000003e4 .L0 
     /tmp/ccwb65mv.s:717    .text:00000000000003e8 .L0 
     /tmp/ccwb65mv.s:718    .text:00000000000003e8 .L0 
     /tmp/ccwb65mv.s:719    .text:00000000000003e8 .L0 
     /tmp/ccwb65mv.s:726    .text:00000000000003ec .L0 
     /tmp/ccwb65mv.s:727    .text:00000000000003ec .L0 
     /tmp/ccwb65mv.s:732    .text:00000000000003fc .L0 
     /tmp/ccwb65mv.s:734    .text:0000000000000400 .L0 
     /tmp/ccwb65mv.s:735    .text:0000000000000400 .L0 
     /tmp/ccwb65mv.s:740    .text:0000000000000408 .L0 
     /tmp/ccwb65mv.s:742    .text:000000000000040c .L0 
     /tmp/ccwb65mv.s:743    .text:000000000000040c .L0 
     /tmp/ccwb65mv.s:745    .text:0000000000000410 .L0 
     /tmp/ccwb65mv.s:749    .text:0000000000000414 .L0 
GAS LISTING /tmp/ccwb65mv.s 			page 31


     /tmp/ccwb65mv.s:750    .text:0000000000000414 .L0 
     /tmp/ccwb65mv.s:752    .text:0000000000000418 .L0 
     /tmp/ccwb65mv.s:754    .text:000000000000041c .L0 
     /tmp/ccwb65mv.s:755    .text:000000000000041c .L0 
     /tmp/ccwb65mv.s:757    .text:0000000000000420 .L0 
     /tmp/ccwb65mv.s:762    .text:000000000000042c .L0 
     /tmp/ccwb65mv.s:763    .text:000000000000042c .L0 
     /tmp/ccwb65mv.s:765    .text:0000000000000430 .L0 
     /tmp/ccwb65mv.s:766    .text:0000000000000430 .L0 
     /tmp/ccwb65mv.s:768    .text:0000000000000434 .L0 
     /tmp/ccwb65mv.s:772    .text:0000000000000438 .L0 
     /tmp/ccwb65mv.s:773    .text:0000000000000438 .L0 
     /tmp/ccwb65mv.s:778    .text:000000000000043c .L0 
     /tmp/ccwb65mv.s:779    .text:000000000000043c .L0 
     /tmp/ccwb65mv.s:783    .text:0000000000000448 .L0 
     /tmp/ccwb65mv.s:786    .text:000000000000044c .L0 
     /tmp/ccwb65mv.s:800    .bss:0000000000000008 _ZN3TCB16runningTimeSliceE
     /tmp/ccwb65mv.s:796    .bss:0000000000000000 _ZN3TCB7runningE
     /tmp/ccwb65mv.s:793    .bss:0000000000000000 .LANCHOR0
     /tmp/ccwb65mv.s:806    .text:000000000000044c .L0 
     /tmp/ccwb65mv.s:28     .text:0000000000000018 .L0 
     /tmp/ccwb65mv.s:69     .text:0000000000000058 .L0 
     /tmp/ccwb65mv.s:87     .text:0000000000000080 .L0 
     /tmp/ccwb65mv.s:96     .text:0000000000000094 .L0 
     /tmp/ccwb65mv.s:99     .text:00000000000000a0 .L0 
     /tmp/ccwb65mv.s:102    .text:00000000000000ac .L0 
     /tmp/ccwb65mv.s:275    .text:00000000000001a8 .L0 
     /tmp/ccwb65mv.s:277    .text:00000000000001b4 .L0 
     /tmp/ccwb65mv.s:386    .text:0000000000000230 .L0 
     /tmp/ccwb65mv.s:583    .text:0000000000000338 .L0 
     /tmp/ccwb65mv.s:611    .text:0000000000000358 .L0 
     /tmp/ccwb65mv.s:645    .text:0000000000000384 .L0 
     /tmp/ccwb65mv.s:695    .text:00000000000003c8 .L0 
     /tmp/ccwb65mv.s:708    .text:00000000000003d8 .L0 
     /tmp/ccwb65mv.s:779    .text:000000000000043c .L0 
     /tmp/ccwb65mv.s:120    .text:00000000000000c4 .L12
     /tmp/ccwb65mv.s:129    .text:00000000000000d4 .L13
     /tmp/ccwb65mv.s:143    .text:00000000000000ec .L7
     /tmp/ccwb65mv.s:157    .text:00000000000000f4 .L9
     /tmp/ccwb65mv.s:80     .text:0000000000000074 .L5
     /tmp/ccwb65mv.s:138    .text:00000000000000e4 .L6
     /tmp/ccwb65mv.s:167    .text:0000000000000104 .L3
     /tmp/ccwb65mv.s:319    .text:00000000000001ec .L19
     /tmp/ccwb65mv.s:328    .text:00000000000001f4 .L20
     /tmp/ccwb65mv.s:278    .text:00000000000001bc .L17
     /tmp/ccwb65mv.s:287    .text:00000000000001c8 .L18
     /tmp/ccwb65mv.s:428    .text:0000000000000274 .L27
     /tmp/ccwb65mv.s:488    .text:00000000000002b4 .L30
     /tmp/ccwb65mv.s:453    .text:0000000000000290 .L32
     /tmp/ccwb65mv.s:713    .text:00000000000003e8 .L35
     /tmp/ccwb65mv.s:571    .text:0000000000000330 .L36
     /tmp/ccwb65mv.s:604    .text:0000000000000358 .L37
     /tmp/ccwb65mv.s:657    .text:0000000000000398 .L39
     /tmp/ccwb65mv.s:738    .text:0000000000000408 .L46
     /tmp/ccwb65mv.s:591    .text:0000000000000348 .L47
     /tmp/ccwb65mv.s:631    .text:0000000000000378 .L41
     /tmp/ccwb65mv.s:619    .text:0000000000000368 .L42
GAS LISTING /tmp/ccwb65mv.s 			page 32


     /tmp/ccwb65mv.s:685    .text:00000000000003c4 .L53
     /tmp/ccwb65mv.s:700    .text:00000000000003d8 .L54
     /tmp/ccwb65mv.s:670    .text:00000000000003b0 .L34
     /tmp/ccwb65mv.s:639    .text:0000000000000384 .L44
     /tmp/ccwb65mv.s:651    .text:0000000000000394 .L45
     /tmp/ccwb65mv.s:770    .text:0000000000000438 .L55
     /tmp/ccwb65mv.s:760    .text:000000000000042c .L50
     /tmp/ccwb65mv.s:747    .text:0000000000000414 .L49
     /tmp/ccwb65mv.s:2870   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccwb65mv.s:4920   .debug_str:00000000000009eb .LASF206
     /tmp/ccwb65mv.s:4688   .debug_str:00000000000002fb .LASF207
     /tmp/ccwb65mv.s:4880   .debug_str:00000000000008b8 .LASF208
     /tmp/ccwb65mv.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccwb65mv.s:803    .text:000000000000044c .Letext0
     /tmp/ccwb65mv.s:4578   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccwb65mv.s:4852   .debug_str:00000000000007c9 .LASF3
     /tmp/ccwb65mv.s:4738   .debug_str:000000000000045f .LASF0
     /tmp/ccwb65mv.s:4762   .debug_str:00000000000004f3 .LASF1
     /tmp/ccwb65mv.s:4864   .debug_str:000000000000083f .LASF2
     /tmp/ccwb65mv.s:4872   .debug_str:000000000000087d .LASF4
     /tmp/ccwb65mv.s:4746   .debug_str:0000000000000484 .LASF5
     /tmp/ccwb65mv.s:4598   .debug_str:0000000000000090 .LASF6
     /tmp/ccwb65mv.s:4840   .debug_str:000000000000076c .LASF7
     /tmp/ccwb65mv.s:4836   .debug_str:0000000000000751 .LASF8
     /tmp/ccwb65mv.s:4750   .debug_str:00000000000004a3 .LASF9
     /tmp/ccwb65mv.s:4710   .debug_str:000000000000039c .LASF10
     /tmp/ccwb65mv.s:4720   .debug_str:00000000000003d6 .LASF11
     /tmp/ccwb65mv.s:4636   .debug_str:0000000000000195 .LASF12
     /tmp/ccwb65mv.s:4698   .debug_str:000000000000034d .LASF13
     /tmp/ccwb65mv.s:4654   .debug_str:0000000000000208 .LASF14
     /tmp/ccwb65mv.s:4634   .debug_str:0000000000000185 .LASF15
     /tmp/ccwb65mv.s:4900   .debug_str:000000000000094c .LASF16
     /tmp/ccwb65mv.s:4906   .debug_str:0000000000000977 .LASF17
     /tmp/ccwb65mv.s:4890   .debug_str:0000000000000918 .LASF18
     /tmp/ccwb65mv.s:4884   .debug_str:00000000000008e0 .LASF127
     /tmp/ccwb65mv.s:4842   .debug_str:0000000000000773 .LASF19
     /tmp/ccwb65mv.s:4670   .debug_str:0000000000000297 .LASF20
     /tmp/ccwb65mv.s:4780   .debug_str:000000000000057c .LASF21
     /tmp/ccwb65mv.s:4600   .debug_str:0000000000000097 .LASF22
     /tmp/ccwb65mv.s:4644   .debug_str:00000000000001bd .LASF23
     /tmp/ccwb65mv.s:4628   .debug_str:000000000000015c .LASF24
     /tmp/ccwb65mv.s:4910   .debug_str:00000000000009a2 .LASF101
     /tmp/ccwb65mv.s:4898   .debug_str:000000000000093f .LASF25
     /tmp/ccwb65mv.s:4974   .debug_str:0000000000000c2d .LASF27
     /tmp/ccwb65mv.s:4826   .debug_str:000000000000071a .LASF209
     /tmp/ccwb65mv.s:4640   .debug_str:00000000000001a9 .LASF26
     /tmp/ccwb65mv.s:4722   .debug_str:00000000000003e4 .LASF28
     /tmp/ccwb65mv.s:4740   .debug_str:000000000000046c .LASF29
     /tmp/ccwb65mv.s:4778   .debug_str:0000000000000568 .LASF31
     /tmp/ccwb65mv.s:4768   .debug_str:0000000000000516 .LASF30
     /tmp/ccwb65mv.s:4850   .debug_str:00000000000007b1 .LASF32
     /tmp/ccwb65mv.s:4846   .debug_str:0000000000000796 .LASF33
     /tmp/ccwb65mv.s:4782   .debug_str:0000000000000584 .LASF34
     /tmp/ccwb65mv.s:4972   .debug_str:0000000000000c15 .LASF35
     /tmp/ccwb65mv.s:4976   .debug_str:0000000000000c4f .LASF36
     /tmp/ccwb65mv.s:4648   .debug_str:00000000000001d9 .LASF37
     /tmp/ccwb65mv.s:4946   .debug_str:0000000000000b69 .LASF38
GAS LISTING /tmp/ccwb65mv.s 			page 33


     /tmp/ccwb65mv.s:4832   .debug_str:0000000000000733 .LASF39
     /tmp/ccwb65mv.s:4860   .debug_str:0000000000000815 .LASF40
     /tmp/ccwb65mv.s:4714   .debug_str:00000000000003b4 .LASF41
     /tmp/ccwb65mv.s:4888   .debug_str:0000000000000902 .LASF43
     /tmp/ccwb65mv.s:4582   .debug_str:000000000000000b .LASF45
     /tmp/ccwb65mv.s:4912   .debug_str:00000000000009aa .LASF47
     /tmp/ccwb65mv.s:4944   .debug_str:0000000000000b55 .LASF42
     /tmp/ccwb65mv.s:4822   .debug_str:00000000000006f4 .LASF44
     /tmp/ccwb65mv.s:4942   .debug_str:0000000000000b4a .LASF46
     /tmp/ccwb65mv.s:4700   .debug_str:000000000000035c .LASF48
     /tmp/ccwb65mv.s:4962   .debug_str:0000000000000bd4 .LASF49
     /tmp/ccwb65mv.s:4878   .debug_str:000000000000089d .LASF50
     /tmp/ccwb65mv.s:4676   .debug_str:00000000000002ac .LASF51
     /tmp/ccwb65mv.s:4646   .debug_str:00000000000001c6 .LASF53
     /tmp/ccwb65mv.s:4952   .debug_str:0000000000000bae .LASF52
     /tmp/ccwb65mv.s:4606   .debug_str:00000000000000ce .LASF54
     /tmp/ccwb65mv.s:4716   .debug_str:00000000000003bf .LASF55
     /tmp/ccwb65mv.s:4856   .debug_str:00000000000007ef .LASF56
     /tmp/ccwb65mv.s:4996   .debug_str:0000000000000d07 .LASF57
     /tmp/ccwb65mv.s:4718   .debug_str:00000000000003ca .LASF58
     /tmp/ccwb65mv.s:4586   .debug_str:000000000000001d .LASF59
     /tmp/ccwb65mv.s:4816   .debug_str:00000000000006ca .LASF60
     /tmp/ccwb65mv.s:4984   .debug_str:0000000000000c91 .LASF168
     /tmp/ccwb65mv.s:4936   .debug_str:0000000000000b1d .LASF61
     /tmp/ccwb65mv.s:4632   .debug_str:0000000000000176 .LASF62
     /tmp/ccwb65mv.s:4990   .debug_str:0000000000000cc8 .LASF63
     /tmp/ccwb65mv.s:4950   .debug_str:0000000000000ba9 .LASF64
     /tmp/ccwb65mv.s:4924   .debug_str:0000000000000ac3 .LASF65
     /tmp/ccwb65mv.s:4918   .debug_str:00000000000009db .LASF66
     /tmp/ccwb65mv.s:4834   .debug_str:0000000000000745 .LASF67
     /tmp/ccwb65mv.s:4696   .debug_str:0000000000000340 .LASF68
     /tmp/ccwb65mv.s:4870   .debug_str:000000000000086f .LASF69
     /tmp/ccwb65mv.s:4958   .debug_str:0000000000000bc2 .LASF70
     /tmp/ccwb65mv.s:4800   .debug_str:000000000000065d .LASF71
     /tmp/ccwb65mv.s:5002   .debug_str:0000000000000d35 .LASF72
     /tmp/ccwb65mv.s:4916   .debug_str:00000000000009d3 .LASF73
     /tmp/ccwb65mv.s:4630   .debug_str:0000000000000165 .LASF74
     /tmp/ccwb65mv.s:4662   .debug_str:0000000000000247 .LASF107
     /tmp/ccwb65mv.s:4592   .debug_str:0000000000000051 .LASF108
     /tmp/ccwb65mv.s:4980   .debug_str:0000000000000c79 .LASF75
     /tmp/ccwb65mv.s:4892   .debug_str:000000000000092e .LASF76
     /tmp/ccwb65mv.s:4760   .debug_str:00000000000004eb .LASF77
     /tmp/ccwb65mv.s:4814   .debug_str:00000000000006b7 .LASF78
     /tmp/ccwb65mv.s:4678   .debug_str:00000000000002b5 .LASF79
     /tmp/ccwb65mv.s:4680   .debug_str:00000000000002ba .LASF80
     /tmp/ccwb65mv.s:4904   .debug_str:0000000000000970 .LASF81
     /tmp/ccwb65mv.s:4618   .debug_str:0000000000000113 .LASF82
     /tmp/ccwb65mv.s:4674   .debug_str:00000000000002a3 .LASF83
     /tmp/ccwb65mv.s:4806   .debug_str:0000000000000676 .LASF84
     /tmp/ccwb65mv.s:4682   .debug_str:00000000000002ca .LASF85
     /tmp/ccwb65mv.s:4594   .debug_str:0000000000000079 .LASF86
     /tmp/ccwb65mv.s:4828   .debug_str:000000000000071f .LASF87
     /tmp/ccwb65mv.s:4932   .debug_str:0000000000000aee .LASF88
     /tmp/ccwb65mv.s:4928   .debug_str:0000000000000add .LASF89
     /tmp/ccwb65mv.s:4608   .debug_str:00000000000000e0 .LASF90
     /tmp/ccwb65mv.s:4736   .debug_str:0000000000000459 .LASF91
     /tmp/ccwb65mv.s:4914   .debug_str:00000000000009c2 .LASF92
GAS LISTING /tmp/ccwb65mv.s 			page 34


     /tmp/ccwb65mv.s:4588   .debug_str:000000000000002d .LASF93
     /tmp/ccwb65mv.s:4602   .debug_str:000000000000009f .LASF94
     /tmp/ccwb65mv.s:4970   .debug_str:0000000000000c08 .LASF95
     /tmp/ccwb65mv.s:4940   .debug_str:0000000000000b3a .LASF96
     /tmp/ccwb65mv.s:4866   .debug_str:000000000000084d .LASF97
     /tmp/ccwb65mv.s:4756   .debug_str:00000000000004d6 .LASF98
     /tmp/ccwb65mv.s:4818   .debug_str:00000000000006d7 .LASF99
     /tmp/ccwb65mv.s:4812   .debug_str:00000000000006ab .LASF100
     /tmp/ccwb65mv.s:4672   .debug_str:000000000000029e .LASF102
     /tmp/ccwb65mv.s:4706   .debug_str:000000000000038d .LASF103
     /tmp/ccwb65mv.s:4638   .debug_str:00000000000001a4 .LASF104
     /tmp/ccwb65mv.s:4690   .debug_str:0000000000000307 .LASF105
     /tmp/ccwb65mv.s:4664   .debug_str:0000000000000255 .LASF106
     /tmp/ccwb65mv.s:4844   .debug_str:000000000000077b .LASF109
     /tmp/ccwb65mv.s:4612   .debug_str:0000000000000100 .LASF110
     /tmp/ccwb65mv.s:4758   .debug_str:00000000000004e6 .LASF111
     /tmp/ccwb65mv.s:4624   .debug_str:000000000000013e .LASF112
     /tmp/ccwb65mv.s:4902   .debug_str:0000000000000958 .LASF113
     /tmp/ccwb65mv.s:4934   .debug_str:0000000000000b05 .LASF210
     /tmp/ccwb65mv.s:4748   .debug_str:0000000000000496 .LASF114
     /tmp/ccwb65mv.s:4658   .debug_str:000000000000022d .LASF115
     /tmp/ccwb65mv.s:4744   .debug_str:000000000000047c .LASF116
     /tmp/ccwb65mv.s:4604   .debug_str:00000000000000b2 .LASF117
     /tmp/ccwb65mv.s:4764   .debug_str:0000000000000506 .LASF118
     /tmp/ccwb65mv.s:4798   .debug_str:000000000000063e .LASF119
     /tmp/ccwb65mv.s:4626   .debug_str:0000000000000153 .LASF120
     /tmp/ccwb65mv.s:4794   .debug_str:00000000000005fd .LASF121
     /tmp/ccwb65mv.s:4584   .debug_str:0000000000000016 .LASF122
     /tmp/ccwb65mv.s:4770   .debug_str:0000000000000523 .LASF123
     /tmp/ccwb65mv.s:4656   .debug_str:0000000000000218 .LASF124
     /tmp/ccwb65mv.s:4964   .debug_str:0000000000000be2 .LASF161
     /tmp/ccwb65mv.s:4930   .debug_str:0000000000000ae9 .LASF125
     /tmp/ccwb65mv.s:4966   .debug_str:0000000000000bf8 .LASF126
     /tmp/ccwb65mv.s:4692   .debug_str:0000000000000325 .LASF128
     /tmp/ccwb65mv.s:4694   .debug_str:0000000000000334 .LASF129
     /tmp/ccwb65mv.s:4754   .debug_str:00000000000004c9 .LASF130
     /tmp/ccwb65mv.s:4668   .debug_str:000000000000028b .LASF131
     /tmp/ccwb65mv.s:4792   .debug_str:00000000000005e9 .LASF132
     /tmp/ccwb65mv.s:4948   .debug_str:0000000000000b88 .LASF133
     /tmp/ccwb65mv.s:4596   .debug_str:0000000000000087 .LASF134
     /tmp/ccwb65mv.s:4938   .debug_str:0000000000000b25 .LASF135
     /tmp/ccwb65mv.s:4998   .debug_str:0000000000000d14 .LASF136
     /tmp/ccwb65mv.s:4820   .debug_str:00000000000006df .LASF137
     /tmp/ccwb65mv.s:4954   .debug_str:0000000000000bb6 .LASF138
     /tmp/ccwb65mv.s:4848   .debug_str:000000000000079e .LASF139
     /tmp/ccwb65mv.s:4810   .debug_str:00000000000006a4 .LASF140
     /tmp/ccwb65mv.s:4752   .debug_str:00000000000004b6 .LASF141
     /tmp/ccwb65mv.s:4616   .debug_str:000000000000010b .LASF142
     /tmp/ccwb65mv.s:4922   .debug_str:0000000000000aaf .LASF143
     /tmp/ccwb65mv.s:4802   .debug_str:0000000000000669 .LASF144
     /tmp/ccwb65mv.s:4702   .debug_str:0000000000000374 .LASF145
     /tmp/ccwb65mv.s:4896   .debug_str:0000000000000938 .LASF146
     /tmp/ccwb65mv.s:4876   .debug_str:000000000000088a .LASF147
     /tmp/ccwb65mv.s:4726   .debug_str:0000000000000417 .LASF148
     /tmp/ccwb65mv.s:4684   .debug_str:00000000000002d7 .LASF149
     /tmp/ccwb65mv.s:4874   .debug_str:0000000000000884 .LASF150
     /tmp/ccwb65mv.s:4732   .debug_str:000000000000043e .LASF151
GAS LISTING /tmp/ccwb65mv.s 			page 35


     /tmp/ccwb65mv.s:4742   .debug_str:0000000000000476 .LASF152
     /tmp/ccwb65mv.s:4774   .debug_str:0000000000000546 .LASF153
     /tmp/ccwb65mv.s:4580   .debug_str:0000000000000000 .LASF154
     /tmp/ccwb65mv.s:4868   .debug_str:0000000000000857 .LASF155
     /tmp/ccwb65mv.s:4862   .debug_str:0000000000000834 .LASF156
     /tmp/ccwb65mv.s:4994   .debug_str:0000000000000cef .LASF157
     /tmp/ccwb65mv.s:4968   .debug_str:0000000000000bfe .LASF158
     /tmp/ccwb65mv.s:4652   .debug_str:00000000000001f2 .LASF159
     /tmp/ccwb65mv.s:4642   .debug_str:00000000000001b3 .LASF160
     /tmp/ccwb65mv.s:4790   .debug_str:00000000000005d3 .LASF162
     /tmp/ccwb65mv.s:4708   .debug_str:0000000000000392 .LASF163
     /tmp/ccwb65mv.s:4894   .debug_str:0000000000000933 .LASF164
     /tmp/ccwb65mv.s:4804   .debug_str:0000000000000671 .LASF165
     /tmp/ccwb65mv.s:4988   .debug_str:0000000000000cbb .LASF166
     /tmp/ccwb65mv.s:4982   .debug_str:0000000000000c7f .LASF167
     /tmp/ccwb65mv.s:4730   .debug_str:0000000000000426 .LASF169
     /tmp/ccwb65mv.s:4986   .debug_str:0000000000000ca7 .LASF211
     /tmp/ccwb65mv.s:4960   .debug_str:0000000000000bc9 .LASF170
     /tmp/ccwb65mv.s:4992   .debug_str:0000000000000cce .LASF171
     /tmp/ccwb65mv.s:4772   .debug_str:0000000000000541 .LASF172
     /tmp/ccwb65mv.s:4908   .debug_str:000000000000098d .LASF173
     /tmp/ccwb65mv.s:4728   .debug_str:000000000000041e .LASF174
     /tmp/ccwb65mv.s:4808   .debug_str:000000000000068c .LASF175
     /tmp/ccwb65mv.s:4766   .debug_str:000000000000050e .LASF176
     /tmp/ccwb65mv.s:4590   .debug_str:0000000000000035 .LASF177
     /tmp/ccwb65mv.s:4610   .debug_str:00000000000000f8 .LASF178
     /tmp/ccwb65mv.s:5000   .debug_str:0000000000000d1d .LASF179
     /tmp/ccwb65mv.s:4712   .debug_str:00000000000003ac .LASF180
     /tmp/ccwb65mv.s:4666   .debug_str:000000000000026f .LASF181
     /tmp/ccwb65mv.s:4926   .debug_str:0000000000000acd .LASF182
     /tmp/ccwb65mv.s:4854   .debug_str:00000000000007ce .LASF183
     /tmp/ccwb65mv.s:4776   .debug_str:0000000000000558 .LASF184
     /tmp/ccwb65mv.s:4796   .debug_str:0000000000000619 .LASF185
     /tmp/ccwb65mv.s:4620   .debug_str:0000000000000125 .LASF186
     /tmp/ccwb65mv.s:4788   .debug_str:00000000000005b8 .LASF187
     /tmp/ccwb65mv.s:508    .text:00000000000002c8 .LFB62
     /tmp/ccwb65mv.s:787    .text:000000000000044c .LFE62
     /tmp/ccwb65mv.s:4978   .debug_str:0000000000000c72 .LASF190
     /tmp/ccwb65mv.s:4117   .debug_loc:0000000000000000 .LLST24
     /tmp/ccwb65mv.s:4614   .debug_str:0000000000000106 .LASF188
     /tmp/ccwb65mv.s:4139   .debug_loc:000000000000005f .LLST25
     /tmp/ccwb65mv.s:5004   .debug_str:0000000000000d44 .LASF189
     /tmp/ccwb65mv.s:4188   .debug_loc:0000000000000142 .LLST26
     /tmp/ccwb65mv.s:540    .text:0000000000000304 .LBB62
     /tmp/ccwb65mv.s:545    .text:0000000000000304 .LBE62
     /tmp/ccwb65mv.s:557    .text:000000000000031c .LBB64
     /tmp/ccwb65mv.s:566    .text:0000000000000328 .LBE64
     /tmp/ccwb65mv.s:4225   .debug_loc:00000000000001ed .LLST27
     /tmp/ccwb65mv.s:4233   .debug_loc:0000000000000211 .LLST28
     /tmp/ccwb65mv.s:578    .text:0000000000000338 .LBB66
     /tmp/ccwb65mv.s:587    .text:0000000000000344 .LBE66
     /tmp/ccwb65mv.s:607    .text:0000000000000358 .LBB68
     /tmp/ccwb65mv.s:615    .text:0000000000000364 .LBE68
     /tmp/ccwb65mv.s:641    .text:0000000000000384 .LBB70
     /tmp/ccwb65mv.s:648    .text:0000000000000390 .LBE70
     /tmp/ccwb65mv.s:691    .text:00000000000003c8 .LBB72
     /tmp/ccwb65mv.s:702    .text:00000000000003d8 .LBE72
GAS LISTING /tmp/ccwb65mv.s 			page 36


     /tmp/ccwb65mv.s:4240   .debug_loc:0000000000000234 .LLST29
     /tmp/ccwb65mv.s:704    .text:00000000000003d8 .LBB74
     /tmp/ccwb65mv.s:715    .text:00000000000003e8 .LBE74
     /tmp/ccwb65mv.s:4247   .debug_loc:0000000000000257 .LLST30
     /tmp/ccwb65mv.s:721    .text:00000000000003ec .LBB76
     /tmp/ccwb65mv.s:725    .text:00000000000003ec .LBE76
     /tmp/ccwb65mv.s:775    .text:000000000000043c .LBB78
     /tmp/ccwb65mv.s:785    .text:000000000000044c .LBE78
     /tmp/ccwb65mv.s:550    .text:0000000000000314 .LVL46
     /tmp/ccwb65mv.s:669    .text:00000000000003b0 .LVL60
     /tmp/ccwb65mv.s:730    .text:00000000000003fc .LVL67
     /tmp/ccwb65mv.s:437    .text:0000000000000278 .LFB61
     /tmp/ccwb65mv.s:502    .text:00000000000002c8 .LFE61
     /tmp/ccwb65mv.s:4254   .debug_loc:000000000000027a .LLST19
     /tmp/ccwb65mv.s:466    .text:0000000000000298 .LBB59
     /tmp/ccwb65mv.s:485    .text:00000000000002b0 .LBE59
     /tmp/ccwb65mv.s:4272   .debug_loc:00000000000002c6 .LLST21
     /tmp/ccwb65mv.s:473    .text:00000000000002a4 .LBB60
     /tmp/ccwb65mv.s:480    .text:00000000000002a8 .LBE60
     /tmp/ccwb65mv.s:4279   .debug_loc:00000000000002e9 .LLST22
     /tmp/ccwb65mv.s:4287   .debug_loc:000000000000030d .LLST23
     /tmp/ccwb65mv.s:471    .text:00000000000002a4 .LVL40
     /tmp/ccwb65mv.s:484    .text:00000000000002b0 .LVL42
     /tmp/ccwb65mv.s:456    .text:0000000000000290 .LBB57
     /tmp/ccwb65mv.s:463    .text:0000000000000294 .LBE57
     /tmp/ccwb65mv.s:4294   .debug_loc:0000000000000330 .LLST20
     /tmp/ccwb65mv.s:375    .text:0000000000000224 .LFB60
     /tmp/ccwb65mv.s:431    .text:0000000000000278 .LFE60
     /tmp/ccwb65mv.s:4303   .debug_loc:0000000000000356 .LLST16
     /tmp/ccwb65mv.s:404    .text:0000000000000254 .LBB55
     /tmp/ccwb65mv.s:411    .text:0000000000000258 .LBE55
     /tmp/ccwb65mv.s:4326   .debug_loc:00000000000003b7 .LLST17
     /tmp/ccwb65mv.s:4333   .debug_loc:00000000000003da .LLST18
     /tmp/ccwb65mv.s:417    .text:0000000000000264 .LVL35
     /tmp/ccwb65mv.s:343    .text:00000000000001fc .LFB59
     /tmp/ccwb65mv.s:369    .text:0000000000000224 .LFE59
     /tmp/ccwb65mv.s:4340   .debug_loc:00000000000003fd .LLST15
     /tmp/ccwb65mv.s:358    .text:0000000000000214 .LVL30
     /tmp/ccwb65mv.s:187    .text:0000000000000118 .LFB58
     /tmp/ccwb65mv.s:213    .text:0000000000000140 .LFE58
     /tmp/ccwb65mv.s:4660   .debug_str:0000000000000242 .LASF191
     /tmp/ccwb65mv.s:4354   .debug_loc:0000000000000436 .LLST3
     /tmp/ccwb65mv.s:202    .text:0000000000000130 .LVL14
     /tmp/ccwb65mv.s:10     .text:0000000000000000 .LFB57
     /tmp/ccwb65mv.s:48     .text:0000000000000044 .LFE57
     /tmp/ccwb65mv.s:25     .text:0000000000000018 .LVL0
     /tmp/ccwb65mv.s:37     .text:0000000000000034 .LVL2
     /tmp/ccwb65mv.s:54     .text:0000000000000044 .LFB56
     /tmp/ccwb65mv.s:181    .text:0000000000000118 .LFE56
     /tmp/ccwb65mv.s:4368   .debug_loc:000000000000046f .LLST0
     /tmp/ccwb65mv.s:106    .text:00000000000000b8 .LBB43
     /tmp/ccwb65mv.s:122    .text:00000000000000c4 .LBE43
     /tmp/ccwb65mv.s:4375   .debug_loc:0000000000000492 .LLST1
     /tmp/ccwb65mv.s:146    .text:00000000000000ec .LBB45
     /tmp/ccwb65mv.s:159    .text:00000000000000f4 .LBE45
     /tmp/ccwb65mv.s:4384   .debug_loc:00000000000004b8 .LLST2
     /tmp/ccwb65mv.s:84     .text:000000000000007c .LVL4
GAS LISTING /tmp/ccwb65mv.s 			page 37


     /tmp/ccwb65mv.s:127    .text:00000000000000d0 .LVL7
     /tmp/ccwb65mv.s:137    .text:00000000000000e4 .LVL8
     /tmp/ccwb65mv.s:166    .text:0000000000000104 .LVL11
     /tmp/ccwb65mv.s:219    .text:0000000000000140 .LFB55
     /tmp/ccwb65mv.s:337    .text:00000000000001fc .LFE55
     /tmp/ccwb65mv.s:4830   .debug_str:000000000000072a .LASF192
     /tmp/ccwb65mv.s:4393   .debug_loc:00000000000004de .LLST4
     /tmp/ccwb65mv.s:4413   .debug_loc:000000000000053b .LLST5
     /tmp/ccwb65mv.s:4433   .debug_loc:0000000000000598 .LLST6
     /tmp/ccwb65mv.s:4882   .debug_str:00000000000008d6 .LASF193
     /tmp/ccwb65mv.s:4458   .debug_loc:0000000000000609 .LLST7
     /tmp/ccwb65mv.s:246    .text:0000000000000174 .LBB47
     /tmp/ccwb65mv.s:4564   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccwb65mv.s:4465   .debug_loc:000000000000062c .LLST8
     /tmp/ccwb65mv.s:4486   .debug_loc:000000000000068a .LLST9
     /tmp/ccwb65mv.s:4497   .debug_loc:00000000000006c0 .LLST10
     /tmp/ccwb65mv.s:4508   .debug_loc:00000000000006f6 .LLST11
     /tmp/ccwb65mv.s:259    .text:0000000000000194 .LBB49
     /tmp/ccwb65mv.s:267    .text:000000000000019c .LBE49
     /tmp/ccwb65mv.s:4519   .debug_loc:000000000000072c .LLST12
     /tmp/ccwb65mv.s:4528   .debug_loc:0000000000000752 .LLST13
     /tmp/ccwb65mv.s:4539   .debug_loc:0000000000000788 .LLST14
     /tmp/ccwb65mv.s:245    .text:0000000000000174 .LVL17
     /tmp/ccwb65mv.s:4704   .debug_str:0000000000000388 .LASF194
     /tmp/ccwb65mv.s:4956   .debug_str:0000000000000bbd .LASF195
     /tmp/ccwb65mv.s:4838   .debug_str:0000000000000764 .LASF196
     /tmp/ccwb65mv.s:4622   .debug_str:0000000000000136 .LASF197
     /tmp/ccwb65mv.s:4786   .debug_str:00000000000005a2 .LASF198
     /tmp/ccwb65mv.s:4886   .debug_str:00000000000008ed .LASF199
     /tmp/ccwb65mv.s:4824   .debug_str:0000000000000713 .LASF212
     /tmp/ccwb65mv.s:4858   .debug_str:0000000000000807 .LASF200
     /tmp/ccwb65mv.s:4734   .debug_str:0000000000000450 .LASF202
     /tmp/ccwb65mv.s:4724   .debug_str:0000000000000409 .LASF201
     /tmp/ccwb65mv.s:4650   .debug_str:00000000000001e8 .LASF203
     /tmp/ccwb65mv.s:4686   .debug_str:00000000000002ea .LASF204
     /tmp/ccwb65mv.s:4784   .debug_str:0000000000000596 .LASF205
     /tmp/ccwb65mv.s:511    .text:00000000000002c8 .LVL44
     /tmp/ccwb65mv.s:539    .text:0000000000000304 .LVL45
     /tmp/ccwb65mv.s:680    .text:00000000000003bc .LVL61
     /tmp/ccwb65mv.s:684    .text:00000000000003c4 .LVL62
     /tmp/ccwb65mv.s:577    .text:0000000000000338 .LVL49
     /tmp/ccwb65mv.s:590    .text:0000000000000348 .LVL51
     /tmp/ccwb65mv.s:595    .text:000000000000034c .LVL52
     /tmp/ccwb65mv.s:600    .text:0000000000000354 .LVL53
     /tmp/ccwb65mv.s:603    .text:0000000000000358 .LVL54
     /tmp/ccwb65mv.s:618    .text:0000000000000368 .LVL56
     /tmp/ccwb65mv.s:623    .text:000000000000036c .LVL57
     /tmp/ccwb65mv.s:628    .text:0000000000000374 .LVL58
     /tmp/ccwb65mv.s:656    .text:0000000000000398 .LVL59
     /tmp/ccwb65mv.s:712    .text:00000000000003e8 .LVL65
     /tmp/ccwb65mv.s:737    .text:0000000000000408 .LVL68
     /tmp/ccwb65mv.s:746    .text:0000000000000414 .LVL69
     /tmp/ccwb65mv.s:769    .text:0000000000000438 .LVL70
     /tmp/ccwb65mv.s:780    .text:0000000000000444 .LVL72
     /tmp/ccwb65mv.s:585    .text:0000000000000344 .LVL50
     /tmp/ccwb65mv.s:613    .text:0000000000000364 .LVL55
     /tmp/ccwb65mv.s:556    .text:000000000000031c .LVL47
GAS LISTING /tmp/ccwb65mv.s 			page 38


     /tmp/ccwb65mv.s:564    .text:0000000000000328 .LVL48
     /tmp/ccwb65mv.s:690    .text:00000000000003c8 .LVL63
     /tmp/ccwb65mv.s:699    .text:00000000000003d8 .LVL64
     /tmp/ccwb65mv.s:440    .text:0000000000000278 .LVL37
     /tmp/ccwb65mv.s:452    .text:0000000000000290 .LVL38
     /tmp/ccwb65mv.s:497    .text:00000000000002c0 .LVL43
     /tmp/ccwb65mv.s:478    .text:00000000000002a8 .LVL41
     /tmp/ccwb65mv.s:461    .text:0000000000000294 .LVL39
     /tmp/ccwb65mv.s:378    .text:0000000000000224 .LVL31
     /tmp/ccwb65mv.s:415    .text:000000000000025c .LVL34
     /tmp/ccwb65mv.s:427    .text:0000000000000274 .LVL36
     /tmp/ccwb65mv.s:403    .text:0000000000000254 .LVL32
     /tmp/ccwb65mv.s:409    .text:0000000000000258 .LVL33
     /tmp/ccwb65mv.s:346    .text:00000000000001fc .LVL29
     /tmp/ccwb65mv.s:190    .text:0000000000000118 .LVL13
     /tmp/ccwb65mv.s:70     .text:0000000000000060 .LVL3
     /tmp/ccwb65mv.s:176    .text:0000000000000110 .LVL12
     /tmp/ccwb65mv.s:105    .text:00000000000000b8 .LVL5
     /tmp/ccwb65mv.s:119    .text:00000000000000c4 .LVL6
     /tmp/ccwb65mv.s:145    .text:00000000000000ec .LVL9
     /tmp/ccwb65mv.s:155    .text:00000000000000f4 .LVL10
     /tmp/ccwb65mv.s:222    .text:0000000000000140 .LVL15
     /tmp/ccwb65mv.s:243    .text:000000000000016c .LVL16
     /tmp/ccwb65mv.s:311    .text:00000000000001e0 .LVL24
     /tmp/ccwb65mv.s:318    .text:00000000000001ec .LVL26
     /tmp/ccwb65mv.s:314    .text:00000000000001e4 .LVL25
     /tmp/ccwb65mv.s:286    .text:00000000000001c8 .LVL21
     /tmp/ccwb65mv.s:331    .text:00000000000001f8 .LVL28
     /tmp/ccwb65mv.s:294    .text:00000000000001d0 .LVL22
     /tmp/ccwb65mv.s:258    .text:0000000000000194 .LVL18
     /tmp/ccwb65mv.s:265    .text:000000000000019c .LVL19
     /tmp/ccwb65mv.s:279    .text:00000000000001bc .LVL20
     /tmp/ccwb65mv.s:327    .text:00000000000001f4 .LVL27
     /tmp/ccwb65mv.s:308    .text:00000000000001dc .LVL23
     /tmp/ccwb65mv.s:807    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccwb65mv.s:297    .text:00000000000001d0 .LBE47
     /tmp/ccwb65mv.s:321    .text:00000000000001ec .LBB54
     /tmp/ccwb65mv.s:335    .text:00000000000001fc .LBE54
     /tmp/ccwb65mv.s:272    .text:00000000000001a8 .LBB51
     /tmp/ccwb65mv.s:295    .text:00000000000001d0 .LBE51
     /tmp/ccwb65mv.s:323    .text:00000000000001ec .LBB52
     /tmp/ccwb65mv.s:333    .text:00000000000001fc .LBE52

UNDEFINED SYMBOLS
_ZN5Riscv19returnFromInterruptEv
_Z11thread_exitv
_ZN9Scheduler3getEv
main
_Z22kernelConsumerFunctionPv
_Z4idlePv
_ZN9Scheduler3putEP3TCB
_ZdlPv
_ZN3TCB13contextSwitchEPNS_7ContextES1_
_Z9mem_allocm
_Z8mem_freePv
_ZN11ThreadQueue7putLastEP3TCB
_ZN11ThreadQueue8getFirstEv
GAS LISTING /tmp/ccwb65mv.s 			page 39


_ZN11ThreadQueue6removeEP3TCB
_ZN9Scheduler12sleepingHeadE
_ZN9Scheduler4headE
_ZN9Scheduler4tailE
