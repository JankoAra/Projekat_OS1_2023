GAS LISTING /tmp/ccxK8XHR.s 			page 1


   1              		.file	"TCB.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN3TCB7wrapperEv
   9              	_ZN3TCB7wrapperEv:
  10              	.LFB33:
  11              		.file 1 "src/TCB.cpp"
   1:src/TCB.cpp   **** //
   2:src/TCB.cpp   **** // Created by os on 5/23/23.
   3:src/TCB.cpp   **** //
   4:src/TCB.cpp   **** 
   5:src/TCB.cpp   **** #include "../h/TCB.hpp"
   6:src/TCB.cpp   **** #include "../h/Riscv.hpp"
   7:src/TCB.cpp   **** #include "../h/Scheduler.hpp"
   8:src/TCB.cpp   **** #include "../h/MemoryAllocator.hpp"
   9:src/TCB.cpp   **** #include "../h/syscall_c.hpp"
  10:src/TCB.cpp   **** 
  11:src/TCB.cpp   **** TCB* TCB::running = nullptr;
  12:src/TCB.cpp   **** uint64 TCB::runningTimeSlice = 0;
  13:src/TCB.cpp   **** 
  14:src/TCB.cpp   **** TCB* TCB::createThread(TCB::Body function, void* args, uint64* stack) {
  15:src/TCB.cpp   **** 	//pravljenje niti
  16:src/TCB.cpp   **** 	TCB* newThread = new TCB(function, args, stack);
  17:src/TCB.cpp   **** 
  18:src/TCB.cpp   **** 	//startovanje niti(stavljanje u Scheduler); main nit je vec aktivna, ne stavlja se u Scheduler
  19:src/TCB.cpp   **** 	if (function != nullptr) Scheduler::put(newThread);
  20:src/TCB.cpp   **** 	return newThread;
  21:src/TCB.cpp   **** }
  22:src/TCB.cpp   **** 
  23:src/TCB.cpp   **** void TCB::dispatch() {
  24:src/TCB.cpp   **** 	TCB* old = TCB::running;
  25:src/TCB.cpp   **** 	if (!old->finished && !old->blocked) {
  26:src/TCB.cpp   **** 		Scheduler::put(old);
  27:src/TCB.cpp   **** 	}
  28:src/TCB.cpp   **** 	TCB::running = Scheduler::get();
  29:src/TCB.cpp   **** 	TCB::runningTimeSlice = 0;
  30:src/TCB.cpp   **** 
  31:src/TCB.cpp   **** 	//sada biramo u kom rezimu ce se izvrsavati nit, upisom bita SSTATUS_SPP
  32:src/TCB.cpp   **** 	//ako treba da se izvrsava main kernel nit, povratak je u sistemski rezim, inace u korisnicki
  33:src/TCB.cpp   **** 	if (TCB::running->threadFunction == nullptr) {
  34:src/TCB.cpp   **** 		Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  35:src/TCB.cpp   **** 	} else {
  36:src/TCB.cpp   **** 		Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
  37:src/TCB.cpp   **** 	}
  38:src/TCB.cpp   **** 
  39:src/TCB.cpp   **** 	if (old != TCB::running) TCB::contextSwitch(&old->context, &running->context);
  40:src/TCB.cpp   **** }
  41:src/TCB.cpp   **** 
  42:src/TCB.cpp   **** void TCB::yield() {
  43:src/TCB.cpp   **** 	Riscv::pushRegisters();
  44:src/TCB.cpp   **** 	TCB::dispatch();
  45:src/TCB.cpp   **** 	Riscv::popRegisters();
  46:src/TCB.cpp   **** }
  47:src/TCB.cpp   **** 
GAS LISTING /tmp/ccxK8XHR.s 			page 2


  48:src/TCB.cpp   **** void TCB::wrapper() {
  12              		.loc 1 48 21
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  49:src/TCB.cpp   **** 	//pocetak wrappera se izvrsava u supervisor modu,
  50:src/TCB.cpp   **** 	//jer nismo izasli iz prekidne rutine prilikom promene konteksta (dispatch/yield)
  51:src/TCB.cpp   **** 	Riscv::popSppSpie();
  22              		.loc 1 51 2
  23              		.loc 1 51 19 is_stmt 0
  24 0010 97000000 		call	_ZN5Riscv10popSppSpieEv@plt
  24      E7800000 
  25              	.LVL0:
  52:src/TCB.cpp   **** 	//na dalje se izvrsavamo u user modu
  53:src/TCB.cpp   **** 	running->threadFunction(running->args);
  26              		.loc 1 53 2 is_stmt 1
  27              		.loc 1 53 11 is_stmt 0
  28 0018 97070000 		ld	a5,.LANCHOR0
  28      83B70700 
  29 0020 03B70701 		ld	a4,16(a5)
  30              		.loc 1 53 25
  31 0024 03B50702 		ld	a0,32(a5)
  32 0028 E7000700 		jalr	a4
  33              	.LVL1:
  54:src/TCB.cpp   **** 	//running->finished = true;
  55:src/TCB.cpp   **** 	//i dalje smo u user modu, moramo promenu niti vrsiti sistemskim pozivom
  56:src/TCB.cpp   **** 	thread_exit();
  34              		.loc 1 56 2 is_stmt 1
  35              		.loc 1 56 13 is_stmt 0
  36 002c 97000000 		call	_Z11thread_exitv@plt
  36      E7800000 
  37              	.LVL2:
  57:src/TCB.cpp   **** }
  38              		.loc 1 57 1
  39 0034 83308100 		ld	ra,8(sp)
  40              		.cfi_restore 1
  41 0038 03340100 		ld	s0,0(sp)
  42              		.cfi_restore 8
  43              		.cfi_def_cfa 2, 16
  44 003c 13010101 		addi	sp,sp,16
  45              		.cfi_def_cfa_offset 0
  46 0040 67800000 		jr	ra
  47              		.cfi_endproc
  48              	.LFE33:
  50              		.align	2
  51              		.globl	_ZN3TCB8dispatchEv
  53              	_ZN3TCB8dispatchEv:
  54              	.LFB31:
  23:src/TCB.cpp   **** 	TCB* old = TCB::running;
  55              		.loc 1 23 22 is_stmt 1
  56              		.cfi_startproc
GAS LISTING /tmp/ccxK8XHR.s 			page 3


  57 0044 130101FE 		addi	sp,sp,-32
  58              		.cfi_def_cfa_offset 32
  59 0048 233C1100 		sd	ra,24(sp)
  60 004c 23388100 		sd	s0,16(sp)
  61 0050 23349100 		sd	s1,8(sp)
  62              		.cfi_offset 1, -8
  63              		.cfi_offset 8, -16
  64              		.cfi_offset 9, -24
  65 0054 13040102 		addi	s0,sp,32
  66              		.cfi_def_cfa 8, 0
  24:src/TCB.cpp   **** 	if (!old->finished && !old->blocked) {
  67              		.loc 1 24 2
  24:src/TCB.cpp   **** 	if (!old->finished && !old->blocked) {
  68              		.loc 1 24 7 is_stmt 0
  69 0058 97040000 		ld	s1,.LANCHOR0
  69      83B40400 
  70              	.LVL3:
  25:src/TCB.cpp   **** 		Scheduler::put(old);
  71              		.loc 1 25 2 is_stmt 1
  25:src/TCB.cpp   **** 		Scheduler::put(old);
  72              		.loc 1 25 12 is_stmt 0
  73 0060 83C70403 		lbu	a5,48(s1)
  25:src/TCB.cpp   **** 		Scheduler::put(old);
  74              		.loc 1 25 2
  75 0064 63960700 		bnez	a5,.L4
  25:src/TCB.cpp   **** 		Scheduler::put(old);
  76              		.loc 1 25 30 discriminator 1
  77 0068 83C71403 		lbu	a5,49(s1)
  25:src/TCB.cpp   **** 		Scheduler::put(old);
  78              		.loc 1 25 21 discriminator 1
  79 006c 638A0704 		beqz	a5,.L9
  80              	.L4:
  28:src/TCB.cpp   **** 	TCB::runningTimeSlice = 0;
  81              		.loc 1 28 2 is_stmt 1
  28:src/TCB.cpp   **** 	TCB::runningTimeSlice = 0;
  82              		.loc 1 28 31 is_stmt 0
  83 0070 97000000 		call	_ZN9Scheduler3getEv@plt
  83      E7800000 
  84              	.LVL4:
  85 0078 93050500 		mv	a1,a0
  28:src/TCB.cpp   **** 	TCB::runningTimeSlice = 0;
  86              		.loc 1 28 15
  87 007c 97070000 		lla	a5,.LANCHOR0
  87      93870700 
  88 0084 23B0A700 		sd	a0,0(a5)
  29:src/TCB.cpp   **** 
  89              		.loc 1 29 2 is_stmt 1
  29:src/TCB.cpp   **** 
  90              		.loc 1 29 24 is_stmt 0
  91 0088 23B40700 		sd	zero,8(a5)
  33:src/TCB.cpp   **** 		Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  92              		.loc 1 33 2 is_stmt 1
  33:src/TCB.cpp   **** 		Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  93              		.loc 1 33 20 is_stmt 0
  94 008c 83370501 		ld	a5,16(a0)
  33:src/TCB.cpp   **** 		Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  95              		.loc 1 33 2
GAS LISTING /tmp/ccxK8XHR.s 			page 4


  96 0090 63800704 		beqz	a5,.L10
  36:src/TCB.cpp   **** 	}
  97              		.loc 1 36 3 is_stmt 1
  98              	.LVL5:
  99              	.LBB10:
 100              	.LBB11:
 101              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	static void popSppSpie();
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp **** 	//stavljanje registara x3-x31 na stek
  16:src/../h/Riscv.hpp **** 	static void pushRegisters();    //implementacija u asm
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp **** 	//skidanje registara x3-x31 sa steka
  19:src/../h/Riscv.hpp **** 	static void popRegisters();     //implementacija u asm
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp **** 	//read scause
  22:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp **** 	//write scause
  25:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp **** 	//read sepc
  28:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp **** 	//write sepc
  31:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp **** 	//read stvec
  34:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  35:src/../h/Riscv.hpp **** 
  36:src/../h/Riscv.hpp **** 	//write stvec
  37:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  38:src/../h/Riscv.hpp **** 
  39:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  40:src/../h/Riscv.hpp **** 		//postoji zahtev za softverski prekid
  41:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),
  42:src/../h/Riscv.hpp **** 		//postoji prekid od tajmera
  43:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),
  44:src/../h/Riscv.hpp **** 		//postoji zahtev za spoljasnji hardverski prekid
  45:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)
  46:src/../h/Riscv.hpp **** 	};
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp **** 	//mask set sip
  49:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  50:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccxK8XHR.s 			page 5


  51:src/../h/Riscv.hpp **** 	//mask clear sip
  52:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp **** 	//read sip
  55:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  56:src/../h/Riscv.hpp **** 
  57:src/../h/Riscv.hpp **** 	//write sip
  58:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  59:src/../h/Riscv.hpp **** 
  60:src/../h/Riscv.hpp **** 	//kada se pozove sret, SIE dobija vrednost SPIE, SPIE se postavlja na 1,
  61:src/../h/Riscv.hpp **** 	//rezim se postavlja na osnovu SPP bita, SPP se postavlja na 0
  62:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  63:src/../h/Riscv.hpp **** 		//1 - dozvoljeni prekidi; 0- nedozvoljeni prekidi; igonrise se u korisnickom rezimu
  64:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  65:src/../h/Riscv.hpp **** 		//prethodna vrednost bita SIE
  66:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  67:src/../h/Riscv.hpp **** 		//iz kog rezima se desio skok; 0 - iz korisnickog; 1 - iz sistemskog
  68:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  69:src/../h/Riscv.hpp **** 	};
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp **** 	//mask set sstatus
  72:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp **** 	//mask clear sstatus
  75:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp **** 	//read sstatus
  78:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp **** 	//write sstatus
  81:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  84:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  85:src/../h/Riscv.hpp **** 
  86:src/../h/Riscv.hpp **** };
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  89:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  90:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  91:src/../h/Riscv.hpp **** 	return scause;
  92:src/../h/Riscv.hpp **** }
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  95:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  99:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
 100:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
 101:src/../h/Riscv.hpp **** 	return sepc;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
 105:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccxK8XHR.s 			page 6


 108:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 109:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 110:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 111:src/../h/Riscv.hpp **** 	return stvec;
 112:src/../h/Riscv.hpp **** }
 113:src/../h/Riscv.hpp **** 
 114:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 115:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 116:src/../h/Riscv.hpp **** }
 117:src/../h/Riscv.hpp **** 
 118:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 119:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 120:src/../h/Riscv.hpp **** }
 121:src/../h/Riscv.hpp **** 
 122:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 123:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 124:src/../h/Riscv.hpp **** }
 125:src/../h/Riscv.hpp **** 
 126:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 127:src/../h/Riscv.hpp **** 	uint64 volatile sip;
 128:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sip], sip": [sip] "=r"(sip));
 129:src/../h/Riscv.hpp **** 	return sip;
 130:src/../h/Riscv.hpp **** }
 131:src/../h/Riscv.hpp **** 
 132:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 133:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sip, %[sip]": :[sip] "r"(sip));
 134:src/../h/Riscv.hpp **** }
 135:src/../h/Riscv.hpp **** 
 136:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 137:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sstatus, %[mask]": :[mask] "r"(mask));
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 141:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sstatus, %[mask]": :[mask] "r"(mask));
 102              		.loc 2 141 2
 103              		.loc 2 141 62 is_stmt 0
 104 0094 93070010 		li	a5,256
 105              	#APP
 106              	# 141 "src/../h/Riscv.hpp" 1
 142              	}
 107              		csrc sstatus, a5
 108              	# 0 "" 2
 109              	.LVL6:
 110              	#NO_APP
 111              	.L6:
 112              	.LBE11:
 113              	.LBE10:
  39:src/TCB.cpp   **** }
 114              		.loc 1 39 2 is_stmt 1
 115 009c 6388B400 		beq	s1,a1,.L3
  39:src/TCB.cpp   **** }
 116              		.loc 1 39 27 discriminator 1
  39:src/TCB.cpp   **** }
 117              		.loc 1 39 45 is_stmt 0 discriminator 1
 118 00a0 13850400 		mv	a0,s1
 119 00a4 97000000 		call	_ZN3TCB13contextSwitchEPNS_7ContextES1_@plt
 119      E7800000 
GAS LISTING /tmp/ccxK8XHR.s 			page 7


 120              	.LVL7:
 121              	.L3:
  40:src/TCB.cpp   **** 
 122              		.loc 1 40 1
 123 00ac 83308101 		ld	ra,24(sp)
 124              		.cfi_remember_state
 125              		.cfi_restore 1
 126 00b0 03340101 		ld	s0,16(sp)
 127              		.cfi_restore 8
 128              		.cfi_def_cfa 2, 32
 129 00b4 83348100 		ld	s1,8(sp)
 130              		.cfi_restore 9
 131              	.LVL8:
 132 00b8 13010102 		addi	sp,sp,32
 133              		.cfi_def_cfa_offset 0
 134 00bc 67800000 		jr	ra
 135              	.LVL9:
 136              	.L9:
 137              		.cfi_restore_state
  26:src/TCB.cpp   **** 	}
 138              		.loc 1 26 3 is_stmt 1
  26:src/TCB.cpp   **** 	}
 139              		.loc 1 26 17 is_stmt 0
 140 00c0 13850400 		mv	a0,s1
 141 00c4 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 141      E7800000 
 142              	.LVL10:
 143 00cc 6FF05FFA 		j	.L4
 144              	.L10:
  34:src/TCB.cpp   **** 	} else {
 145              		.loc 1 34 3 is_stmt 1
 146              	.LVL11:
 147              	.LBB12:
 148              	.LBB13:
 137:src/../h/Riscv.hpp **** }
 149              		.loc 2 137 2
 137:src/../h/Riscv.hpp **** }
 150              		.loc 2 137 62 is_stmt 0
 151 00d0 93070010 		li	a5,256
 152              	#APP
 153              	# 137 "src/../h/Riscv.hpp" 1
 138:src/../h/Riscv.hpp **** 
 154              		csrs sstatus, a5
 155              	# 0 "" 2
 156              		.loc 2 138 1
 157              	#NO_APP
 158 00d8 6FF05FFC 		j	.L6
 159              	.LBE13:
 160              	.LBE12:
 161              		.cfi_endproc
 162              	.LFE31:
 164              		.align	2
 165              		.globl	_ZN3TCB5yieldEv
 167              	_ZN3TCB5yieldEv:
 168              	.LFB32:
  42:src/TCB.cpp   **** 	Riscv::pushRegisters();
 169              		.loc 1 42 19 is_stmt 1
GAS LISTING /tmp/ccxK8XHR.s 			page 8


 170              		.cfi_startproc
 171 00dc 130101FF 		addi	sp,sp,-16
 172              		.cfi_def_cfa_offset 16
 173 00e0 23341100 		sd	ra,8(sp)
 174 00e4 23308100 		sd	s0,0(sp)
 175              		.cfi_offset 1, -8
 176              		.cfi_offset 8, -16
 177 00e8 13040101 		addi	s0,sp,16
 178              		.cfi_def_cfa 8, 0
  43:src/TCB.cpp   **** 	TCB::dispatch();
 179              		.loc 1 43 2
  43:src/TCB.cpp   **** 	TCB::dispatch();
 180              		.loc 1 43 22 is_stmt 0
 181 00ec 97000000 		call	_ZN5Riscv13pushRegistersEv@plt
 181      E7800000 
 182              	.LVL12:
  44:src/TCB.cpp   **** 	Riscv::popRegisters();
 183              		.loc 1 44 2 is_stmt 1
  44:src/TCB.cpp   **** 	Riscv::popRegisters();
 184              		.loc 1 44 15 is_stmt 0
 185 00f4 97000000 		call	_ZN3TCB8dispatchEv
 185      E7800000 
 186              	.LVL13:
  45:src/TCB.cpp   **** }
 187              		.loc 1 45 2 is_stmt 1
  45:src/TCB.cpp   **** }
 188              		.loc 1 45 21 is_stmt 0
 189 00fc 97000000 		call	_ZN5Riscv12popRegistersEv@plt
 189      E7800000 
 190              	.LVL14:
  46:src/TCB.cpp   **** 
 191              		.loc 1 46 1
 192 0104 83308100 		ld	ra,8(sp)
 193              		.cfi_restore 1
 194 0108 03340100 		ld	s0,0(sp)
 195              		.cfi_restore 8
 196              		.cfi_def_cfa 2, 16
 197 010c 13010101 		addi	sp,sp,16
 198              		.cfi_def_cfa_offset 0
 199 0110 67800000 		jr	ra
 200              		.cfi_endproc
 201              	.LFE32:
 203              		.align	2
 204              		.globl	_ZN3TCBnwEm
 206              	_ZN3TCBnwEm:
 207              	.LFB34:
  58:src/TCB.cpp   **** 
  59:src/TCB.cpp   **** void* TCB::operator new(size_t size) {
 208              		.loc 1 59 38 is_stmt 1
 209              		.cfi_startproc
 210              	.LVL15:
 211 0114 130101FF 		addi	sp,sp,-16
 212              		.cfi_def_cfa_offset 16
 213 0118 23341100 		sd	ra,8(sp)
 214 011c 23308100 		sd	s0,0(sp)
 215              		.cfi_offset 1, -8
 216              		.cfi_offset 8, -16
GAS LISTING /tmp/ccxK8XHR.s 			page 9


 217 0120 13040101 		addi	s0,sp,16
 218              		.cfi_def_cfa 8, 0
  60:src/TCB.cpp   **** 	return MemoryAllocator::kmalloc(size + sizeof(MemoryAllocator::UsedMemSegment));
 219              		.loc 1 60 2
 220              		.loc 1 60 33 is_stmt 0
 221 0124 13050501 		addi	a0,a0,16
 222              	.LVL16:
 223 0128 97000000 		call	_ZN15MemoryAllocator7kmallocEm@plt
 223      E7800000 
 224              	.LVL17:
  61:src/TCB.cpp   **** }
 225              		.loc 1 61 1
 226 0130 83308100 		ld	ra,8(sp)
 227              		.cfi_restore 1
 228 0134 03340100 		ld	s0,0(sp)
 229              		.cfi_restore 8
 230              		.cfi_def_cfa 2, 16
 231 0138 13010101 		addi	sp,sp,16
 232              		.cfi_def_cfa_offset 0
 233 013c 67800000 		jr	ra
 234              		.cfi_endproc
 235              	.LFE34:
 237              		.align	2
 238              		.globl	_ZN3TCB12createThreadEPFvPvES0_Pm
 240              	_ZN3TCB12createThreadEPFvPvES0_Pm:
 241              	.LFB30:
  14:src/TCB.cpp   **** 	//pravljenje niti
 242              		.loc 1 14 71 is_stmt 1
 243              		.cfi_startproc
 244              	.LVL18:
 245 0140 130101FD 		addi	sp,sp,-48
 246              		.cfi_def_cfa_offset 48
 247 0144 23341102 		sd	ra,40(sp)
 248 0148 23308102 		sd	s0,32(sp)
 249 014c 233C9100 		sd	s1,24(sp)
 250 0150 23382101 		sd	s2,16(sp)
 251 0154 23343101 		sd	s3,8(sp)
 252 0158 23304101 		sd	s4,0(sp)
 253              		.cfi_offset 1, -8
 254              		.cfi_offset 8, -16
 255              		.cfi_offset 9, -24
 256              		.cfi_offset 18, -32
 257              		.cfi_offset 19, -40
 258              		.cfi_offset 20, -48
 259 015c 13040103 		addi	s0,sp,48
 260              		.cfi_def_cfa 8, 0
 261 0160 93090500 		mv	s3,a0
 262 0164 138A0500 		mv	s4,a1
 263 0168 13090600 		mv	s2,a2
  16:src/TCB.cpp   **** 
 264              		.loc 1 16 2
  16:src/TCB.cpp   **** 
 265              		.loc 1 16 48 is_stmt 0
 266 016c 13050004 		li	a0,64
 267              	.LVL19:
 268 0170 97000000 		call	_ZN3TCBnwEm
 268      E7800000 
GAS LISTING /tmp/ccxK8XHR.s 			page 10


 269              	.LVL20:
 270 0178 93040500 		mv	s1,a0
 271              	.LVL21:
 272              	.LBB14:
 273              	.LBB15:
 274              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 5/23/23.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJEKAT2023_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJEKAT2023_TCB_HPP
   7:src/../h/TCB.hpp **** 
   8:src/../h/TCB.hpp **** #include "../lib/hw.h"
   9:src/../h/TCB.hpp **** 
  10:src/../h/TCB.hpp **** class TCB {
  11:src/../h/TCB.hpp **** public:
  12:src/../h/TCB.hpp **** 	friend class Scheduler;
  13:src/../h/TCB.hpp **** 	using Body = void (*)(void*);
  14:src/../h/TCB.hpp **** 
  15:src/../h/TCB.hpp **** 	static TCB* createThread(Body function, void* args, uint64* stack);
  16:src/../h/TCB.hpp **** 
  17:src/../h/TCB.hpp **** 	bool isFinished() { return finished; }
  18:src/../h/TCB.hpp **** 
  19:src/../h/TCB.hpp **** 	void setFinished(bool finish) { this->finished = finish; }
  20:src/../h/TCB.hpp **** 
  21:src/../h/TCB.hpp **** 	bool isBlocked() { return blocked; }
  22:src/../h/TCB.hpp **** 
  23:src/../h/TCB.hpp **** 	void setBlocked(bool block) { this->blocked = block; }
  24:src/../h/TCB.hpp **** 
  25:src/../h/TCB.hpp **** 	uint64 getTimeSlice() { return timeSlice; }
  26:src/../h/TCB.hpp **** 
  27:src/../h/TCB.hpp **** 	void setTimeSlice(uint64 value) { timeSlice = value; }
  28:src/../h/TCB.hpp **** 
  29:src/../h/TCB.hpp **** 	static void threadSleep(time_t sleepTime);
  30:src/../h/TCB.hpp **** 
  31:src/../h/TCB.hpp **** 	static void threadJoin(TCB* handle);
  32:src/../h/TCB.hpp **** 
  33:src/../h/TCB.hpp **** 	static void yield();
  34:src/../h/TCB.hpp **** 
  35:src/../h/TCB.hpp **** 	static void dispatch();
  36:src/../h/TCB.hpp **** 
  37:src/../h/TCB.hpp **** 	static void wrapper();
  38:src/../h/TCB.hpp **** 
  39:src/../h/TCB.hpp **** 	static TCB* running;
  40:src/../h/TCB.hpp **** 	static uint64 runningTimeSlice;
  41:src/../h/TCB.hpp **** 
  42:src/../h/TCB.hpp **** //	TCB* getNextInScheduler(){
  43:src/../h/TCB.hpp **** //		return nextInScheduler;
  44:src/../h/TCB.hpp **** //	}
  45:src/../h/TCB.hpp **** //	void setNextInScheduler(TCB* tcb){
  46:src/../h/TCB.hpp **** //		nextInScheduler = tcb;
  47:src/../h/TCB.hpp **** //	}
  48:src/../h/TCB.hpp **** 
  49:src/../h/TCB.hpp **** private:
  50:src/../h/TCB.hpp **** 	//kontekst procesora za datu nit
  51:src/../h/TCB.hpp **** 	struct Context {
GAS LISTING /tmp/ccxK8XHR.s 			page 11


  52:src/../h/TCB.hpp **** 		uint64 ra;
  53:src/../h/TCB.hpp **** 		uint64 sp;
  54:src/../h/TCB.hpp **** 	} context;
  55:src/../h/TCB.hpp **** 	Body threadFunction;    //funkcija koja se izvrsava
  56:src/../h/TCB.hpp **** 	uint64* stack;            //najniza adresa steka; stek raste ka nizim adresama, pokazuje na posled
  57:src/../h/TCB.hpp **** 	void* args;                //argumenti poziva funkcije
  58:src/../h/TCB.hpp **** 	uint64 timeSlice;        //vremenski odsecak dodeljen datoj niti
  59:src/../h/TCB.hpp **** 	bool finished;            //da li je nit zavrsila izvrsavanje funkcije
  60:src/../h/TCB.hpp **** 	bool blocked;            //da li je nit blokirana
  61:src/../h/TCB.hpp **** 	TCB* nextInScheduler;    // pokazivac na sledecu nit u Scheduler-u
  62:src/../h/TCB.hpp **** 
  63:src/../h/TCB.hpp **** 	TCB(Body function, void* args, uint64* stack) : threadFunction(function), stack(stack), args(args)
  64:src/../h/TCB.hpp **** 													timeSlice(DEFAULT_TIME_SLICE), finished(false), blocked(false),
  65:src/../h/TCB.hpp **** 													nextInScheduler(nullptr) {
 275              		.loc 3 65 37
 276 017c 23383501 		sd	s3,16(a0)
 277 0180 233C2501 		sd	s2,24(a0)
 278 0184 23304503 		sd	s4,32(a0)
 279 0188 93072000 		li	a5,2
 280 018c 2334F502 		sd	a5,40(a0)
 281 0190 23080502 		sb	zero,48(a0)
 282 0194 A3080502 		sb	zero,49(a0)
 283 0198 233C0502 		sd	zero,56(a0)
 284              	.LBB16:
  66:src/../h/TCB.hpp **** 		//formiranje pocetnog konteksta; specijalni uslovi za main funkciju kojoj se pocetni kontekst aut
  67:src/../h/TCB.hpp **** 		uint64 startRa = threadFunction != nullptr ? (uint64)&wrapper : 0;
 285              		.loc 3 67 3 is_stmt 1
 286              		.loc 3 67 46 is_stmt 0
 287 019c 638A0904 		beqz	s3,.L19
 288 01a0 97070000 		lla	a5,_ZN3TCB7wrapperEv
 288      93870700 
 289              	.L16:
 290              	.LVL22:
  68:src/../h/TCB.hpp **** 		uint64 startSp = stack != nullptr ? (uint64)&stack[DEFAULT_STACK_SIZE] : 0;
 291              		.loc 3 68 3 is_stmt 1
 292              		.loc 3 68 37 is_stmt 0
 293 01a8 63080904 		beqz	s2,.L20
 294              		.loc 3 68 47
 295 01ac 37860000 		li	a2,32768
 296 01b0 3309C900 		add	s2,s2,a2
 297              	.LVL23:
 298              	.L17:
  69:src/../h/TCB.hpp **** 		this->context.ra = startRa;
 299              		.loc 3 69 3 is_stmt 1
 300              		.loc 3 69 20 is_stmt 0
 301 01b4 23B0F400 		sd	a5,0(s1)
  70:src/../h/TCB.hpp **** 		this->context.sp = startSp;
 302              		.loc 3 70 3 is_stmt 1
 303              		.loc 3 70 20 is_stmt 0
 304 01b8 23B42401 		sd	s2,8(s1)
 305              	.LVL24:
 306              	.LBE16:
 307              	.LBE15:
 308              	.LBE14:
  19:src/TCB.cpp   **** 	return newThread;
 309              		.loc 1 19 2 is_stmt 1
 310 01bc 63880900 		beqz	s3,.L15
GAS LISTING /tmp/ccxK8XHR.s 			page 12


  19:src/TCB.cpp   **** 	return newThread;
 311              		.loc 1 19 27 discriminator 1
  19:src/TCB.cpp   **** 	return newThread;
 312              		.loc 1 19 41 is_stmt 0 discriminator 1
 313 01c0 13850400 		mv	a0,s1
 314 01c4 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 314      E7800000 
 315              	.LVL25:
  20:src/TCB.cpp   **** }
 316              		.loc 1 20 2 is_stmt 1 discriminator 1
 317              	.L15:
  21:src/TCB.cpp   **** 
 318              		.loc 1 21 1 is_stmt 0
 319 01cc 13850400 		mv	a0,s1
 320 01d0 83308102 		ld	ra,40(sp)
 321              		.cfi_remember_state
 322              		.cfi_restore 1
 323 01d4 03340102 		ld	s0,32(sp)
 324              		.cfi_restore 8
 325              		.cfi_def_cfa 2, 48
 326 01d8 83348101 		ld	s1,24(sp)
 327              		.cfi_restore 9
 328              	.LVL26:
 329 01dc 03390101 		ld	s2,16(sp)
 330              		.cfi_restore 18
 331              	.LVL27:
 332 01e0 83398100 		ld	s3,8(sp)
 333              		.cfi_restore 19
 334              	.LVL28:
 335 01e4 033A0100 		ld	s4,0(sp)
 336              		.cfi_restore 20
 337              	.LVL29:
 338 01e8 13010103 		addi	sp,sp,48
 339              		.cfi_def_cfa_offset 0
 340 01ec 67800000 		jr	ra
 341              	.LVL30:
 342              	.L19:
 343              		.cfi_restore_state
 344              	.LBB19:
 345              	.LBB18:
 346              	.LBB17:
  67:src/../h/TCB.hpp **** 		uint64 startSp = stack != nullptr ? (uint64)&stack[DEFAULT_STACK_SIZE] : 0;
 347              		.loc 3 67 46
 348 01f0 93070000 		li	a5,0
 349 01f4 6FF05FFB 		j	.L16
 350              	.LVL31:
 351              	.L20:
  68:src/../h/TCB.hpp **** 		this->context.ra = startRa;
 352              		.loc 3 68 37
 353 01f8 13090000 		li	s2,0
 354              	.LVL32:
 355 01fc 6FF09FFB 		j	.L17
 356              	.LBE17:
 357              	.LBE18:
 358              	.LBE19:
 359              		.cfi_endproc
 360              	.LFE30:
GAS LISTING /tmp/ccxK8XHR.s 			page 13


 362              		.align	2
 363              		.globl	_ZN3TCBdlEPv
 365              	_ZN3TCBdlEPv:
 366              	.LFB35:
  62:src/TCB.cpp   **** 
  63:src/TCB.cpp   **** void TCB::operator delete(void* ptr) {
 367              		.loc 1 63 38 is_stmt 1
 368              		.cfi_startproc
 369              	.LVL33:
 370 0200 130101FF 		addi	sp,sp,-16
 371              		.cfi_def_cfa_offset 16
 372 0204 23341100 		sd	ra,8(sp)
 373 0208 23308100 		sd	s0,0(sp)
 374              		.cfi_offset 1, -8
 375              		.cfi_offset 8, -16
 376 020c 13040101 		addi	s0,sp,16
 377              		.cfi_def_cfa 8, 0
  64:src/TCB.cpp   **** 	MemoryAllocator::kfree(ptr);
 378              		.loc 1 64 2
 379              		.loc 1 64 24 is_stmt 0
 380 0210 97000000 		call	_ZN15MemoryAllocator5kfreeEPv@plt
 380      E7800000 
 381              	.LVL34:
  65:src/TCB.cpp   **** }
 382              		.loc 1 65 1
 383 0218 83308100 		ld	ra,8(sp)
 384              		.cfi_restore 1
 385 021c 03340100 		ld	s0,0(sp)
 386              		.cfi_restore 8
 387              		.cfi_def_cfa 2, 16
 388 0220 13010101 		addi	sp,sp,16
 389              		.cfi_def_cfa_offset 0
 390 0224 67800000 		jr	ra
 391              		.cfi_endproc
 392              	.LFE35:
 394              		.globl	_ZN3TCB16runningTimeSliceE
 395              		.globl	_ZN3TCB7runningE
 396              		.bss
 397              		.align	3
 398              		.set	.LANCHOR0,. + 0
 401              	_ZN3TCB7runningE:
 402 0000 00000000 		.zero	8
 402      00000000 
 405              	_ZN3TCB16runningTimeSliceE:
 406 0008 00000000 		.zero	8
 406      00000000 
 407              		.text
 408              	.Letext0:
 409              		.file 4 "src/../h/../lib/hw.h"
 410              		.file 5 "src/../h/Scheduler.hpp"
 411              		.file 6 "src/../h/MemoryAllocator.hpp"
 412              		.file 7 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/ccxK8XHR.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 TCB.cpp
     /tmp/ccxK8XHR.s:9      .text:0000000000000000 _ZN3TCB7wrapperEv
     /tmp/ccxK8XHR.s:13     .text:0000000000000000 .L0 
     /tmp/ccxK8XHR.s:14     .text:0000000000000000 .L0 
     /tmp/ccxK8XHR.s:15     .text:0000000000000004 .L0 
     /tmp/ccxK8XHR.s:18     .text:000000000000000c .L0 
     /tmp/ccxK8XHR.s:19     .text:000000000000000c .L0 
     /tmp/ccxK8XHR.s:21     .text:0000000000000010 .L0 
     /tmp/ccxK8XHR.s:23     .text:0000000000000010 .L0 
     /tmp/ccxK8XHR.s:24     .text:0000000000000010 .L0 
     /tmp/ccxK8XHR.s:27     .text:0000000000000018 .L0 
     /tmp/ccxK8XHR.s:28     .text:0000000000000018 .L0 
     /tmp/ccxK8XHR.s:31     .text:0000000000000024 .L0 
     /tmp/ccxK8XHR.s:35     .text:000000000000002c .L0 
     /tmp/ccxK8XHR.s:36     .text:000000000000002c .L0 
     /tmp/ccxK8XHR.s:39     .text:0000000000000034 .L0 
     /tmp/ccxK8XHR.s:40     .text:0000000000000038 .L0 
     /tmp/ccxK8XHR.s:42     .text:000000000000003c .L0 
     /tmp/ccxK8XHR.s:43     .text:000000000000003c .L0 
     /tmp/ccxK8XHR.s:45     .text:0000000000000040 .L0 
     /tmp/ccxK8XHR.s:47     .text:0000000000000044 .L0 
     /tmp/ccxK8XHR.s:53     .text:0000000000000044 _ZN3TCB8dispatchEv
     /tmp/ccxK8XHR.s:56     .text:0000000000000044 .L0 
     /tmp/ccxK8XHR.s:57     .text:0000000000000044 .L0 
     /tmp/ccxK8XHR.s:58     .text:0000000000000048 .L0 
     /tmp/ccxK8XHR.s:62     .text:0000000000000054 .L0 
     /tmp/ccxK8XHR.s:63     .text:0000000000000054 .L0 
     /tmp/ccxK8XHR.s:64     .text:0000000000000054 .L0 
     /tmp/ccxK8XHR.s:66     .text:0000000000000058 .L0 
     /tmp/ccxK8XHR.s:68     .text:0000000000000058 .L0 
     /tmp/ccxK8XHR.s:69     .text:0000000000000058 .L0 
     /tmp/ccxK8XHR.s:72     .text:0000000000000060 .L0 
     /tmp/ccxK8XHR.s:73     .text:0000000000000060 .L0 
     /tmp/ccxK8XHR.s:75     .text:0000000000000064 .L0 
     /tmp/ccxK8XHR.s:77     .text:0000000000000068 .L0 
     /tmp/ccxK8XHR.s:79     .text:000000000000006c .L0 
     /tmp/ccxK8XHR.s:82     .text:0000000000000070 .L0 
     /tmp/ccxK8XHR.s:83     .text:0000000000000070 .L0 
     /tmp/ccxK8XHR.s:87     .text:000000000000007c .L0 
     /tmp/ccxK8XHR.s:90     .text:0000000000000088 .L0 
     /tmp/ccxK8XHR.s:91     .text:0000000000000088 .L0 
     /tmp/ccxK8XHR.s:93     .text:000000000000008c .L0 
     /tmp/ccxK8XHR.s:94     .text:000000000000008c .L0 
     /tmp/ccxK8XHR.s:96     .text:0000000000000090 .L0 
     /tmp/ccxK8XHR.s:102    .text:0000000000000094 .L0 
     /tmp/ccxK8XHR.s:103    .text:0000000000000094 .L0 
     /tmp/ccxK8XHR.s:104    .text:0000000000000094 .L0 
     /tmp/ccxK8XHR.s:115    .text:000000000000009c .L0 
     /tmp/ccxK8XHR.s:117    .text:00000000000000a0 .L0 
     /tmp/ccxK8XHR.s:118    .text:00000000000000a0 .L0 
     /tmp/ccxK8XHR.s:123    .text:00000000000000ac .L0 
     /tmp/ccxK8XHR.s:124    .text:00000000000000b0 .L0 
     /tmp/ccxK8XHR.s:125    .text:00000000000000b0 .L0 
     /tmp/ccxK8XHR.s:127    .text:00000000000000b4 .L0 
     /tmp/ccxK8XHR.s:128    .text:00000000000000b4 .L0 
     /tmp/ccxK8XHR.s:130    .text:00000000000000b8 .L0 
GAS LISTING /tmp/ccxK8XHR.s 			page 15


     /tmp/ccxK8XHR.s:133    .text:00000000000000bc .L0 
     /tmp/ccxK8XHR.s:137    .text:00000000000000c0 .L0 
     /tmp/ccxK8XHR.s:139    .text:00000000000000c0 .L0 
     /tmp/ccxK8XHR.s:140    .text:00000000000000c0 .L0 
     /tmp/ccxK8XHR.s:149    .text:00000000000000d0 .L0 
     /tmp/ccxK8XHR.s:150    .text:00000000000000d0 .L0 
     /tmp/ccxK8XHR.s:151    .text:00000000000000d0 .L0 
     /tmp/ccxK8XHR.s:158    .text:00000000000000d8 .L0 
     /tmp/ccxK8XHR.s:161    .text:00000000000000dc .L0 
     /tmp/ccxK8XHR.s:167    .text:00000000000000dc _ZN3TCB5yieldEv
     /tmp/ccxK8XHR.s:170    .text:00000000000000dc .L0 
     /tmp/ccxK8XHR.s:171    .text:00000000000000dc .L0 
     /tmp/ccxK8XHR.s:172    .text:00000000000000e0 .L0 
     /tmp/ccxK8XHR.s:175    .text:00000000000000e8 .L0 
     /tmp/ccxK8XHR.s:176    .text:00000000000000e8 .L0 
     /tmp/ccxK8XHR.s:178    .text:00000000000000ec .L0 
     /tmp/ccxK8XHR.s:180    .text:00000000000000ec .L0 
     /tmp/ccxK8XHR.s:181    .text:00000000000000ec .L0 
     /tmp/ccxK8XHR.s:184    .text:00000000000000f4 .L0 
     /tmp/ccxK8XHR.s:185    .text:00000000000000f4 .L0 
     /tmp/ccxK8XHR.s:188    .text:00000000000000fc .L0 
     /tmp/ccxK8XHR.s:189    .text:00000000000000fc .L0 
     /tmp/ccxK8XHR.s:192    .text:0000000000000104 .L0 
     /tmp/ccxK8XHR.s:193    .text:0000000000000108 .L0 
     /tmp/ccxK8XHR.s:195    .text:000000000000010c .L0 
     /tmp/ccxK8XHR.s:196    .text:000000000000010c .L0 
     /tmp/ccxK8XHR.s:198    .text:0000000000000110 .L0 
     /tmp/ccxK8XHR.s:200    .text:0000000000000114 .L0 
     /tmp/ccxK8XHR.s:206    .text:0000000000000114 _ZN3TCBnwEm
     /tmp/ccxK8XHR.s:209    .text:0000000000000114 .L0 
     /tmp/ccxK8XHR.s:211    .text:0000000000000114 .L0 
     /tmp/ccxK8XHR.s:212    .text:0000000000000118 .L0 
     /tmp/ccxK8XHR.s:215    .text:0000000000000120 .L0 
     /tmp/ccxK8XHR.s:216    .text:0000000000000120 .L0 
     /tmp/ccxK8XHR.s:218    .text:0000000000000124 .L0 
     /tmp/ccxK8XHR.s:220    .text:0000000000000124 .L0 
     /tmp/ccxK8XHR.s:221    .text:0000000000000124 .L0 
     /tmp/ccxK8XHR.s:226    .text:0000000000000130 .L0 
     /tmp/ccxK8XHR.s:227    .text:0000000000000134 .L0 
     /tmp/ccxK8XHR.s:229    .text:0000000000000138 .L0 
     /tmp/ccxK8XHR.s:230    .text:0000000000000138 .L0 
     /tmp/ccxK8XHR.s:232    .text:000000000000013c .L0 
     /tmp/ccxK8XHR.s:234    .text:0000000000000140 .L0 
     /tmp/ccxK8XHR.s:240    .text:0000000000000140 _ZN3TCB12createThreadEPFvPvES0_Pm
     /tmp/ccxK8XHR.s:243    .text:0000000000000140 .L0 
     /tmp/ccxK8XHR.s:245    .text:0000000000000140 .L0 
     /tmp/ccxK8XHR.s:246    .text:0000000000000144 .L0 
     /tmp/ccxK8XHR.s:253    .text:000000000000015c .L0 
     /tmp/ccxK8XHR.s:254    .text:000000000000015c .L0 
     /tmp/ccxK8XHR.s:255    .text:000000000000015c .L0 
     /tmp/ccxK8XHR.s:256    .text:000000000000015c .L0 
     /tmp/ccxK8XHR.s:257    .text:000000000000015c .L0 
     /tmp/ccxK8XHR.s:258    .text:000000000000015c .L0 
     /tmp/ccxK8XHR.s:260    .text:0000000000000160 .L0 
     /tmp/ccxK8XHR.s:265    .text:000000000000016c .L0 
     /tmp/ccxK8XHR.s:266    .text:000000000000016c .L0 
     /tmp/ccxK8XHR.s:276    .text:000000000000017c .L0 
GAS LISTING /tmp/ccxK8XHR.s 			page 16


     /tmp/ccxK8XHR.s:286    .text:000000000000019c .L0 
     /tmp/ccxK8XHR.s:287    .text:000000000000019c .L0 
     /tmp/ccxK8XHR.s:292    .text:00000000000001a8 .L0 
     /tmp/ccxK8XHR.s:293    .text:00000000000001a8 .L0 
     /tmp/ccxK8XHR.s:295    .text:00000000000001ac .L0 
     /tmp/ccxK8XHR.s:300    .text:00000000000001b4 .L0 
     /tmp/ccxK8XHR.s:301    .text:00000000000001b4 .L0 
     /tmp/ccxK8XHR.s:303    .text:00000000000001b8 .L0 
     /tmp/ccxK8XHR.s:304    .text:00000000000001b8 .L0 
     /tmp/ccxK8XHR.s:310    .text:00000000000001bc .L0 
     /tmp/ccxK8XHR.s:312    .text:00000000000001c0 .L0 
     /tmp/ccxK8XHR.s:313    .text:00000000000001c0 .L0 
     /tmp/ccxK8XHR.s:318    .text:00000000000001cc .L0 
     /tmp/ccxK8XHR.s:319    .text:00000000000001cc .L0 
     /tmp/ccxK8XHR.s:321    .text:00000000000001d4 .L0 
     /tmp/ccxK8XHR.s:322    .text:00000000000001d4 .L0 
     /tmp/ccxK8XHR.s:324    .text:00000000000001d8 .L0 
     /tmp/ccxK8XHR.s:325    .text:00000000000001d8 .L0 
     /tmp/ccxK8XHR.s:327    .text:00000000000001dc .L0 
     /tmp/ccxK8XHR.s:330    .text:00000000000001e0 .L0 
     /tmp/ccxK8XHR.s:333    .text:00000000000001e4 .L0 
     /tmp/ccxK8XHR.s:336    .text:00000000000001e8 .L0 
     /tmp/ccxK8XHR.s:339    .text:00000000000001ec .L0 
     /tmp/ccxK8XHR.s:343    .text:00000000000001f0 .L0 
     /tmp/ccxK8XHR.s:348    .text:00000000000001f0 .L0 
     /tmp/ccxK8XHR.s:353    .text:00000000000001f8 .L0 
     /tmp/ccxK8XHR.s:359    .text:0000000000000200 .L0 
     /tmp/ccxK8XHR.s:365    .text:0000000000000200 _ZN3TCBdlEPv
     /tmp/ccxK8XHR.s:368    .text:0000000000000200 .L0 
     /tmp/ccxK8XHR.s:370    .text:0000000000000200 .L0 
     /tmp/ccxK8XHR.s:371    .text:0000000000000204 .L0 
     /tmp/ccxK8XHR.s:374    .text:000000000000020c .L0 
     /tmp/ccxK8XHR.s:375    .text:000000000000020c .L0 
     /tmp/ccxK8XHR.s:377    .text:0000000000000210 .L0 
     /tmp/ccxK8XHR.s:379    .text:0000000000000210 .L0 
     /tmp/ccxK8XHR.s:380    .text:0000000000000210 .L0 
     /tmp/ccxK8XHR.s:383    .text:0000000000000218 .L0 
     /tmp/ccxK8XHR.s:384    .text:000000000000021c .L0 
     /tmp/ccxK8XHR.s:386    .text:0000000000000220 .L0 
     /tmp/ccxK8XHR.s:387    .text:0000000000000220 .L0 
     /tmp/ccxK8XHR.s:389    .text:0000000000000224 .L0 
     /tmp/ccxK8XHR.s:391    .text:0000000000000228 .L0 
     /tmp/ccxK8XHR.s:405    .bss:0000000000000008 _ZN3TCB16runningTimeSliceE
     /tmp/ccxK8XHR.s:401    .bss:0000000000000000 _ZN3TCB7runningE
     /tmp/ccxK8XHR.s:398    .bss:0000000000000000 .LANCHOR0
     /tmp/ccxK8XHR.s:413    .text:0000000000000228 .L0 
     /tmp/ccxK8XHR.s:28     .text:0000000000000018 .L0 
     /tmp/ccxK8XHR.s:69     .text:0000000000000058 .L0 
     /tmp/ccxK8XHR.s:87     .text:000000000000007c .L0 
     /tmp/ccxK8XHR.s:288    .text:00000000000001a0 .L0 
     /tmp/ccxK8XHR.s:80     .text:0000000000000070 .L4
     /tmp/ccxK8XHR.s:136    .text:00000000000000c0 .L9
     /tmp/ccxK8XHR.s:144    .text:00000000000000d0 .L10
     /tmp/ccxK8XHR.s:121    .text:00000000000000ac .L3
     /tmp/ccxK8XHR.s:111    .text:000000000000009c .L6
     /tmp/ccxK8XHR.s:342    .text:00000000000001f0 .L19
     /tmp/ccxK8XHR.s:351    .text:00000000000001f8 .L20
GAS LISTING /tmp/ccxK8XHR.s 			page 17


     /tmp/ccxK8XHR.s:317    .text:00000000000001cc .L15
     /tmp/ccxK8XHR.s:289    .text:00000000000001a8 .L16
     /tmp/ccxK8XHR.s:298    .text:00000000000001b4 .L17
     /tmp/ccxK8XHR.s:1628   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccxK8XHR.s:3223   .debug_str:00000000000006b7 .LASF126
     /tmp/ccxK8XHR.s:3025   .debug_str:00000000000000f8 .LASF127
     /tmp/ccxK8XHR.s:3085   .debug_str:00000000000002ac .LASF128
     /tmp/ccxK8XHR.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccxK8XHR.s:408    .text:0000000000000228 .Letext0
     /tmp/ccxK8XHR.s:2987   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccxK8XHR.s:3143   .debug_str:000000000000047c .LASF0
     /tmp/ccxK8XHR.s:3157   .debug_str:00000000000004b4 .LASF1
     /tmp/ccxK8XHR.s:3129   .debug_str:0000000000000420 .LASF2
     /tmp/ccxK8XHR.s:3099   .debug_str:0000000000000354 .LASF4
     /tmp/ccxK8XHR.s:3199   .debug_str:00000000000005ff .LASF3
     /tmp/ccxK8XHR.s:3019   .debug_str:00000000000000b0 .LASF5
     /tmp/ccxK8XHR.s:3053   .debug_str:00000000000001c2 .LASF6
     /tmp/ccxK8XHR.s:3161   .debug_str:00000000000004d8 .LASF7
     /tmp/ccxK8XHR.s:3141   .debug_str:0000000000000469 .LASF8
     /tmp/ccxK8XHR.s:3235   .debug_str:00000000000007c4 .LASF9
     /tmp/ccxK8XHR.s:3083   .debug_str:000000000000029e .LASF10
     /tmp/ccxK8XHR.s:3177   .debug_str:0000000000000557 .LASF11
     /tmp/ccxK8XHR.s:3225   .debug_str:000000000000077b .LASF12
     /tmp/ccxK8XHR.s:3117   .debug_str:00000000000003c1 .LASF13
     /tmp/ccxK8XHR.s:2995   .debug_str:000000000000002a .LASF14
     /tmp/ccxK8XHR.s:3031   .debug_str:0000000000000126 .LASF15
     /tmp/ccxK8XHR.s:3193   .debug_str:00000000000005cb .LASF16
     /tmp/ccxK8XHR.s:3045   .debug_str:0000000000000184 .LASF17
     /tmp/ccxK8XHR.s:3005   .debug_str:0000000000000065 .LASF129
     /tmp/ccxK8XHR.s:3111   .debug_str:0000000000000391 .LASF18
     /tmp/ccxK8XHR.s:3249   .debug_str:0000000000000829 .LASF20
     /tmp/ccxK8XHR.s:3183   .debug_str:000000000000058a .LASF130
     /tmp/ccxK8XHR.s:3163   .debug_str:00000000000004eb .LASF22
     /tmp/ccxK8XHR.s:3121   .debug_str:00000000000003e9 .LASF24
     /tmp/ccxK8XHR.s:3131   .debug_str:000000000000042e .LASF19
     /tmp/ccxK8XHR.s:3093   .debug_str:000000000000030b .LASF21
     /tmp/ccxK8XHR.s:3003   .debug_str:000000000000005b .LASF23
     /tmp/ccxK8XHR.s:3167   .debug_str:00000000000004ff .LASF25
     /tmp/ccxK8XHR.s:3103   .debug_str:000000000000036a .LASF26
     /tmp/ccxK8XHR.s:3229   .debug_str:0000000000000792 .LASF27
     /tmp/ccxK8XHR.s:3123   .debug_str:00000000000003ff .LASF28
     /tmp/ccxK8XHR.s:3175   .debug_str:000000000000053f .LASF29
     /tmp/ccxK8XHR.s:3233   .debug_str:00000000000007b7 .LASF30
     /tmp/ccxK8XHR.s:3237   .debug_str:00000000000007d4 .LASF31
     /tmp/ccxK8XHR.s:3209   .debug_str:0000000000000661 .LASF32
     /tmp/ccxK8XHR.s:3091   .debug_str:00000000000002f4 .LASF34
     /tmp/ccxK8XHR.s:3059   .debug_str:00000000000001f6 .LASF33
     /tmp/ccxK8XHR.s:3077   .debug_str:000000000000026d .LASF35
     /tmp/ccxK8XHR.s:3195   .debug_str:00000000000005e1 .LASF36
     /tmp/ccxK8XHR.s:3135   .debug_str:0000000000000441 .LASF38
     /tmp/ccxK8XHR.s:3147   .debug_str:0000000000000490 .LASF37
     /tmp/ccxK8XHR.s:3067   .debug_str:000000000000022d .LASF39
     /tmp/ccxK8XHR.s:3213   .debug_str:0000000000000682 .LASF40
     /tmp/ccxK8XHR.s:3203   .debug_str:0000000000000621 .LASF41
     /tmp/ccxK8XHR.s:3065   .debug_str:0000000000000225 .LASF42
     /tmp/ccxK8XHR.s:3181   .debug_str:0000000000000579 .LASF43
     /tmp/ccxK8XHR.s:3109   .debug_str:0000000000000389 .LASF44
GAS LISTING /tmp/ccxK8XHR.s 			page 18


     /tmp/ccxK8XHR.s:3127   .debug_str:0000000000000411 .LASF45
     /tmp/ccxK8XHR.s:3149   .debug_str:0000000000000499 .LASF46
     /tmp/ccxK8XHR.s:3151   .debug_str:000000000000049f .LASF47
     /tmp/ccxK8XHR.s:3153   .debug_str:00000000000004a4 .LASF48
     /tmp/ccxK8XHR.s:3105   .debug_str:0000000000000375 .LASF49
     /tmp/ccxK8XHR.s:2989   .debug_str:0000000000000000 .LASF50
     /tmp/ccxK8XHR.s:3201   .debug_str:0000000000000611 .LASF51
     /tmp/ccxK8XHR.s:3253   .debug_str:0000000000000863 .LASF101
     /tmp/ccxK8XHR.s:3239   .debug_str:00000000000007ec .LASF93
     /tmp/ccxK8XHR.s:3095   .debug_str:0000000000000322 .LASF95
     /tmp/ccxK8XHR.s:3241   .debug_str:00000000000007fa .LASF52
     /tmp/ccxK8XHR.s:3217   .debug_str:0000000000000692 .LASF53
     /tmp/ccxK8XHR.s:3207   .debug_str:0000000000000651 .LASF131
     /tmp/ccxK8XHR.s:3187   .debug_str:0000000000000594 .LASF132
     /tmp/ccxK8XHR.s:3069   .debug_str:0000000000000240 .LASF54
     /tmp/ccxK8XHR.s:3155   .debug_str:00000000000004ae .LASF55
     /tmp/ccxK8XHR.s:3049   .debug_str:00000000000001ae .LASF133
     /tmp/ccxK8XHR.s:3039   .debug_str:0000000000000158 .LASF56
     /tmp/ccxK8XHR.s:3115   .debug_str:00000000000003b4 .LASF57
     /tmp/ccxK8XHR.s:3021   .debug_str:00000000000000b7 .LASF58
     /tmp/ccxK8XHR.s:3189   .debug_str:00000000000005a1 .LASF59
     /tmp/ccxK8XHR.s:3251   .debug_str:000000000000084b .LASF60
     /tmp/ccxK8XHR.s:3017   .debug_str:00000000000000a2 .LASF61
     /tmp/ccxK8XHR.s:3063   .debug_str:000000000000020a .LASF62
     /tmp/ccxK8XHR.s:3071   .debug_str:0000000000000245 .LASF63
     /tmp/ccxK8XHR.s:2993   .debug_str:0000000000000010 .LASF64
     /tmp/ccxK8XHR.s:2997   .debug_str:000000000000003a .LASF67
     /tmp/ccxK8XHR.s:3211   .debug_str:000000000000066d .LASF69
     /tmp/ccxK8XHR.s:3061   .debug_str:0000000000000201 .LASF65
     /tmp/ccxK8XHR.s:3037   .debug_str:0000000000000143 .LASF66
     /tmp/ccxK8XHR.s:3133   .debug_str:000000000000043a .LASF68
     /tmp/ccxK8XHR.s:3179   .debug_str:0000000000000566 .LASF70
     /tmp/ccxK8XHR.s:3221   .debug_str:00000000000006b0 .LASF71
     /tmp/ccxK8XHR.s:3081   .debug_str:000000000000028b .LASF72
     /tmp/ccxK8XHR.s:3075   .debug_str:0000000000000265 .LASF73
     /tmp/ccxK8XHR.s:3047   .debug_str:000000000000019a .LASF74
     /tmp/ccxK8XHR.s:2991   .debug_str:0000000000000008 .LASF75
     /tmp/ccxK8XHR.s:3089   .debug_str:00000000000002e0 .LASF76
     /tmp/ccxK8XHR.s:3145   .debug_str:0000000000000489 .LASF77
     /tmp/ccxK8XHR.s:3247   .debug_str:0000000000000816 .LASF78
     /tmp/ccxK8XHR.s:3015   .debug_str:000000000000009b .LASF79
     /tmp/ccxK8XHR.s:3073   .debug_str:0000000000000252 .LASF80
     /tmp/ccxK8XHR.s:3079   .debug_str:0000000000000285 .LASF81
     /tmp/ccxK8XHR.s:3219   .debug_str:000000000000069e .LASF82
     /tmp/ccxK8XHR.s:3013   .debug_str:0000000000000095 .LASF83
     /tmp/ccxK8XHR.s:3265   .debug_str:00000000000008b7 .LASF84
     /tmp/ccxK8XHR.s:3255   .debug_str:0000000000000879 .LASF85
     /tmp/ccxK8XHR.s:3197   .debug_str:00000000000005e7 .LASF86
     /tmp/ccxK8XHR.s:3107   .debug_str:000000000000037e .LASF87
     /tmp/ccxK8XHR.s:3119   .debug_str:00000000000003d1 .LASF88
     /tmp/ccxK8XHR.s:3029   .debug_str:000000000000011c .LASF89
     /tmp/ccxK8XHR.s:3169   .debug_str:0000000000000513 .LASF90
     /tmp/ccxK8XHR.s:3009   .debug_str:000000000000007f .LASF91
     /tmp/ccxK8XHR.s:3087   .debug_str:00000000000002ca .LASF92
     /tmp/ccxK8XHR.s:3033   .debug_str:0000000000000132 .LASF94
     /tmp/ccxK8XHR.s:3259   .debug_str:0000000000000889 .LASF96
     /tmp/ccxK8XHR.s:3171   .debug_str:0000000000000529 .LASF97
GAS LISTING /tmp/ccxK8XHR.s 			page 19


     /tmp/ccxK8XHR.s:3051   .debug_str:00000000000001bd .LASF98
     /tmp/ccxK8XHR.s:3125   .debug_str:000000000000040c .LASF99
     /tmp/ccxK8XHR.s:3007   .debug_str:000000000000006d .LASF100
     /tmp/ccxK8XHR.s:3027   .debug_str:0000000000000104 .LASF102
     /tmp/ccxK8XHR.s:3057   .debug_str:00000000000001e2 .LASF134
     /tmp/ccxK8XHR.s:3139   .debug_str:0000000000000459 .LASF103
     /tmp/ccxK8XHR.s:3231   .debug_str:00000000000007a8 .LASF107
     /tmp/ccxK8XHR.s:3257   .debug_str:0000000000000884 .LASF104
     /tmp/ccxK8XHR.s:3245   .debug_str:0000000000000811 .LASF105
     /tmp/ccxK8XHR.s:3185   .debug_str:000000000000058f .LASF106
     /tmp/ccxK8XHR.s:3101   .debug_str:000000000000035b .LASF108
     /tmp/ccxK8XHR.s:3215   .debug_str:000000000000068a .LASF109
     /tmp/ccxK8XHR.s:3191   .debug_str:00000000000005ac .LASF110
     /tmp/ccxK8XHR.s:3035   .debug_str:000000000000013d .LASF111
     /tmp/ccxK8XHR.s:3205   .debug_str:0000000000000633 .LASF112
     /tmp/ccxK8XHR.s:3055   .debug_str:00000000000001c9 .LASF113
     /tmp/ccxK8XHR.s:3001   .debug_str:000000000000004f .LASF114
     /tmp/ccxK8XHR.s:2999   .debug_str:0000000000000043 .LASF115
     /tmp/ccxK8XHR.s:3173   .debug_str:0000000000000533 .LASF116
     /tmp/ccxK8XHR.s:3243   .debug_str:0000000000000807 .LASF117
     /tmp/ccxK8XHR.s:3023   .debug_str:00000000000000c3 .LASF118
     /tmp/ccxK8XHR.s:3263   .debug_str:00000000000008a6 .LASF119
     /tmp/ccxK8XHR.s:3041   .debug_str:0000000000000164 .LASF120
     /tmp/ccxK8XHR.s:366    .text:0000000000000200 .LFB35
     /tmp/ccxK8XHR.s:392    .text:0000000000000228 .LFE35
     /tmp/ccxK8XHR.s:2747   .debug_loc:0000000000000000 .LLST13
     /tmp/ccxK8XHR.s:381    .text:0000000000000218 .LVL34
     /tmp/ccxK8XHR.s:207    .text:0000000000000114 .LFB34
     /tmp/ccxK8XHR.s:235    .text:0000000000000140 .LFE34
     /tmp/ccxK8XHR.s:2761   .debug_loc:0000000000000039 .LLST2
     /tmp/ccxK8XHR.s:224    .text:0000000000000130 .LVL17
     /tmp/ccxK8XHR.s:10     .text:0000000000000000 .LFB33
     /tmp/ccxK8XHR.s:48     .text:0000000000000044 .LFE33
     /tmp/ccxK8XHR.s:25     .text:0000000000000018 .LVL0
     /tmp/ccxK8XHR.s:37     .text:0000000000000034 .LVL2
     /tmp/ccxK8XHR.s:168    .text:00000000000000dc .LFB32
     /tmp/ccxK8XHR.s:201    .text:0000000000000114 .LFE32
     /tmp/ccxK8XHR.s:182    .text:00000000000000f4 .LVL12
     /tmp/ccxK8XHR.s:186    .text:00000000000000fc .LVL13
     /tmp/ccxK8XHR.s:190    .text:0000000000000104 .LVL14
     /tmp/ccxK8XHR.s:54     .text:0000000000000044 .LFB31
     /tmp/ccxK8XHR.s:162    .text:00000000000000dc .LFE31
     /tmp/ccxK8XHR.s:2781   .debug_loc:0000000000000087 .LLST0
     /tmp/ccxK8XHR.s:99     .text:0000000000000094 .LBB10
     /tmp/ccxK8XHR.s:113    .text:000000000000009c .LBE10
     /tmp/ccxK8XHR.s:2792   .debug_loc:00000000000000bd .LLST1
     /tmp/ccxK8XHR.s:147    .text:00000000000000d0 .LBB12
     /tmp/ccxK8XHR.s:160    .text:00000000000000dc .LBE12
     /tmp/ccxK8XHR.s:84     .text:0000000000000078 .LVL4
     /tmp/ccxK8XHR.s:120    .text:00000000000000ac .LVL7
     /tmp/ccxK8XHR.s:142    .text:00000000000000cc .LVL10
     /tmp/ccxK8XHR.s:241    .text:0000000000000140 .LFB30
     /tmp/ccxK8XHR.s:360    .text:0000000000000200 .LFE30
     /tmp/ccxK8XHR.s:3165   .debug_str:00000000000004f6 .LASF121
     /tmp/ccxK8XHR.s:2801   .debug_loc:00000000000000e3 .LLST3
     /tmp/ccxK8XHR.s:2823   .debug_loc:0000000000000142 .LLST4
     /tmp/ccxK8XHR.s:2845   .debug_loc:00000000000001a1 .LLST5
GAS LISTING /tmp/ccxK8XHR.s 			page 20


     /tmp/ccxK8XHR.s:3097   .debug_str:000000000000034a .LASF122
     /tmp/ccxK8XHR.s:2877   .debug_loc:0000000000000228 .LLST6
     /tmp/ccxK8XHR.s:272    .text:000000000000017c .LBB14
     /tmp/ccxK8XHR.s:2973   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccxK8XHR.s:2888   .debug_loc:000000000000025e .LLST7
     /tmp/ccxK8XHR.s:2909   .debug_loc:00000000000002bc .LLST8
     /tmp/ccxK8XHR.s:2920   .debug_loc:00000000000002f2 .LLST9
     /tmp/ccxK8XHR.s:2931   .debug_loc:0000000000000328 .LLST10
     /tmp/ccxK8XHR.s:2942   .debug_loc:000000000000035e .LLST11
     /tmp/ccxK8XHR.s:2953   .debug_loc:0000000000000394 .LLST12
     /tmp/ccxK8XHR.s:269    .text:0000000000000178 .LVL20
     /tmp/ccxK8XHR.s:315    .text:00000000000001cc .LVL25
     /tmp/ccxK8XHR.s:3261   .debug_str:00000000000008a1 .LASF123
     /tmp/ccxK8XHR.s:3043   .debug_str:000000000000017f .LASF135
     /tmp/ccxK8XHR.s:3137   .debug_str:0000000000000451 .LASF124
     /tmp/ccxK8XHR.s:3227   .debug_str:000000000000078a .LASF125
     /tmp/ccxK8XHR.s:3113   .debug_str:000000000000039e .LASF136
     /tmp/ccxK8XHR.s:3159   .debug_str:00000000000004c7 .LASF137
     /tmp/ccxK8XHR.s:3011   .debug_str:0000000000000089 .LASF138
     /tmp/ccxK8XHR.s:369    .text:0000000000000200 .LVL33
     /tmp/ccxK8XHR.s:210    .text:0000000000000114 .LVL15
     /tmp/ccxK8XHR.s:222    .text:0000000000000128 .LVL16
     /tmp/ccxK8XHR.s:70     .text:0000000000000060 .LVL3
     /tmp/ccxK8XHR.s:131    .text:00000000000000b8 .LVL8
     /tmp/ccxK8XHR.s:135    .text:00000000000000c0 .LVL9
     /tmp/ccxK8XHR.s:98     .text:0000000000000094 .LVL5
     /tmp/ccxK8XHR.s:109    .text:000000000000009c .LVL6
     /tmp/ccxK8XHR.s:244    .text:0000000000000140 .LVL18
     /tmp/ccxK8XHR.s:267    .text:0000000000000170 .LVL19
     /tmp/ccxK8XHR.s:334    .text:00000000000001e4 .LVL28
     /tmp/ccxK8XHR.s:341    .text:00000000000001f0 .LVL30
     /tmp/ccxK8XHR.s:337    .text:00000000000001e8 .LVL29
     /tmp/ccxK8XHR.s:297    .text:00000000000001b4 .LVL23
     /tmp/ccxK8XHR.s:354    .text:00000000000001fc .LVL32
     /tmp/ccxK8XHR.s:305    .text:00000000000001bc .LVL24
     /tmp/ccxK8XHR.s:328    .text:00000000000001dc .LVL26
     /tmp/ccxK8XHR.s:271    .text:000000000000017c .LVL21
     /tmp/ccxK8XHR.s:290    .text:00000000000001a8 .LVL22
     /tmp/ccxK8XHR.s:350    .text:00000000000001f8 .LVL31
     /tmp/ccxK8XHR.s:331    .text:00000000000001e0 .LVL27
     /tmp/ccxK8XHR.s:414    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccxK8XHR.s:308    .text:00000000000001bc .LBE14
     /tmp/ccxK8XHR.s:344    .text:00000000000001f0 .LBB19
     /tmp/ccxK8XHR.s:358    .text:0000000000000200 .LBE19
     /tmp/ccxK8XHR.s:284    .text:000000000000019c .LBB16
     /tmp/ccxK8XHR.s:306    .text:00000000000001bc .LBE16
     /tmp/ccxK8XHR.s:346    .text:00000000000001f0 .LBB17
     /tmp/ccxK8XHR.s:356    .text:0000000000000200 .LBE17

UNDEFINED SYMBOLS
_ZN5Riscv10popSppSpieEv
_Z11thread_exitv
_ZN9Scheduler3getEv
_ZN3TCB13contextSwitchEPNS_7ContextES1_
_ZN9Scheduler3putEP3TCB
_ZN5Riscv13pushRegistersEv
_ZN5Riscv12popRegistersEv
GAS LISTING /tmp/ccxK8XHR.s 			page 21


_ZN15MemoryAllocator7kmallocEm
_ZN15MemoryAllocator5kfreeEPv
