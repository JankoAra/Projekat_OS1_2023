GAS LISTING /tmp/ccMwiodn.s 			page 1


   1              		.file	"TCB.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN3TCB7wrapperEv
   9              	_ZN3TCB7wrapperEv:
  10              	.LFB46:
  11              		.file 1 "src/TCB.cpp"
   1:src/TCB.cpp   **** //
   2:src/TCB.cpp   **** // Created by os on 5/23/23.
   3:src/TCB.cpp   **** //
   4:src/TCB.cpp   **** 
   5:src/TCB.cpp   **** #include "../h/TCB.hpp"
   6:src/TCB.cpp   **** #include "../h/Riscv.hpp"
   7:src/TCB.cpp   **** #include "../h/Scheduler.hpp"
   8:src/TCB.cpp   **** 
   9:src/TCB.cpp   **** void kernelConsumerFunction(void*);
  10:src/TCB.cpp   **** 
  11:src/TCB.cpp   **** void idle(void*);
  12:src/TCB.cpp   **** 
  13:src/TCB.cpp   **** void userMain();
  14:src/TCB.cpp   **** 
  15:src/TCB.cpp   **** int main();
  16:src/TCB.cpp   **** 
  17:src/TCB.cpp   **** TCB* TCB::running = nullptr;
  18:src/TCB.cpp   **** uint64 TCB::runningTimeSlice = 0;
  19:src/TCB.cpp   **** 
  20:src/TCB.cpp   **** TCB* TCB::createThread(TCB::Body function, void* args, uint64* stack) {
  21:src/TCB.cpp   ****     TCB* newThread = new TCB(function, args, stack);
  22:src/TCB.cpp   ****     return newThread;
  23:src/TCB.cpp   **** }
  24:src/TCB.cpp   **** 
  25:src/TCB.cpp   **** void TCB::dispatch() {
  26:src/TCB.cpp   ****     TCB* old = TCB::running;
  27:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  28:src/TCB.cpp   ****         Scheduler::put(old);
  29:src/TCB.cpp   ****     }
  30:src/TCB.cpp   ****     TCB::running = Scheduler::get();
  31:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  32:src/TCB.cpp   **** 
  33:src/TCB.cpp   ****     //sada biramo u kom rezimu ce se izvrsavati nit, upisom bita SSTATUS_SPP
  34:src/TCB.cpp   ****     //ako treba da se izvrsava kernel nit, povratak je u sistemski rezim, inace u korisnicki
  35:src/TCB.cpp   ****     if (TCB::running->threadFunction == (TCB::Body)main || TCB::running->threadFunction == kernelCo
  36:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  37:src/TCB.cpp   ****         Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  38:src/TCB.cpp   ****     } else {
  39:src/TCB.cpp   ****         Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
  40:src/TCB.cpp   ****     }
  41:src/TCB.cpp   **** 
  42:src/TCB.cpp   ****     if (old != TCB::running) TCB::contextSwitch(&old->context, &running->context);
  43:src/TCB.cpp   **** }
  44:src/TCB.cpp   **** 
  45:src/TCB.cpp   **** void TCB::wrapper() {
  12              		.loc 1 45 21
  13              		.cfi_startproc
GAS LISTING /tmp/ccMwiodn.s 			page 2


  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  46:src/TCB.cpp   ****     //pocetak wrappera se izvrsava u supervisor modu,
  47:src/TCB.cpp   ****     //jer nismo izasli iz prekidne rutine prilikom promene konteksta (dispatch)
  48:src/TCB.cpp   ****     Riscv::returnFromInterrupt();
  22              		.loc 1 48 5
  23              		.loc 1 48 31 is_stmt 0
  24 0010 97000000 		call	_ZN5Riscv19returnFromInterruptEv@plt
  24      E7800000 
  25              	.LVL0:
  49:src/TCB.cpp   ****     //na dalje se izvrsavamo u user modu (osim za kernel funkcije)
  50:src/TCB.cpp   ****     running->threadFunction(running->args);
  26              		.loc 1 50 5 is_stmt 1
  27              		.loc 1 50 14 is_stmt 0
  28 0018 97070000 		ld	a5,.LANCHOR0
  28      83B70700 
  29 0020 03B70701 		ld	a4,16(a5)
  30              		.loc 1 50 28
  31 0024 03B50702 		ld	a0,32(a5)
  32 0028 E7000700 		jalr	a4
  33              	.LVL1:
  51:src/TCB.cpp   ****     //i dalje smo u user modu, moramo promenu niti vrsiti sistemskim pozivom
  52:src/TCB.cpp   ****     thread_exit();
  34              		.loc 1 52 5 is_stmt 1
  35              		.loc 1 52 16 is_stmt 0
  36 002c 97000000 		call	_Z11thread_exitv@plt
  36      E7800000 
  37              	.LVL2:
  53:src/TCB.cpp   **** }
  38              		.loc 1 53 1
  39 0034 83308100 		ld	ra,8(sp)
  40              		.cfi_restore 1
  41 0038 03340100 		ld	s0,0(sp)
  42              		.cfi_restore 8
  43              		.cfi_def_cfa 2, 16
  44 003c 13010101 		addi	sp,sp,16
  45              		.cfi_def_cfa_offset 0
  46 0040 67800000 		jr	ra
  47              		.cfi_endproc
  48              	.LFE46:
  50              		.align	2
  51              		.globl	_ZN3TCB8dispatchEv
  53              	_ZN3TCB8dispatchEv:
  54              	.LFB45:
  25:src/TCB.cpp   ****     TCB* old = TCB::running;
  55              		.loc 1 25 22 is_stmt 1
  56              		.cfi_startproc
  57 0044 130101FE 		addi	sp,sp,-32
  58              		.cfi_def_cfa_offset 32
  59 0048 233C1100 		sd	ra,24(sp)
  60 004c 23388100 		sd	s0,16(sp)
GAS LISTING /tmp/ccMwiodn.s 			page 3


  61 0050 23349100 		sd	s1,8(sp)
  62              		.cfi_offset 1, -8
  63              		.cfi_offset 8, -16
  64              		.cfi_offset 9, -24
  65 0054 13040102 		addi	s0,sp,32
  66              		.cfi_def_cfa 8, 0
  26:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  67              		.loc 1 26 5
  26:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  68              		.loc 1 26 10 is_stmt 0
  69 0058 97040000 		ld	s1,.LANCHOR0
  69      83B40400 
  70              	.LVL3:
  27:src/TCB.cpp   ****         Scheduler::put(old);
  71              		.loc 1 27 5 is_stmt 1
  27:src/TCB.cpp   ****         Scheduler::put(old);
  72              		.loc 1 27 14 is_stmt 0
  73 0060 03A78405 		lw	a4,88(s1)
  27:src/TCB.cpp   ****         Scheduler::put(old);
  74              		.loc 1 27 5
  75 0064 93071000 		li	a5,1
  76 0068 630AF704 		beq	a4,a5,.L10
  77              	.L4:
  30:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  78              		.loc 1 30 5 is_stmt 1
  30:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  79              		.loc 1 30 34 is_stmt 0
  80 006c 97000000 		call	_ZN9Scheduler3getEv@plt
  80      E7800000 
  81              	.LVL4:
  82 0074 93050500 		mv	a1,a0
  30:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  83              		.loc 1 30 18
  84 0078 97070000 		lla	a5,.LANCHOR0
  84      93870700 
  85 0080 23B0A700 		sd	a0,0(a5)
  31:src/TCB.cpp   **** 
  86              		.loc 1 31 5 is_stmt 1
  31:src/TCB.cpp   **** 
  87              		.loc 1 31 27 is_stmt 0
  88 0084 23B40700 		sd	zero,8(a5)
  35:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  89              		.loc 1 35 5 is_stmt 1
  35:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  90              		.loc 1 35 23 is_stmt 0
  91 0088 83370501 		ld	a5,16(a0)
  35:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  92              		.loc 1 35 5
  93 008c 17070000 		la	a4,main
  93      03370700 
  94 0094 638CE702 		beq	a5,a4,.L5
  35:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  95              		.loc 1 35 57 discriminator 1
  96 0098 17070000 		la	a4,_Z22kernelConsumerFunctionPv
  96      03370700 
  97 00a0 6386E702 		beq	a5,a4,.L5
  35:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
GAS LISTING /tmp/ccMwiodn.s 			page 4


  98              		.loc 1 35 115 discriminator 2
  99 00a4 17070000 		la	a4,_Z4idlePv
  99      03370700 
 100 00ac 6380E702 		beq	a5,a4,.L5
  39:src/TCB.cpp   ****     }
 101              		.loc 1 39 9 is_stmt 1
 102              	.LVL5:
 103              	.LBB21:
 104              	.LBB22:
 105              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	static void returnFromInterrupt();
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp **** 	//read scause
  16:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp **** 	//write scause
  19:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp **** 	//read sepc
  22:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp **** 	//write sepc
  25:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp **** 	//read stvec
  28:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp **** 	//write stvec
  31:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  34:src/../h/Riscv.hpp **** 		//postoji zahtev za softverski prekid
  35:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),
  36:src/../h/Riscv.hpp **** 		//postoji prekid od tajmera
  37:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),
  38:src/../h/Riscv.hpp **** 		//postoji zahtev za spoljasnji hardverski prekid
  39:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)
  40:src/../h/Riscv.hpp **** 	};
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp **** 	//mask set sip
  43:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  44:src/../h/Riscv.hpp **** 
  45:src/../h/Riscv.hpp **** 	//mask clear sip
  46:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  47:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccMwiodn.s 			page 5


  48:src/../h/Riscv.hpp **** 	//read sip
  49:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** 	//write sip
  52:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp **** 	//kada se pozove sret, SIE dobija vrednost SPIE, SPIE se postavlja na 1,
  55:src/../h/Riscv.hpp **** 	//rezim se postavlja na osnovu SPP bita, SPP se postavlja na 0
  56:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  57:src/../h/Riscv.hpp **** 		//1 - dozvoljeni prekidi; 0- nedozvoljeni prekidi; igonrise se u korisnickom rezimu
  58:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  59:src/../h/Riscv.hpp **** 		//prethodna vrednost bita SIE
  60:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  61:src/../h/Riscv.hpp **** 		//iz kog rezima se desio skok; 0 - iz korisnickog; 1 - iz sistemskog
  62:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  63:src/../h/Riscv.hpp **** 	};
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp **** 	//mask set sstatus
  66:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp **** 	//mask clear sstatus
  69:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp **** 	//read sstatus
  72:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp **** 	//write sstatus
  75:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp **** 	//upisuje kod sistemskog poziva u registar a0
  78:src/../h/Riscv.hpp **** 	static void loadOpCode(uint64 opCode);
  79:src/../h/Riscv.hpp **** 
  80:src/../h/Riscv.hpp **** };
  81:src/../h/Riscv.hpp **** 
  82:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  83:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  84:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  85:src/../h/Riscv.hpp **** 	return scause;
  86:src/../h/Riscv.hpp **** }
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  89:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  90:src/../h/Riscv.hpp **** }
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  93:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
  94:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
  95:src/../h/Riscv.hpp **** 	return sepc;
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
  99:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
 100:src/../h/Riscv.hpp **** }
 101:src/../h/Riscv.hpp **** 
 102:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 103:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 104:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
GAS LISTING /tmp/ccMwiodn.s 			page 6


 105:src/../h/Riscv.hpp **** 	return stvec;
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 109:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 110:src/../h/Riscv.hpp **** }
 111:src/../h/Riscv.hpp **** 
 112:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 113:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 117:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 118:src/../h/Riscv.hpp **** }
 119:src/../h/Riscv.hpp **** 
 120:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 121:src/../h/Riscv.hpp **** 	uint64 volatile sip;
 122:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sip], sip": [sip] "=r"(sip));
 123:src/../h/Riscv.hpp **** 	return sip;
 124:src/../h/Riscv.hpp **** }
 125:src/../h/Riscv.hpp **** 
 126:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 127:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sip, %[sip]": :[sip] "r"(sip));
 128:src/../h/Riscv.hpp **** }
 129:src/../h/Riscv.hpp **** 
 130:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 131:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sstatus, %[mask]": :[mask] "r"(mask));
 132:src/../h/Riscv.hpp **** }
 133:src/../h/Riscv.hpp **** 
 134:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 135:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sstatus, %[mask]": :[mask] "r"(mask));
 106              		.loc 2 135 2
 107              		.loc 2 135 62 is_stmt 0
 108 00b0 93070010 		li	a5,256
 109              	#APP
 110              	# 135 "src/../h/Riscv.hpp" 1
 136              	}
 111              		csrc sstatus, a5
 112              	# 0 "" 2
 113              		.loc 2 136 1
 114              	#NO_APP
 115 00b8 6F00C001 		j	.L7
 116              	.LVL6:
 117              	.L10:
 118              	.LBE22:
 119              	.LBE21:
  28:src/TCB.cpp   ****     }
 120              		.loc 1 28 9 is_stmt 1
  28:src/TCB.cpp   ****     }
 121              		.loc 1 28 23 is_stmt 0
 122 00bc 13850400 		mv	a0,s1
 123 00c0 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 123      E7800000 
 124              	.LVL7:
 125 00c8 6FF05FFA 		j	.L4
 126              	.L5:
  37:src/TCB.cpp   ****     } else {
GAS LISTING /tmp/ccMwiodn.s 			page 7


 127              		.loc 1 37 9 is_stmt 1
 128              	.LVL8:
 129              	.LBB23:
 130              	.LBB24:
 131:src/../h/Riscv.hpp **** }
 131              		.loc 2 131 2
 131:src/../h/Riscv.hpp **** }
 132              		.loc 2 131 62 is_stmt 0
 133 00cc 93070010 		li	a5,256
 134              	#APP
 135              	# 131 "src/../h/Riscv.hpp" 1
 136              		csrs sstatus, a5
 137              	# 0 "" 2
 138              	.LVL9:
 139              	#NO_APP
 140              	.L7:
 141              	.LBE24:
 142              	.LBE23:
  42:src/TCB.cpp   **** }
 143              		.loc 1 42 5 is_stmt 1
 144 00d4 6388B400 		beq	s1,a1,.L3
  42:src/TCB.cpp   **** }
 145              		.loc 1 42 30 discriminator 1
  42:src/TCB.cpp   **** }
 146              		.loc 1 42 48 is_stmt 0 discriminator 1
 147 00d8 13850400 		mv	a0,s1
 148 00dc 97000000 		call	_ZN3TCB13contextSwitchEPNS_7ContextES1_@plt
 148      E7800000 
 149              	.LVL10:
 150              	.L3:
  43:src/TCB.cpp   **** 
 151              		.loc 1 43 1
 152 00e4 83308101 		ld	ra,24(sp)
 153              		.cfi_restore 1
 154 00e8 03340101 		ld	s0,16(sp)
 155              		.cfi_restore 8
 156              		.cfi_def_cfa 2, 32
 157 00ec 83348100 		ld	s1,8(sp)
 158              		.cfi_restore 9
 159              	.LVL11:
 160 00f0 13010102 		addi	sp,sp,32
 161              		.cfi_def_cfa_offset 0
 162 00f4 67800000 		jr	ra
 163              		.cfi_endproc
 164              	.LFE45:
 166              		.align	2
 167              		.globl	_ZN3TCBnwEm
 169              	_ZN3TCBnwEm:
 170              	.LFB47:
  54:src/TCB.cpp   **** 
  55:src/TCB.cpp   **** void* TCB::operator new(size_t size) {
 171              		.loc 1 55 38 is_stmt 1
 172              		.cfi_startproc
 173              	.LVL12:
 174 00f8 130101FF 		addi	sp,sp,-16
 175              		.cfi_def_cfa_offset 16
 176 00fc 23341100 		sd	ra,8(sp)
GAS LISTING /tmp/ccMwiodn.s 			page 8


 177 0100 23308100 		sd	s0,0(sp)
 178              		.cfi_offset 1, -8
 179              		.cfi_offset 8, -16
 180 0104 13040101 		addi	s0,sp,16
 181              		.cfi_def_cfa 8, 0
  56:src/TCB.cpp   ****     return mem_alloc(size);
 182              		.loc 1 56 5
 183              		.loc 1 56 21 is_stmt 0
 184 0108 97000000 		call	_Z9mem_allocm@plt
 184      E7800000 
 185              	.LVL13:
  57:src/TCB.cpp   **** }
 186              		.loc 1 57 1
 187 0110 83308100 		ld	ra,8(sp)
 188              		.cfi_restore 1
 189 0114 03340100 		ld	s0,0(sp)
 190              		.cfi_restore 8
 191              		.cfi_def_cfa 2, 16
 192 0118 13010101 		addi	sp,sp,16
 193              		.cfi_def_cfa_offset 0
 194 011c 67800000 		jr	ra
 195              		.cfi_endproc
 196              	.LFE47:
 198              		.align	2
 199              		.globl	_ZN3TCB12createThreadEPFvPvES0_Pm
 201              	_ZN3TCB12createThreadEPFvPvES0_Pm:
 202              	.LFB44:
  20:src/TCB.cpp   ****     TCB* newThread = new TCB(function, args, stack);
 203              		.loc 1 20 71 is_stmt 1
 204              		.cfi_startproc
 205              	.LVL14:
 206 0120 130101FD 		addi	sp,sp,-48
 207              		.cfi_def_cfa_offset 48
 208 0124 23341102 		sd	ra,40(sp)
 209 0128 23308102 		sd	s0,32(sp)
 210 012c 233C9100 		sd	s1,24(sp)
 211 0130 23382101 		sd	s2,16(sp)
 212 0134 23343101 		sd	s3,8(sp)
 213              		.cfi_offset 1, -8
 214              		.cfi_offset 8, -16
 215              		.cfi_offset 9, -24
 216              		.cfi_offset 18, -32
 217              		.cfi_offset 19, -40
 218 0138 13040103 		addi	s0,sp,48
 219              		.cfi_def_cfa 8, 0
 220 013c 13090500 		mv	s2,a0
 221 0140 93890500 		mv	s3,a1
 222 0144 93040600 		mv	s1,a2
  21:src/TCB.cpp   ****     return newThread;
 223              		.loc 1 21 5
  21:src/TCB.cpp   ****     return newThread;
 224              		.loc 1 21 51 is_stmt 0
 225 0148 13050006 		li	a0,96
 226              	.LVL15:
 227 014c 97000000 		call	_ZN3TCBnwEm
 227      E7800000 
 228              	.LVL16:
GAS LISTING /tmp/ccMwiodn.s 			page 9


 229              	.LBB25:
 230              	.LBB26:
 231              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 5/23/23.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJEKAT2023_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJEKAT2023_TCB_HPP
   7:src/../h/TCB.hpp **** 
   8:src/../h/TCB.hpp **** #include "../lib/hw.h"
   9:src/../h/TCB.hpp **** #include "../h/ThreadQueue.hpp"
  10:src/../h/TCB.hpp **** 
  11:src/../h/TCB.hpp **** int main();
  12:src/../h/TCB.hpp **** class TCB {
  13:src/../h/TCB.hpp **** public:
  14:src/../h/TCB.hpp ****     friend class Scheduler;
  15:src/../h/TCB.hpp **** 
  16:src/../h/TCB.hpp ****     using Body = void (*)(void*);
  17:src/../h/TCB.hpp **** 
  18:src/../h/TCB.hpp ****     enum ThreadStatus {
  19:src/../h/TCB.hpp ****         CREATED, ACTIVE, BLOCKED, JOINING, SLEEPING, FINISHED
  20:src/../h/TCB.hpp ****     };
  21:src/../h/TCB.hpp **** 
  22:src/../h/TCB.hpp ****     void setStatus(ThreadStatus stat) { this->status = stat; }
  23:src/../h/TCB.hpp **** 
  24:src/../h/TCB.hpp ****     ThreadStatus getStatus() { return this->status; }
  25:src/../h/TCB.hpp **** 
  26:src/../h/TCB.hpp ****     static TCB* createThread(Body function, void* args, uint64* stack);
  27:src/../h/TCB.hpp **** 
  28:src/../h/TCB.hpp ****     static void start(TCB* newTcb);
  29:src/../h/TCB.hpp **** 
  30:src/../h/TCB.hpp ****     uint64 getTimeSlice() { return timeSlice; }
  31:src/../h/TCB.hpp **** 
  32:src/../h/TCB.hpp ****     void setTimeSlice(uint64 value) { timeSlice = value; }
  33:src/../h/TCB.hpp **** 
  34:src/../h/TCB.hpp ****     Body getBody() { return threadFunction; }
  35:src/../h/TCB.hpp **** 
  36:src/../h/TCB.hpp ****     static TCB* getRunning() { return running; }
  37:src/../h/TCB.hpp **** 
  38:src/../h/TCB.hpp ****     static void setRunning(TCB* newRunning) { running = newRunning; }
  39:src/../h/TCB.hpp **** 
  40:src/../h/TCB.hpp ****     static uint64 &getRunningTimeSlice() { return runningTimeSlice; }
  41:src/../h/TCB.hpp **** 
  42:src/../h/TCB.hpp ****     static void threadJoin(TCB* handle);
  43:src/../h/TCB.hpp **** 
  44:src/../h/TCB.hpp ****     static void releaseJoined();
  45:src/../h/TCB.hpp **** 
  46:src/../h/TCB.hpp ****     static void dispatch();
  47:src/../h/TCB.hpp **** 
  48:src/../h/TCB.hpp ****     static void wrapper();
  49:src/../h/TCB.hpp **** 
  50:src/../h/TCB.hpp **** 
  51:src/../h/TCB.hpp ****     static void* operator new(size_t size);
  52:src/../h/TCB.hpp **** 
  53:src/../h/TCB.hpp ****     static void operator delete(void* ptr);
  54:src/../h/TCB.hpp **** 
GAS LISTING /tmp/ccMwiodn.s 			page 10


  55:src/../h/TCB.hpp **** private:
  56:src/../h/TCB.hpp ****     TCB(Body function, void* args, uint64* stack) : threadFunction(function), stack(stack), args(ar
  57:src/../h/TCB.hpp ****                                                     timeSlice(DEFAULT_TIME_SLICE), nextInScheduler(
  58:src/../h/TCB.hpp ****                                                     timeToSleep(0),
  59:src/../h/TCB.hpp ****                                                     nextSleeping(nullptr), status(CREATED) {
 232              		.loc 3 59 90
 233 0154 23382501 		sd	s2,16(a0)
 234 0158 233C9500 		sd	s1,24(a0)
 235 015c 23303503 		sd	s3,32(a0)
 236 0160 93072000 		li	a5,2
 237 0164 2334F502 		sd	a5,40(a0)
 238 0168 23380502 		sd	zero,48(a0)
 239 016c 233C0502 		sd	zero,56(a0)
 240 0170 23300504 		sd	zero,64(a0)
 241              	.LVL17:
 242              	.LBB27:
 243              	.LBB28:
 244              		.file 4 "src/../h/../h/ThreadQueue.hpp"
   1:src/../h/../h/ThreadQueue.hpp **** //
   2:src/../h/../h/ThreadQueue.hpp **** // Created by os on 6/4/23.
   3:src/../h/../h/ThreadQueue.hpp **** //
   4:src/../h/../h/ThreadQueue.hpp **** 
   5:src/../h/../h/ThreadQueue.hpp **** #ifndef PROJEKAT2023_THREADQUEUE_HPP
   6:src/../h/../h/ThreadQueue.hpp **** #define PROJEKAT2023_THREADQUEUE_HPP
   7:src/../h/../h/ThreadQueue.hpp **** 
   8:src/../h/../h/ThreadQueue.hpp **** #include "../h/syscall_c.hpp"
   9:src/../h/../h/ThreadQueue.hpp **** 
  10:src/../h/../h/ThreadQueue.hpp **** class TCB;
  11:src/../h/../h/ThreadQueue.hpp **** 
  12:src/../h/../h/ThreadQueue.hpp **** class ThreadQueue {
  13:src/../h/../h/ThreadQueue.hpp **** private:
  14:src/../h/../h/ThreadQueue.hpp ****     struct Node {
  15:src/../h/../h/ThreadQueue.hpp ****         TCB* data;
  16:src/../h/../h/ThreadQueue.hpp ****         Node* next;
  17:src/../h/../h/ThreadQueue.hpp **** 
  18:src/../h/../h/ThreadQueue.hpp ****         Node(TCB* d) : data(d), next(nullptr) {}
  19:src/../h/../h/ThreadQueue.hpp **** 
  20:src/../h/../h/ThreadQueue.hpp ****         static void* operator new(size_t size) {
  21:src/../h/../h/ThreadQueue.hpp ****             return mem_alloc(size);
  22:src/../h/../h/ThreadQueue.hpp ****         }
  23:src/../h/../h/ThreadQueue.hpp **** 
  24:src/../h/../h/ThreadQueue.hpp ****         static void operator delete(void* ptr) {
  25:src/../h/../h/ThreadQueue.hpp ****             mem_free(ptr);
  26:src/../h/../h/ThreadQueue.hpp ****         }
  27:src/../h/../h/ThreadQueue.hpp ****     };
  28:src/../h/../h/ThreadQueue.hpp **** 
  29:src/../h/../h/ThreadQueue.hpp ****     Node* front;
  30:src/../h/../h/ThreadQueue.hpp ****     Node* back;
  31:src/../h/../h/ThreadQueue.hpp **** 
  32:src/../h/../h/ThreadQueue.hpp **** public:
  33:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue() : front(nullptr), back(nullptr) {}
 245              		.loc 4 33 49
 246 0174 23340504 		sd	zero,72(a0)
 247 0178 23380504 		sd	zero,80(a0)
 248              	.LVL18:
 249              	.LBE28:
 250              	.LBE27:
GAS LISTING /tmp/ccMwiodn.s 			page 11


 251              		.loc 3 59 90
 252 017c 232C0504 		sw	zero,88(a0)
 253              	.LBB29:
  60:src/../h/TCB.hpp ****         //formiranje pocetnog konteksta;
  61:src/../h/TCB.hpp ****         //specijalni uslovi za main funkciju kojoj se pocetni kontekst automatski formira
  62:src/../h/TCB.hpp ****         uint64 startRa = threadFunction != (TCB::Body)main ? (uint64)&wrapper : 0;
 254              		.loc 3 62 9 is_stmt 1
 255              		.loc 3 62 60 is_stmt 0
 256 0180 97070000 		la	a5,main
 256      83B70700 
 257 0188 630EF902 		beq	s2,a5,.L16
 258 018c 97070000 		lla	a5,_ZN3TCB7wrapperEv
 258      93870700 
 259              	.L14:
 260              	.LVL19:
  63:src/../h/TCB.hpp ****         uint64 startSp = stack != nullptr ? (uint64)((char*)stack + DEFAULT_STACK_SIZE) : 0;
 261              		.loc 3 63 9 is_stmt 1
 262              		.loc 3 63 43 is_stmt 0
 263 0194 638C0402 		beqz	s1,.L17
 264              		.loc 3 63 67
 265 0198 37160000 		li	a2,4096
 266 019c B384C400 		add	s1,s1,a2
 267              	.LVL20:
 268              	.L15:
  64:src/../h/TCB.hpp ****         this->context.ra = startRa;
 269              		.loc 3 64 9 is_stmt 1
 270              		.loc 3 64 26 is_stmt 0
 271 01a0 2330F500 		sd	a5,0(a0)
  65:src/../h/TCB.hpp ****         this->context.sp = startSp;
 272              		.loc 3 65 9 is_stmt 1
 273              		.loc 3 65 26 is_stmt 0
 274 01a4 23349500 		sd	s1,8(a0)
 275              	.LVL21:
 276              	.LBE29:
 277              	.LBE26:
 278              	.LBE25:
  22:src/TCB.cpp   **** }
 279              		.loc 1 22 5 is_stmt 1
  23:src/TCB.cpp   **** 
 280              		.loc 1 23 1 is_stmt 0
 281 01a8 83308102 		ld	ra,40(sp)
 282              		.cfi_remember_state
 283              		.cfi_restore 1
 284 01ac 03340102 		ld	s0,32(sp)
 285              		.cfi_restore 8
 286              		.cfi_def_cfa 2, 48
 287 01b0 83348101 		ld	s1,24(sp)
 288              		.cfi_restore 9
 289              	.LVL22:
 290 01b4 03390101 		ld	s2,16(sp)
 291              		.cfi_restore 18
 292              	.LVL23:
 293 01b8 83398100 		ld	s3,8(sp)
 294              		.cfi_restore 19
 295              	.LVL24:
 296 01bc 13010103 		addi	sp,sp,48
 297              		.cfi_def_cfa_offset 0
GAS LISTING /tmp/ccMwiodn.s 			page 12


 298 01c0 67800000 		jr	ra
 299              	.LVL25:
 300              	.L16:
 301              		.cfi_restore_state
 302              	.LBB32:
 303              	.LBB31:
 304              	.LBB30:
  62:src/../h/TCB.hpp ****         uint64 startSp = stack != nullptr ? (uint64)((char*)stack + DEFAULT_STACK_SIZE) : 0;
 305              		.loc 3 62 60
 306 01c4 93070000 		li	a5,0
 307 01c8 6FF0DFFC 		j	.L14
 308              	.LVL26:
 309              	.L17:
  63:src/../h/TCB.hpp ****         this->context.ra = startRa;
 310              		.loc 3 63 43
 311 01cc 93040000 		li	s1,0
 312              	.LVL27:
 313 01d0 6FF01FFD 		j	.L15
 314              	.LBE30:
 315              	.LBE31:
 316              	.LBE32:
 317              		.cfi_endproc
 318              	.LFE44:
 320              		.align	2
 321              		.globl	_ZN3TCBdlEPv
 323              	_ZN3TCBdlEPv:
 324              	.LFB48:
  58:src/TCB.cpp   **** 
  59:src/TCB.cpp   **** void TCB::operator delete(void* ptr) {
 325              		.loc 1 59 38 is_stmt 1
 326              		.cfi_startproc
 327              	.LVL28:
 328 01d4 130101FF 		addi	sp,sp,-16
 329              		.cfi_def_cfa_offset 16
 330 01d8 23341100 		sd	ra,8(sp)
 331 01dc 23308100 		sd	s0,0(sp)
 332              		.cfi_offset 1, -8
 333              		.cfi_offset 8, -16
 334 01e0 13040101 		addi	s0,sp,16
 335              		.cfi_def_cfa 8, 0
  60:src/TCB.cpp   ****     mem_free(ptr);
 336              		.loc 1 60 5
 337              		.loc 1 60 13 is_stmt 0
 338 01e4 97000000 		call	_Z8mem_freePv@plt
 338      E7800000 
 339              	.LVL29:
  61:src/TCB.cpp   **** }
 340              		.loc 1 61 1
 341 01ec 83308100 		ld	ra,8(sp)
 342              		.cfi_restore 1
 343 01f0 03340100 		ld	s0,0(sp)
 344              		.cfi_restore 8
 345              		.cfi_def_cfa 2, 16
 346 01f4 13010101 		addi	sp,sp,16
 347              		.cfi_def_cfa_offset 0
 348 01f8 67800000 		jr	ra
 349              		.cfi_endproc
GAS LISTING /tmp/ccMwiodn.s 			page 13


 350              	.LFE48:
 352              		.align	2
 353              		.globl	_ZN3TCB10threadJoinEPS_
 355              	_ZN3TCB10threadJoinEPS_:
 356              	.LFB49:
  62:src/TCB.cpp   **** 
  63:src/TCB.cpp   **** void TCB::threadJoin(TCB* handle) {
 357              		.loc 1 63 35 is_stmt 1
 358              		.cfi_startproc
 359              	.LVL30:
  64:src/TCB.cpp   ****     if (handle->status == FINISHED || TCB::running == handle) return;
 360              		.loc 1 64 5
 361              		.loc 1 64 17 is_stmt 0
 362 01fc 03278505 		lw	a4,88(a0)
 363              		.loc 1 64 5
 364 0200 93075000 		li	a5,5
 365 0204 6302F704 		beq	a4,a5,.L24
 366              		.loc 1 64 52 discriminator 2
 367 0208 97050000 		ld	a1,.LANCHOR0
 367      83B50500 
 368              		.loc 1 64 36 discriminator 2
 369 0210 638CA502 		beq	a1,a0,.L24
  63:src/TCB.cpp   ****     if (handle->status == FINISHED || TCB::running == handle) return;
 370              		.loc 1 63 35
 371 0214 130101FF 		addi	sp,sp,-16
 372              		.cfi_def_cfa_offset 16
 373 0218 23341100 		sd	ra,8(sp)
 374 021c 23308100 		sd	s0,0(sp)
 375              		.cfi_offset 1, -8
 376              		.cfi_offset 8, -16
 377 0220 13040101 		addi	s0,sp,16
 378              		.cfi_def_cfa 8, 0
  65:src/TCB.cpp   ****     TCB::running->status = JOINING;
 379              		.loc 1 65 5 is_stmt 1
 380              		.loc 1 65 26 is_stmt 0
 381 0224 93073000 		li	a5,3
 382 0228 23ACF504 		sw	a5,88(a1)
  66:src/TCB.cpp   ****     handle->waitingToJoin.putLast(TCB::running);
 383              		.loc 1 66 5 is_stmt 1
 384              		.loc 1 66 34 is_stmt 0
 385 022c 13058504 		addi	a0,a0,72
 386              	.LVL31:
 387 0230 97000000 		call	_ZN11ThreadQueue7putLastEP3TCB@plt
 387      E7800000 
 388              	.LVL32:
  67:src/TCB.cpp   **** }
 389              		.loc 1 67 1
 390 0238 83308100 		ld	ra,8(sp)
 391              		.cfi_restore 1
 392 023c 03340100 		ld	s0,0(sp)
 393              		.cfi_restore 8
 394              		.cfi_def_cfa 2, 16
 395 0240 13010101 		addi	sp,sp,16
 396              		.cfi_def_cfa_offset 0
 397 0244 67800000 		jr	ra
 398              	.LVL33:
 399              	.L24:
GAS LISTING /tmp/ccMwiodn.s 			page 14


 400 0248 67800000 		ret
 401              		.cfi_endproc
 402              	.LFE49:
 404              		.align	2
 405              		.globl	_ZN3TCB13releaseJoinedEv
 407              	_ZN3TCB13releaseJoinedEv:
 408              	.LFB50:
  68:src/TCB.cpp   **** 
  69:src/TCB.cpp   **** void TCB::releaseJoined() {
 409              		.loc 1 69 27 is_stmt 1
 410              		.cfi_startproc
  70:src/TCB.cpp   ****     while (!TCB::running->waitingToJoin.isEmpty()) {
 411              		.loc 1 70 5
 412              		.loc 1 70 12
 413              		.loc 1 70 27 is_stmt 0
 414 024c 17050000 		ld	a0,.LANCHOR0
 414      03350500 
 415              	.LVL34:
 416              	.LBB33:
 417              	.LBB34:
  34:src/../h/../h/ThreadQueue.hpp **** 
  35:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue(const ThreadQueue &) = delete;
  36:src/../h/../h/ThreadQueue.hpp **** 
  37:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue &operator=(const ThreadQueue &) = delete;
  38:src/../h/../h/ThreadQueue.hpp **** 
  39:src/../h/../h/ThreadQueue.hpp ****     ~ThreadQueue() {
  40:src/../h/../h/ThreadQueue.hpp ****         while (!isEmpty()) {
  41:src/../h/../h/ThreadQueue.hpp ****             Node* node = front;
  42:src/../h/../h/ThreadQueue.hpp ****             front = front->next;
  43:src/../h/../h/ThreadQueue.hpp ****             delete node;
  44:src/../h/../h/ThreadQueue.hpp ****         }
  45:src/../h/../h/ThreadQueue.hpp ****     }
  46:src/../h/../h/ThreadQueue.hpp **** 
  47:src/../h/../h/ThreadQueue.hpp ****     bool isEmpty() const {
  48:src/../h/../h/ThreadQueue.hpp ****         return front == nullptr;
 418              		.loc 4 48 9 is_stmt 1
 419              		.loc 4 48 16 is_stmt 0
 420 0254 83378504 		ld	a5,72(a0)
 421              	.LVL35:
 422              	.LBE34:
 423              	.LBE33:
 424              		.loc 1 70 12
 425 0258 63840704 		beqz	a5,.L35
  69:src/TCB.cpp   ****     while (!TCB::running->waitingToJoin.isEmpty()) {
 426              		.loc 1 69 27
 427 025c 130101FF 		addi	sp,sp,-16
 428              		.cfi_def_cfa_offset 16
 429 0260 23341100 		sd	ra,8(sp)
 430 0264 23308100 		sd	s0,0(sp)
 431              		.cfi_offset 1, -8
 432              		.cfi_offset 8, -16
 433 0268 13040101 		addi	s0,sp,16
 434              		.cfi_def_cfa 8, 0
 435              	.L31:
 436              	.LBB36:
  71:src/TCB.cpp   ****         TCB* tcb = TCB::running->waitingToJoin.getFirst();
 437              		.loc 1 71 9 is_stmt 1
GAS LISTING /tmp/ccMwiodn.s 			page 15


 438              		.loc 1 71 56 is_stmt 0
 439 026c 13058504 		addi	a0,a0,72
 440 0270 97000000 		call	_ZN11ThreadQueue8getFirstEv@plt
 440      E7800000 
 441              	.LVL36:
  72:src/TCB.cpp   ****         Scheduler::put(tcb);
 442              		.loc 1 72 9 is_stmt 1
 443              		.loc 1 72 23 is_stmt 0
 444 0278 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 444      E7800000 
 445              	.LVL37:
 446              	.LBE36:
  70:src/TCB.cpp   ****         TCB* tcb = TCB::running->waitingToJoin.getFirst();
 447              		.loc 1 70 5 is_stmt 1
  70:src/TCB.cpp   ****         TCB* tcb = TCB::running->waitingToJoin.getFirst();
 448              		.loc 1 70 12
  70:src/TCB.cpp   ****         TCB* tcb = TCB::running->waitingToJoin.getFirst();
 449              		.loc 1 70 27 is_stmt 0
 450 0280 17050000 		ld	a0,.LANCHOR0
 450      03350500 
 451              	.LVL38:
 452              	.LBB37:
 453              	.LBB35:
 454              		.loc 4 48 9 is_stmt 1
 455              		.loc 4 48 16 is_stmt 0
 456 0288 83378504 		ld	a5,72(a0)
 457              	.LVL39:
 458              	.LBE35:
 459              	.LBE37:
  70:src/TCB.cpp   ****         TCB* tcb = TCB::running->waitingToJoin.getFirst();
 460              		.loc 1 70 12
 461 028c E39007FE 		bnez	a5,.L31
  73:src/TCB.cpp   ****     }
  74:src/TCB.cpp   **** }
 462              		.loc 1 74 1
 463 0290 83308100 		ld	ra,8(sp)
 464              		.cfi_restore 1
 465 0294 03340100 		ld	s0,0(sp)
 466              		.cfi_restore 8
 467              		.cfi_def_cfa 2, 16
 468 0298 13010101 		addi	sp,sp,16
 469              		.cfi_def_cfa_offset 0
 470 029c 67800000 		jr	ra
 471              	.L35:
 472 02a0 67800000 		ret
 473              		.cfi_endproc
 474              	.LFE50:
 476              		.align	2
 477              		.globl	_ZN3TCB5startEPS_
 479              	_ZN3TCB5startEPS_:
 480              	.LFB51:
  75:src/TCB.cpp   **** 
  76:src/TCB.cpp   **** void TCB::start(TCB* newTcb) {
 481              		.loc 1 76 30 is_stmt 1
 482              		.cfi_startproc
 483              	.LVL40:
  77:src/TCB.cpp   ****     //startovanje niti(stavljanje u Scheduler); main nit je vec aktivna, ne stavlja se u Scheduler
GAS LISTING /tmp/ccMwiodn.s 			page 16


  78:src/TCB.cpp   ****     if (newTcb->threadFunction != (TCB::Body)main) {
 484              		.loc 1 78 5
 485              		.loc 1 78 17 is_stmt 0
 486 02a4 03370501 		ld	a4,16(a0)
 487              		.loc 1 78 5
 488 02a8 97070000 		la	a5,main
 488      83B70700 
 489 02b0 6306F702 		beq	a4,a5,.L39
  76:src/TCB.cpp   ****     //startovanje niti(stavljanje u Scheduler); main nit je vec aktivna, ne stavlja se u Scheduler
 490              		.loc 1 76 30
 491 02b4 130101FF 		addi	sp,sp,-16
 492              		.cfi_def_cfa_offset 16
 493 02b8 23341100 		sd	ra,8(sp)
 494 02bc 23308100 		sd	s0,0(sp)
 495              		.cfi_offset 1, -8
 496              		.cfi_offset 8, -16
 497 02c0 13040101 		addi	s0,sp,16
 498              		.cfi_def_cfa 8, 0
  79:src/TCB.cpp   ****         Scheduler::put(newTcb);
 499              		.loc 1 79 9 is_stmt 1
 500              		.loc 1 79 23 is_stmt 0
 501 02c4 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 501      E7800000 
 502              	.LVL41:
  80:src/TCB.cpp   ****     }
  81:src/TCB.cpp   **** }
 503              		.loc 1 81 1
 504 02cc 83308100 		ld	ra,8(sp)
 505              		.cfi_restore 1
 506 02d0 03340100 		ld	s0,0(sp)
 507              		.cfi_restore 8
 508              		.cfi_def_cfa 2, 16
 509 02d4 13010101 		addi	sp,sp,16
 510              		.cfi_def_cfa_offset 0
 511 02d8 67800000 		jr	ra
 512              	.LVL42:
 513              	.L39:
 514 02dc 67800000 		ret
 515              		.cfi_endproc
 516              	.LFE51:
 518              		.globl	_ZN3TCB16runningTimeSliceE
 519              		.globl	_ZN3TCB7runningE
 520              		.bss
 521              		.align	3
 522              		.set	.LANCHOR0,. + 0
 525              	_ZN3TCB7runningE:
 526 0000 00000000 		.zero	8
 526      00000000 
 529              	_ZN3TCB16runningTimeSliceE:
 530 0008 00000000 		.zero	8
 530      00000000 
 531              		.text
 532              	.Letext0:
 533              		.file 5 "src/../h/../lib/hw.h"
 534              		.file 6 "src/../h/Scheduler.hpp"
 535              		.file 7 "src/../h/../h/../h/syscall_c.hpp"
GAS LISTING /tmp/ccMwiodn.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 TCB.cpp
     /tmp/ccMwiodn.s:9      .text:0000000000000000 _ZN3TCB7wrapperEv
     /tmp/ccMwiodn.s:13     .text:0000000000000000 .L0 
     /tmp/ccMwiodn.s:14     .text:0000000000000000 .L0 
     /tmp/ccMwiodn.s:15     .text:0000000000000004 .L0 
     /tmp/ccMwiodn.s:18     .text:000000000000000c .L0 
     /tmp/ccMwiodn.s:19     .text:000000000000000c .L0 
     /tmp/ccMwiodn.s:21     .text:0000000000000010 .L0 
     /tmp/ccMwiodn.s:23     .text:0000000000000010 .L0 
     /tmp/ccMwiodn.s:24     .text:0000000000000010 .L0 
     /tmp/ccMwiodn.s:27     .text:0000000000000018 .L0 
     /tmp/ccMwiodn.s:28     .text:0000000000000018 .L0 
     /tmp/ccMwiodn.s:31     .text:0000000000000024 .L0 
     /tmp/ccMwiodn.s:35     .text:000000000000002c .L0 
     /tmp/ccMwiodn.s:36     .text:000000000000002c .L0 
     /tmp/ccMwiodn.s:39     .text:0000000000000034 .L0 
     /tmp/ccMwiodn.s:40     .text:0000000000000038 .L0 
     /tmp/ccMwiodn.s:42     .text:000000000000003c .L0 
     /tmp/ccMwiodn.s:43     .text:000000000000003c .L0 
     /tmp/ccMwiodn.s:45     .text:0000000000000040 .L0 
     /tmp/ccMwiodn.s:47     .text:0000000000000044 .L0 
     /tmp/ccMwiodn.s:53     .text:0000000000000044 _ZN3TCB8dispatchEv
     /tmp/ccMwiodn.s:56     .text:0000000000000044 .L0 
     /tmp/ccMwiodn.s:57     .text:0000000000000044 .L0 
     /tmp/ccMwiodn.s:58     .text:0000000000000048 .L0 
     /tmp/ccMwiodn.s:62     .text:0000000000000054 .L0 
     /tmp/ccMwiodn.s:63     .text:0000000000000054 .L0 
     /tmp/ccMwiodn.s:64     .text:0000000000000054 .L0 
     /tmp/ccMwiodn.s:66     .text:0000000000000058 .L0 
     /tmp/ccMwiodn.s:68     .text:0000000000000058 .L0 
     /tmp/ccMwiodn.s:69     .text:0000000000000058 .L0 
     /tmp/ccMwiodn.s:72     .text:0000000000000060 .L0 
     /tmp/ccMwiodn.s:73     .text:0000000000000060 .L0 
     /tmp/ccMwiodn.s:75     .text:0000000000000064 .L0 
     /tmp/ccMwiodn.s:79     .text:000000000000006c .L0 
     /tmp/ccMwiodn.s:80     .text:000000000000006c .L0 
     /tmp/ccMwiodn.s:84     .text:0000000000000078 .L0 
     /tmp/ccMwiodn.s:87     .text:0000000000000084 .L0 
     /tmp/ccMwiodn.s:88     .text:0000000000000084 .L0 
     /tmp/ccMwiodn.s:90     .text:0000000000000088 .L0 
     /tmp/ccMwiodn.s:91     .text:0000000000000088 .L0 
     /tmp/ccMwiodn.s:93     .text:000000000000008c .L0 
     /tmp/ccMwiodn.s:96     .text:0000000000000098 .L0 
     /tmp/ccMwiodn.s:99     .text:00000000000000a4 .L0 
     /tmp/ccMwiodn.s:106    .text:00000000000000b0 .L0 
     /tmp/ccMwiodn.s:107    .text:00000000000000b0 .L0 
     /tmp/ccMwiodn.s:108    .text:00000000000000b0 .L0 
     /tmp/ccMwiodn.s:115    .text:00000000000000b8 .L0 
     /tmp/ccMwiodn.s:121    .text:00000000000000bc .L0 
     /tmp/ccMwiodn.s:122    .text:00000000000000bc .L0 
     /tmp/ccMwiodn.s:131    .text:00000000000000cc .L0 
     /tmp/ccMwiodn.s:132    .text:00000000000000cc .L0 
     /tmp/ccMwiodn.s:133    .text:00000000000000cc .L0 
     /tmp/ccMwiodn.s:144    .text:00000000000000d4 .L0 
     /tmp/ccMwiodn.s:146    .text:00000000000000d8 .L0 
     /tmp/ccMwiodn.s:147    .text:00000000000000d8 .L0 
GAS LISTING /tmp/ccMwiodn.s 			page 18


     /tmp/ccMwiodn.s:152    .text:00000000000000e4 .L0 
     /tmp/ccMwiodn.s:153    .text:00000000000000e8 .L0 
     /tmp/ccMwiodn.s:155    .text:00000000000000ec .L0 
     /tmp/ccMwiodn.s:156    .text:00000000000000ec .L0 
     /tmp/ccMwiodn.s:158    .text:00000000000000f0 .L0 
     /tmp/ccMwiodn.s:161    .text:00000000000000f4 .L0 
     /tmp/ccMwiodn.s:163    .text:00000000000000f8 .L0 
     /tmp/ccMwiodn.s:169    .text:00000000000000f8 _ZN3TCBnwEm
     /tmp/ccMwiodn.s:172    .text:00000000000000f8 .L0 
     /tmp/ccMwiodn.s:174    .text:00000000000000f8 .L0 
     /tmp/ccMwiodn.s:175    .text:00000000000000fc .L0 
     /tmp/ccMwiodn.s:178    .text:0000000000000104 .L0 
     /tmp/ccMwiodn.s:179    .text:0000000000000104 .L0 
     /tmp/ccMwiodn.s:181    .text:0000000000000108 .L0 
     /tmp/ccMwiodn.s:183    .text:0000000000000108 .L0 
     /tmp/ccMwiodn.s:184    .text:0000000000000108 .L0 
     /tmp/ccMwiodn.s:187    .text:0000000000000110 .L0 
     /tmp/ccMwiodn.s:188    .text:0000000000000114 .L0 
     /tmp/ccMwiodn.s:190    .text:0000000000000118 .L0 
     /tmp/ccMwiodn.s:191    .text:0000000000000118 .L0 
     /tmp/ccMwiodn.s:193    .text:000000000000011c .L0 
     /tmp/ccMwiodn.s:195    .text:0000000000000120 .L0 
     /tmp/ccMwiodn.s:201    .text:0000000000000120 _ZN3TCB12createThreadEPFvPvES0_Pm
     /tmp/ccMwiodn.s:204    .text:0000000000000120 .L0 
     /tmp/ccMwiodn.s:206    .text:0000000000000120 .L0 
     /tmp/ccMwiodn.s:207    .text:0000000000000124 .L0 
     /tmp/ccMwiodn.s:213    .text:0000000000000138 .L0 
     /tmp/ccMwiodn.s:214    .text:0000000000000138 .L0 
     /tmp/ccMwiodn.s:215    .text:0000000000000138 .L0 
     /tmp/ccMwiodn.s:216    .text:0000000000000138 .L0 
     /tmp/ccMwiodn.s:217    .text:0000000000000138 .L0 
     /tmp/ccMwiodn.s:219    .text:000000000000013c .L0 
     /tmp/ccMwiodn.s:224    .text:0000000000000148 .L0 
     /tmp/ccMwiodn.s:225    .text:0000000000000148 .L0 
     /tmp/ccMwiodn.s:233    .text:0000000000000154 .L0 
     /tmp/ccMwiodn.s:246    .text:0000000000000174 .L0 
     /tmp/ccMwiodn.s:252    .text:000000000000017c .L0 
     /tmp/ccMwiodn.s:255    .text:0000000000000180 .L0 
     /tmp/ccMwiodn.s:256    .text:0000000000000180 .L0 
     /tmp/ccMwiodn.s:262    .text:0000000000000194 .L0 
     /tmp/ccMwiodn.s:263    .text:0000000000000194 .L0 
     /tmp/ccMwiodn.s:265    .text:0000000000000198 .L0 
     /tmp/ccMwiodn.s:270    .text:00000000000001a0 .L0 
     /tmp/ccMwiodn.s:271    .text:00000000000001a0 .L0 
     /tmp/ccMwiodn.s:273    .text:00000000000001a4 .L0 
     /tmp/ccMwiodn.s:274    .text:00000000000001a4 .L0 
     /tmp/ccMwiodn.s:280    .text:00000000000001a8 .L0 
     /tmp/ccMwiodn.s:281    .text:00000000000001a8 .L0 
     /tmp/ccMwiodn.s:282    .text:00000000000001ac .L0 
     /tmp/ccMwiodn.s:283    .text:00000000000001ac .L0 
     /tmp/ccMwiodn.s:285    .text:00000000000001b0 .L0 
     /tmp/ccMwiodn.s:286    .text:00000000000001b0 .L0 
     /tmp/ccMwiodn.s:288    .text:00000000000001b4 .L0 
     /tmp/ccMwiodn.s:291    .text:00000000000001b8 .L0 
     /tmp/ccMwiodn.s:294    .text:00000000000001bc .L0 
     /tmp/ccMwiodn.s:297    .text:00000000000001c0 .L0 
     /tmp/ccMwiodn.s:301    .text:00000000000001c4 .L0 
GAS LISTING /tmp/ccMwiodn.s 			page 19


     /tmp/ccMwiodn.s:306    .text:00000000000001c4 .L0 
     /tmp/ccMwiodn.s:311    .text:00000000000001cc .L0 
     /tmp/ccMwiodn.s:317    .text:00000000000001d4 .L0 
     /tmp/ccMwiodn.s:323    .text:00000000000001d4 _ZN3TCBdlEPv
     /tmp/ccMwiodn.s:326    .text:00000000000001d4 .L0 
     /tmp/ccMwiodn.s:328    .text:00000000000001d4 .L0 
     /tmp/ccMwiodn.s:329    .text:00000000000001d8 .L0 
     /tmp/ccMwiodn.s:332    .text:00000000000001e0 .L0 
     /tmp/ccMwiodn.s:333    .text:00000000000001e0 .L0 
     /tmp/ccMwiodn.s:335    .text:00000000000001e4 .L0 
     /tmp/ccMwiodn.s:337    .text:00000000000001e4 .L0 
     /tmp/ccMwiodn.s:338    .text:00000000000001e4 .L0 
     /tmp/ccMwiodn.s:341    .text:00000000000001ec .L0 
     /tmp/ccMwiodn.s:342    .text:00000000000001f0 .L0 
     /tmp/ccMwiodn.s:344    .text:00000000000001f4 .L0 
     /tmp/ccMwiodn.s:345    .text:00000000000001f4 .L0 
     /tmp/ccMwiodn.s:347    .text:00000000000001f8 .L0 
     /tmp/ccMwiodn.s:349    .text:00000000000001fc .L0 
     /tmp/ccMwiodn.s:355    .text:00000000000001fc _ZN3TCB10threadJoinEPS_
     /tmp/ccMwiodn.s:358    .text:00000000000001fc .L0 
     /tmp/ccMwiodn.s:360    .text:00000000000001fc .L0 
     /tmp/ccMwiodn.s:361    .text:00000000000001fc .L0 
     /tmp/ccMwiodn.s:362    .text:00000000000001fc .L0 
     /tmp/ccMwiodn.s:364    .text:0000000000000200 .L0 
     /tmp/ccMwiodn.s:367    .text:0000000000000208 .L0 
     /tmp/ccMwiodn.s:369    .text:0000000000000210 .L0 
     /tmp/ccMwiodn.s:371    .text:0000000000000214 .L0 
     /tmp/ccMwiodn.s:372    .text:0000000000000218 .L0 
     /tmp/ccMwiodn.s:375    .text:0000000000000220 .L0 
     /tmp/ccMwiodn.s:376    .text:0000000000000220 .L0 
     /tmp/ccMwiodn.s:378    .text:0000000000000224 .L0 
     /tmp/ccMwiodn.s:380    .text:0000000000000224 .L0 
     /tmp/ccMwiodn.s:381    .text:0000000000000224 .L0 
     /tmp/ccMwiodn.s:384    .text:000000000000022c .L0 
     /tmp/ccMwiodn.s:385    .text:000000000000022c .L0 
     /tmp/ccMwiodn.s:390    .text:0000000000000238 .L0 
     /tmp/ccMwiodn.s:391    .text:000000000000023c .L0 
     /tmp/ccMwiodn.s:393    .text:0000000000000240 .L0 
     /tmp/ccMwiodn.s:394    .text:0000000000000240 .L0 
     /tmp/ccMwiodn.s:396    .text:0000000000000244 .L0 
     /tmp/ccMwiodn.s:401    .text:000000000000024c .L0 
     /tmp/ccMwiodn.s:407    .text:000000000000024c _ZN3TCB13releaseJoinedEv
     /tmp/ccMwiodn.s:410    .text:000000000000024c .L0 
     /tmp/ccMwiodn.s:411    .text:000000000000024c .L0 
     /tmp/ccMwiodn.s:412    .text:000000000000024c .L0 
     /tmp/ccMwiodn.s:413    .text:000000000000024c .L0 
     /tmp/ccMwiodn.s:414    .text:000000000000024c .L0 
     /tmp/ccMwiodn.s:419    .text:0000000000000254 .L0 
     /tmp/ccMwiodn.s:420    .text:0000000000000254 .L0 
     /tmp/ccMwiodn.s:425    .text:0000000000000258 .L0 
     /tmp/ccMwiodn.s:427    .text:000000000000025c .L0 
     /tmp/ccMwiodn.s:428    .text:0000000000000260 .L0 
     /tmp/ccMwiodn.s:431    .text:0000000000000268 .L0 
     /tmp/ccMwiodn.s:432    .text:0000000000000268 .L0 
     /tmp/ccMwiodn.s:434    .text:000000000000026c .L0 
     /tmp/ccMwiodn.s:438    .text:000000000000026c .L0 
     /tmp/ccMwiodn.s:439    .text:000000000000026c .L0 
GAS LISTING /tmp/ccMwiodn.s 			page 20


     /tmp/ccMwiodn.s:443    .text:0000000000000278 .L0 
     /tmp/ccMwiodn.s:444    .text:0000000000000278 .L0 
     /tmp/ccMwiodn.s:448    .text:0000000000000280 .L0 
     /tmp/ccMwiodn.s:449    .text:0000000000000280 .L0 
     /tmp/ccMwiodn.s:450    .text:0000000000000280 .L0 
     /tmp/ccMwiodn.s:455    .text:0000000000000288 .L0 
     /tmp/ccMwiodn.s:456    .text:0000000000000288 .L0 
     /tmp/ccMwiodn.s:461    .text:000000000000028c .L0 
     /tmp/ccMwiodn.s:463    .text:0000000000000290 .L0 
     /tmp/ccMwiodn.s:464    .text:0000000000000294 .L0 
     /tmp/ccMwiodn.s:466    .text:0000000000000298 .L0 
     /tmp/ccMwiodn.s:467    .text:0000000000000298 .L0 
     /tmp/ccMwiodn.s:469    .text:000000000000029c .L0 
     /tmp/ccMwiodn.s:473    .text:00000000000002a4 .L0 
     /tmp/ccMwiodn.s:479    .text:00000000000002a4 _ZN3TCB5startEPS_
     /tmp/ccMwiodn.s:482    .text:00000000000002a4 .L0 
     /tmp/ccMwiodn.s:484    .text:00000000000002a4 .L0 
     /tmp/ccMwiodn.s:485    .text:00000000000002a4 .L0 
     /tmp/ccMwiodn.s:486    .text:00000000000002a4 .L0 
     /tmp/ccMwiodn.s:488    .text:00000000000002a8 .L0 
     /tmp/ccMwiodn.s:491    .text:00000000000002b4 .L0 
     /tmp/ccMwiodn.s:492    .text:00000000000002b8 .L0 
     /tmp/ccMwiodn.s:495    .text:00000000000002c0 .L0 
     /tmp/ccMwiodn.s:496    .text:00000000000002c0 .L0 
     /tmp/ccMwiodn.s:498    .text:00000000000002c4 .L0 
     /tmp/ccMwiodn.s:500    .text:00000000000002c4 .L0 
     /tmp/ccMwiodn.s:501    .text:00000000000002c4 .L0 
     /tmp/ccMwiodn.s:504    .text:00000000000002cc .L0 
     /tmp/ccMwiodn.s:505    .text:00000000000002d0 .L0 
     /tmp/ccMwiodn.s:507    .text:00000000000002d4 .L0 
     /tmp/ccMwiodn.s:508    .text:00000000000002d4 .L0 
     /tmp/ccMwiodn.s:510    .text:00000000000002d8 .L0 
     /tmp/ccMwiodn.s:515    .text:00000000000002e0 .L0 
     /tmp/ccMwiodn.s:529    .bss:0000000000000008 _ZN3TCB16runningTimeSliceE
     /tmp/ccMwiodn.s:525    .bss:0000000000000000 _ZN3TCB7runningE
     /tmp/ccMwiodn.s:522    .bss:0000000000000000 .LANCHOR0
     /tmp/ccMwiodn.s:536    .text:00000000000002e0 .L0 
     /tmp/ccMwiodn.s:28     .text:0000000000000018 .L0 
     /tmp/ccMwiodn.s:69     .text:0000000000000058 .L0 
     /tmp/ccMwiodn.s:84     .text:0000000000000078 .L0 
     /tmp/ccMwiodn.s:93     .text:000000000000008c .L0 
     /tmp/ccMwiodn.s:96     .text:0000000000000098 .L0 
     /tmp/ccMwiodn.s:99     .text:00000000000000a4 .L0 
     /tmp/ccMwiodn.s:256    .text:0000000000000180 .L0 
     /tmp/ccMwiodn.s:258    .text:000000000000018c .L0 
     /tmp/ccMwiodn.s:367    .text:0000000000000208 .L0 
     /tmp/ccMwiodn.s:414    .text:000000000000024c .L0 
     /tmp/ccMwiodn.s:450    .text:0000000000000280 .L0 
     /tmp/ccMwiodn.s:488    .text:00000000000002a8 .L0 
     /tmp/ccMwiodn.s:117    .text:00000000000000bc .L10
     /tmp/ccMwiodn.s:126    .text:00000000000000cc .L5
     /tmp/ccMwiodn.s:140    .text:00000000000000d4 .L7
     /tmp/ccMwiodn.s:77     .text:000000000000006c .L4
     /tmp/ccMwiodn.s:150    .text:00000000000000e4 .L3
     /tmp/ccMwiodn.s:300    .text:00000000000001c4 .L16
     /tmp/ccMwiodn.s:309    .text:00000000000001cc .L17
     /tmp/ccMwiodn.s:259    .text:0000000000000194 .L14
GAS LISTING /tmp/ccMwiodn.s 			page 21


     /tmp/ccMwiodn.s:268    .text:00000000000001a0 .L15
     /tmp/ccMwiodn.s:399    .text:0000000000000248 .L24
     /tmp/ccMwiodn.s:471    .text:00000000000002a0 .L35
     /tmp/ccMwiodn.s:435    .text:000000000000026c .L31
     /tmp/ccMwiodn.s:513    .text:00000000000002dc .L39
     /tmp/ccMwiodn.s:2029   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccMwiodn.s:3740   .debug_str:00000000000007cf .LASF163
     /tmp/ccMwiodn.s:3492   .debug_str:00000000000000e9 .LASF164
     /tmp/ccMwiodn.s:3562   .debug_str:00000000000002cb .LASF165
     /tmp/ccMwiodn.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccMwiodn.s:532    .text:00000000000002e0 .Letext0
     /tmp/ccMwiodn.s:3458   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccMwiodn.s:3632   .debug_str:00000000000004c8 .LASF0
     /tmp/ccMwiodn.s:3658   .debug_str:0000000000000555 .LASF1
     /tmp/ccMwiodn.s:3612   .debug_str:000000000000045b .LASF2
     /tmp/ccMwiodn.s:3576   .debug_str:0000000000000366 .LASF4
     /tmp/ccMwiodn.s:3714   .debug_str:0000000000000704 .LASF3
     /tmp/ccMwiodn.s:3488   .debug_str:00000000000000d6 .LASF5
     /tmp/ccMwiodn.s:3530   .debug_str:0000000000000205 .LASF6
     /tmp/ccMwiodn.s:3664   .debug_str:0000000000000589 .LASF7
     /tmp/ccMwiodn.s:3630   .debug_str:00000000000004b5 .LASF8
     /tmp/ccMwiodn.s:3758   .debug_str:000000000000092c .LASF9
     /tmp/ccMwiodn.s:3558   .debug_str:00000000000002b7 .LASF10
     /tmp/ccMwiodn.s:3682   .debug_str:0000000000000608 .LASF11
     /tmp/ccMwiodn.s:3746   .debug_str:00000000000008b0 .LASF12
     /tmp/ccMwiodn.s:3594   .debug_str:00000000000003dc .LASF13
     /tmp/ccMwiodn.s:3468   .debug_str:0000000000000042 .LASF14
     /tmp/ccMwiodn.s:3506   .debug_str:000000000000015b .LASF15
     /tmp/ccMwiodn.s:3706   .debug_str:00000000000006b1 .LASF16
     /tmp/ccMwiodn.s:3522   .debug_str:00000000000001c7 .LASF17
     /tmp/ccMwiodn.s:3500   .debug_str:000000000000012c .LASF93
     /tmp/ccMwiodn.s:3742   .debug_str:0000000000000893 .LASF18
     /tmp/ccMwiodn.s:3772   .debug_str:00000000000009ba .LASF19
     /tmp/ccMwiodn.s:3578   .debug_str:000000000000036d .LASF20
     /tmp/ccMwiodn.s:3486   .debug_str:00000000000000ce .LASF21
     /tmp/ccMwiodn.s:3474   .debug_str:0000000000000072 .LASF22
     /tmp/ccMwiodn.s:3722   .debug_str:0000000000000743 .LASF23
     /tmp/ccMwiodn.s:3472   .debug_str:000000000000006a .LASF69
     /tmp/ccMwiodn.s:3770   .debug_str:00000000000009b0 .LASF24
     /tmp/ccMwiodn.s:3798   .debug_str:0000000000000a7e .LASF26
     /tmp/ccMwiodn.s:3610   .debug_str:0000000000000451 .LASF28
     /tmp/ccMwiodn.s:3524   .debug_str:00000000000001dd .LASF30
     /tmp/ccMwiodn.s:3586   .debug_str:0000000000000391 .LASF25
     /tmp/ccMwiodn.s:3780   .debug_str:00000000000009e5 .LASF27
     /tmp/ccMwiodn.s:3696   .debug_str:000000000000067e .LASF166
     /tmp/ccMwiodn.s:3656   .debug_str:000000000000054f .LASF36
     /tmp/ccMwiodn.s:3684   .debug_str:0000000000000617 .LASF38
     /tmp/ccMwiodn.s:3600   .debug_str:0000000000000409 .LASF29
     /tmp/ccMwiodn.s:3680   .debug_str:00000000000005f0 .LASF31
     /tmp/ccMwiodn.s:3756   .debug_str:000000000000091f .LASF32
     /tmp/ccMwiodn.s:3764   .debug_str:000000000000096f .LASF33
     /tmp/ccMwiodn.s:3626   .debug_str:00000000000004a8 .LASF34
     /tmp/ccMwiodn.s:3588   .debug_str:000000000000039e .LASF35
     /tmp/ccMwiodn.s:3796   .debug_str:0000000000000a73 .LASF40
     /tmp/ccMwiodn.s:3752   .debug_str:00000000000008f3 .LASF42
     /tmp/ccMwiodn.s:3554   .debug_str:00000000000002a6 .LASF37
     /tmp/ccMwiodn.s:3644   .debug_str:00000000000004fd .LASF39
GAS LISTING /tmp/ccMwiodn.s 			page 22


     /tmp/ccMwiodn.s:3592   .debug_str:00000000000003c8 .LASF41
     /tmp/ccMwiodn.s:3462   .debug_str:0000000000000011 .LASF43
     /tmp/ccMwiodn.s:3534   .debug_str:0000000000000214 .LASF44
     /tmp/ccMwiodn.s:3552   .debug_str:000000000000028e .LASF45
     /tmp/ccMwiodn.s:3698   .debug_str:0000000000000683 .LASF46
     /tmp/ccMwiodn.s:3618   .debug_str:0000000000000475 .LASF48
     /tmp/ccMwiodn.s:3636   .debug_str:00000000000004dc .LASF47
     /tmp/ccMwiodn.s:3544   .debug_str:000000000000024f .LASF49
     /tmp/ccMwiodn.s:3726   .debug_str:0000000000000761 .LASF50
     /tmp/ccMwiodn.s:3718   .debug_str:0000000000000726 .LASF51
     /tmp/ccMwiodn.s:3498   .debug_str:000000000000011f .LASF52
     /tmp/ccMwiodn.s:3730   .debug_str:0000000000000771 .LASF53
     /tmp/ccMwiodn.s:3686   .debug_str:0000000000000629 .LASF54
     /tmp/ccMwiodn.s:3700   .debug_str:0000000000000691 .LASF55
     /tmp/ccMwiodn.s:3784   .debug_str:0000000000000a15 .LASF136
     /tmp/ccMwiodn.s:3584   .debug_str:0000000000000389 .LASF56
     /tmp/ccMwiodn.s:3608   .debug_str:0000000000000442 .LASF57
     /tmp/ccMwiodn.s:3638   .debug_str:00000000000004e5 .LASF58
     /tmp/ccMwiodn.s:3640   .debug_str:00000000000004eb .LASF59
     /tmp/ccMwiodn.s:3646   .debug_str:0000000000000515 .LASF60
     /tmp/ccMwiodn.s:3716   .debug_str:0000000000000716 .LASF61
     /tmp/ccMwiodn.s:3572   .debug_str:0000000000000350 .LASF62
     /tmp/ccMwiodn.s:3670   .debug_str:00000000000005bc .LASF63
     /tmp/ccMwiodn.s:3540   .debug_str:000000000000022d .LASF64
     /tmp/ccMwiodn.s:3662   .debug_str:0000000000000582 .LASF65
     /tmp/ccMwiodn.s:3776   .debug_str:00000000000009ca .LASF66
     /tmp/ccMwiodn.s:3692   .debug_str:0000000000000651 .LASF67
     /tmp/ccMwiodn.s:3768   .debug_str:00000000000009a2 .LASF75
     /tmp/ccMwiodn.s:3564   .debug_str:00000000000002e9 .LASF76
     /tmp/ccMwiodn.s:3704   .debug_str:00000000000006a5 .LASF68
     /tmp/ccMwiodn.s:3538   .debug_str:0000000000000228 .LASF70
     /tmp/ccMwiodn.s:3508   .debug_str:0000000000000167 .LASF71
     /tmp/ccMwiodn.s:3790   .debug_str:0000000000000a51 .LASF72
     /tmp/ccMwiodn.s:3708   .debug_str:00000000000006c7 .LASF73
     /tmp/ccMwiodn.s:3660   .debug_str:0000000000000568 .LASF74
     /tmp/ccMwiodn.s:3766   .debug_str:0000000000000987 .LASF77
     /tmp/ccMwiodn.s:3560   .debug_str:00000000000002c5 .LASF78
     /tmp/ccMwiodn.s:3690   .debug_str:000000000000064c .LASF79
     /tmp/ccMwiodn.s:3604   .debug_str:000000000000041d .LASF80
     /tmp/ccMwiodn.s:3470   .debug_str:0000000000000052 .LASF81
     /tmp/ccMwiodn.s:3624   .debug_str:000000000000049e .LASF167
     /tmp/ccMwiodn.s:3590   .debug_str:00000000000003b0 .LASF168
     /tmp/ccMwiodn.s:3678   .debug_str:00000000000005e3 .LASF82
     /tmp/ccMwiodn.s:3596   .debug_str:00000000000003ec .LASF83
     /tmp/ccMwiodn.s:3512   .debug_str:0000000000000181 .LASF84
     /tmp/ccMwiodn.s:3514   .debug_str:0000000000000189 .LASF85
     /tmp/ccMwiodn.s:3728   .debug_str:0000000000000769 .LASF86
     /tmp/ccMwiodn.s:3484   .debug_str:00000000000000af .LASF87
     /tmp/ccMwiodn.s:3734   .debug_str:000000000000079e .LASF88
     /tmp/ccMwiodn.s:3694   .debug_str:0000000000000662 .LASF89
     /tmp/ccMwiodn.s:3744   .debug_str:000000000000089b .LASF90
     /tmp/ccMwiodn.s:3754   .debug_str:0000000000000909 .LASF129
     /tmp/ccMwiodn.s:3546   .debug_str:0000000000000262 .LASF91
     /tmp/ccMwiodn.s:3654   .debug_str:0000000000000549 .LASF92
     /tmp/ccMwiodn.s:3526   .debug_str:00000000000001f1 .LASF94
     /tmp/ccMwiodn.s:3516   .debug_str:00000000000001a5 .LASF95
     /tmp/ccMwiodn.s:3652   .debug_str:000000000000053c .LASF96
GAS LISTING /tmp/ccMwiodn.s 			page 23


     /tmp/ccMwiodn.s:3490   .debug_str:00000000000000dd .LASF97
     /tmp/ccMwiodn.s:3550   .debug_str:000000000000027a .LASF98
     /tmp/ccMwiodn.s:3732   .debug_str:000000000000077d .LASF99
     /tmp/ccMwiodn.s:3774   .debug_str:00000000000009c1 .LASF100
     /tmp/ccMwiodn.s:3724   .debug_str:000000000000074c .LASF101
     /tmp/ccMwiodn.s:3536   .debug_str:000000000000021f .LASF102
     /tmp/ccMwiodn.s:3510   .debug_str:000000000000016c .LASF103
     /tmp/ccMwiodn.s:3710   .debug_str:00000000000006e5 .LASF104
     /tmp/ccMwiodn.s:3688   .debug_str:0000000000000639 .LASF105
     /tmp/ccMwiodn.s:3702   .debug_str:000000000000069e .LASF106
     /tmp/ccMwiodn.s:3750   .debug_str:00000000000008e0 .LASF107
     /tmp/ccMwiodn.s:3532   .debug_str:000000000000020c .LASF108
     /tmp/ccMwiodn.s:3542   .debug_str:000000000000023b .LASF109
     /tmp/ccMwiodn.s:3466   .debug_str:000000000000003a .LASF110
     /tmp/ccMwiodn.s:3566   .debug_str:0000000000000311 .LASF111
     /tmp/ccMwiodn.s:3634   .debug_str:00000000000004d5 .LASF112
     /tmp/ccMwiodn.s:3778   .debug_str:00000000000009d2 .LASF113
     /tmp/ccMwiodn.s:3674   .debug_str:00000000000005d2 .LASF114
     /tmp/ccMwiodn.s:3548   .debug_str:0000000000000267 .LASF115
     /tmp/ccMwiodn.s:3556   .debug_str:00000000000002b1 .LASF116
     /tmp/ccMwiodn.s:3738   .debug_str:00000000000007bd .LASF117
     /tmp/ccMwiodn.s:3480   .debug_str:0000000000000091 .LASF118
     /tmp/ccMwiodn.s:3760   .debug_str:000000000000093c .LASF119
     /tmp/ccMwiodn.s:3788   .debug_str:0000000000000a46 .LASF120
     /tmp/ccMwiodn.s:3712   .debug_str:00000000000006ec .LASF121
     /tmp/ccMwiodn.s:3582   .debug_str:000000000000037e .LASF122
     /tmp/ccMwiodn.s:3482   .debug_str:0000000000000097 .LASF123
     /tmp/ccMwiodn.s:3504   .debug_str:0000000000000151 .LASF124
     /tmp/ccMwiodn.s:3570   .debug_str:000000000000033a .LASF125
     /tmp/ccMwiodn.s:3476   .debug_str:000000000000007b .LASF126
     /tmp/ccMwiodn.s:3494   .debug_str:00000000000000f5 .LASF127
     /tmp/ccMwiodn.s:3720   .debug_str:0000000000000738 .LASF128
     /tmp/ccMwiodn.s:3792   .debug_str:0000000000000a56 .LASF130
     /tmp/ccMwiodn.s:3676   .debug_str:00000000000005d9 .LASF131
     /tmp/ccMwiodn.s:3528   .debug_str:0000000000000200 .LASF132
     /tmp/ccMwiodn.s:3616   .debug_str:0000000000000470 .LASF133
     /tmp/ccMwiodn.s:3642   .debug_str:00000000000004f0 .LASF134
     /tmp/ccMwiodn.s:3668   .debug_str:00000000000005aa .LASF135
     /tmp/ccMwiodn.s:3502   .debug_str:0000000000000139 .LASF137
     /tmp/ccMwiodn.s:3496   .debug_str:000000000000010b .LASF169
     /tmp/ccMwiodn.s:3606   .debug_str:0000000000000432 .LASF138
     /tmp/ccMwiodn.s:3762   .debug_str:000000000000094e .LASF139
     /tmp/ccMwiodn.s:3620   .debug_str:000000000000048e .LASF140
     /tmp/ccMwiodn.s:3748   .debug_str:00000000000008bf .LASF141
     /tmp/ccMwiodn.s:3622   .debug_str:0000000000000499 .LASF142
     /tmp/ccMwiodn.s:3650   .debug_str:0000000000000527 .LASF143
     /tmp/ccMwiodn.s:3518   .debug_str:00000000000001b1 .LASF144
     /tmp/ccMwiodn.s:3786   .debug_str:0000000000000a2b .LASF145
     /tmp/ccMwiodn.s:480    .text:00000000000002a4 .LFB51
     /tmp/ccMwiodn.s:516    .text:00000000000002e0 .LFE51
     /tmp/ccMwiodn.s:3602   .debug_str:0000000000000416 .LASF146
     /tmp/ccMwiodn.s:3150   .debug_loc:0000000000000000 .LLST19
     /tmp/ccMwiodn.s:502    .text:00000000000002cc .LVL41
     /tmp/ccMwiodn.s:408    .text:000000000000024c .LFB50
     /tmp/ccMwiodn.s:474    .text:00000000000002a4 .LFE50
     /tmp/ccMwiodn.s:436    .text:000000000000026c .LBB36
     /tmp/ccMwiodn.s:446    .text:0000000000000280 .LBE36
GAS LISTING /tmp/ccMwiodn.s 			page 24


     /tmp/ccMwiodn.s:3168   .debug_loc:000000000000004c .LLST18
     /tmp/ccMwiodn.s:441    .text:0000000000000278 .LVL36
     /tmp/ccMwiodn.s:445    .text:0000000000000280 .LVL37
     /tmp/ccMwiodn.s:416    .text:0000000000000254 .LBB33
     /tmp/ccMwiodn.s:3438   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccMwiodn.s:3175   .debug_loc:000000000000006f .LLST17
     /tmp/ccMwiodn.s:356    .text:00000000000001fc .LFB49
     /tmp/ccMwiodn.s:402    .text:000000000000024c .LFE49
     /tmp/ccMwiodn.s:3614   .debug_str:0000000000000469 .LASF147
     /tmp/ccMwiodn.s:3190   .debug_loc:00000000000000ab .LLST16
     /tmp/ccMwiodn.s:388    .text:0000000000000238 .LVL32
     /tmp/ccMwiodn.s:324    .text:00000000000001d4 .LFB48
     /tmp/ccMwiodn.s:350    .text:00000000000001fc .LFE48
     /tmp/ccMwiodn.s:3214   .debug_loc:000000000000010d .LLST15
     /tmp/ccMwiodn.s:339    .text:00000000000001ec .LVL29
     /tmp/ccMwiodn.s:170    .text:00000000000000f8 .LFB47
     /tmp/ccMwiodn.s:196    .text:0000000000000120 .LFE47
     /tmp/ccMwiodn.s:3628   .debug_str:00000000000004b0 .LASF148
     /tmp/ccMwiodn.s:3228   .debug_loc:0000000000000146 .LLST3
     /tmp/ccMwiodn.s:185    .text:0000000000000110 .LVL13
     /tmp/ccMwiodn.s:10     .text:0000000000000000 .LFB46
     /tmp/ccMwiodn.s:48     .text:0000000000000044 .LFE46
     /tmp/ccMwiodn.s:25     .text:0000000000000018 .LVL0
     /tmp/ccMwiodn.s:37     .text:0000000000000034 .LVL2
     /tmp/ccMwiodn.s:54     .text:0000000000000044 .LFB45
     /tmp/ccMwiodn.s:164    .text:00000000000000f8 .LFE45
     /tmp/ccMwiodn.s:3242   .debug_loc:000000000000017f .LLST0
     /tmp/ccMwiodn.s:103    .text:00000000000000b0 .LBB21
     /tmp/ccMwiodn.s:119    .text:00000000000000bc .LBE21
     /tmp/ccMwiodn.s:3249   .debug_loc:00000000000001a2 .LLST1
     /tmp/ccMwiodn.s:129    .text:00000000000000cc .LBB23
     /tmp/ccMwiodn.s:142    .text:00000000000000d4 .LBE23
     /tmp/ccMwiodn.s:3258   .debug_loc:00000000000001c8 .LLST2
     /tmp/ccMwiodn.s:81     .text:0000000000000074 .LVL4
     /tmp/ccMwiodn.s:124    .text:00000000000000c8 .LVL7
     /tmp/ccMwiodn.s:149    .text:00000000000000e4 .LVL10
     /tmp/ccMwiodn.s:202    .text:0000000000000120 .LFB44
     /tmp/ccMwiodn.s:318    .text:00000000000001d4 .LFE44
     /tmp/ccMwiodn.s:3672   .debug_str:00000000000005c9 .LASF149
     /tmp/ccMwiodn.s:3267   .debug_loc:00000000000001ee .LLST4
     /tmp/ccMwiodn.s:3287   .debug_loc:000000000000024b .LLST5
     /tmp/ccMwiodn.s:3307   .debug_loc:00000000000002a8 .LLST6
     /tmp/ccMwiodn.s:3574   .debug_str:000000000000035c .LASF150
     /tmp/ccMwiodn.s:3332   .debug_loc:0000000000000319 .LLST7
     /tmp/ccMwiodn.s:229    .text:0000000000000154 .LBB25
     /tmp/ccMwiodn.s:3339   .debug_loc:000000000000033c .LLST8
     /tmp/ccMwiodn.s:3360   .debug_loc:000000000000039a .LLST9
     /tmp/ccMwiodn.s:3371   .debug_loc:00000000000003d0 .LLST10
     /tmp/ccMwiodn.s:3382   .debug_loc:0000000000000406 .LLST11
     /tmp/ccMwiodn.s:242    .text:0000000000000174 .LBB27
     /tmp/ccMwiodn.s:250    .text:000000000000017c .LBE27
     /tmp/ccMwiodn.s:3393   .debug_loc:000000000000043c .LLST12
     /tmp/ccMwiodn.s:3402   .debug_loc:0000000000000462 .LLST13
     /tmp/ccMwiodn.s:3413   .debug_loc:0000000000000498 .LLST14
     /tmp/ccMwiodn.s:228    .text:0000000000000154 .LVL16
     /tmp/ccMwiodn.s:3794   .debug_str:0000000000000a6e .LASF151
     /tmp/ccMwiodn.s:3520   .debug_str:00000000000001c2 .LASF154
GAS LISTING /tmp/ccMwiodn.s 			page 25


     /tmp/ccMwiodn.s:3598   .debug_str:0000000000000401 .LASF152
     /tmp/ccMwiodn.s:3648   .debug_str:000000000000051f .LASF153
     /tmp/ccMwiodn.s:3736   .debug_str:00000000000007a7 .LASF155
     /tmp/ccMwiodn.s:3568   .debug_str:0000000000000325 .LASF156
     /tmp/ccMwiodn.s:3782   .debug_str:0000000000000a07 .LASF157
     /tmp/ccMwiodn.s:3580   .debug_str:0000000000000375 .LASF159
     /tmp/ccMwiodn.s:3666   .debug_str:000000000000059c .LASF158
     /tmp/ccMwiodn.s:3464   .debug_str:0000000000000030 .LASF160
     /tmp/ccMwiodn.s:3460   .debug_str:0000000000000000 .LASF161
     /tmp/ccMwiodn.s:3478   .debug_str:0000000000000085 .LASF162
     /tmp/ccMwiodn.s:483    .text:00000000000002a4 .LVL40
     /tmp/ccMwiodn.s:512    .text:00000000000002dc .LVL42
     /tmp/ccMwiodn.s:415    .text:0000000000000254 .LVL34
     /tmp/ccMwiodn.s:421    .text:0000000000000258 .LVL35
     /tmp/ccMwiodn.s:451    .text:0000000000000288 .LVL38
     /tmp/ccMwiodn.s:457    .text:000000000000028c .LVL39
     /tmp/ccMwiodn.s:359    .text:00000000000001fc .LVL30
     /tmp/ccMwiodn.s:386    .text:0000000000000230 .LVL31
     /tmp/ccMwiodn.s:398    .text:0000000000000248 .LVL33
     /tmp/ccMwiodn.s:327    .text:00000000000001d4 .LVL28
     /tmp/ccMwiodn.s:173    .text:00000000000000f8 .LVL12
     /tmp/ccMwiodn.s:70     .text:0000000000000060 .LVL3
     /tmp/ccMwiodn.s:159    .text:00000000000000f0 .LVL11
     /tmp/ccMwiodn.s:102    .text:00000000000000b0 .LVL5
     /tmp/ccMwiodn.s:116    .text:00000000000000bc .LVL6
     /tmp/ccMwiodn.s:128    .text:00000000000000cc .LVL8
     /tmp/ccMwiodn.s:138    .text:00000000000000d4 .LVL9
     /tmp/ccMwiodn.s:205    .text:0000000000000120 .LVL14
     /tmp/ccMwiodn.s:226    .text:000000000000014c .LVL15
     /tmp/ccMwiodn.s:292    .text:00000000000001b8 .LVL23
     /tmp/ccMwiodn.s:299    .text:00000000000001c4 .LVL25
     /tmp/ccMwiodn.s:295    .text:00000000000001bc .LVL24
     /tmp/ccMwiodn.s:267    .text:00000000000001a0 .LVL20
     /tmp/ccMwiodn.s:312    .text:00000000000001d0 .LVL27
     /tmp/ccMwiodn.s:275    .text:00000000000001a8 .LVL21
     /tmp/ccMwiodn.s:241    .text:0000000000000174 .LVL17
     /tmp/ccMwiodn.s:248    .text:000000000000017c .LVL18
     /tmp/ccMwiodn.s:260    .text:0000000000000194 .LVL19
     /tmp/ccMwiodn.s:308    .text:00000000000001cc .LVL26
     /tmp/ccMwiodn.s:289    .text:00000000000001b4 .LVL22
     /tmp/ccMwiodn.s:537    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccMwiodn.s:278    .text:00000000000001a8 .LBE25
     /tmp/ccMwiodn.s:302    .text:00000000000001c4 .LBB32
     /tmp/ccMwiodn.s:316    .text:00000000000001d4 .LBE32
     /tmp/ccMwiodn.s:253    .text:0000000000000180 .LBB29
     /tmp/ccMwiodn.s:276    .text:00000000000001a8 .LBE29
     /tmp/ccMwiodn.s:304    .text:00000000000001c4 .LBB30
     /tmp/ccMwiodn.s:314    .text:00000000000001d4 .LBE30
     /tmp/ccMwiodn.s:423    .text:0000000000000258 .LBE33
     /tmp/ccMwiodn.s:452    .text:0000000000000288 .LBB37
     /tmp/ccMwiodn.s:459    .text:000000000000028c .LBE37

UNDEFINED SYMBOLS
_ZN5Riscv19returnFromInterruptEv
_Z11thread_exitv
_ZN9Scheduler3getEv
main
GAS LISTING /tmp/ccMwiodn.s 			page 26


_Z22kernelConsumerFunctionPv
_Z4idlePv
_ZN9Scheduler3putEP3TCB
_ZN3TCB13contextSwitchEPNS_7ContextES1_
_Z9mem_allocm
_Z8mem_freePv
_ZN11ThreadQueue7putLastEP3TCB
_ZN11ThreadQueue8getFirstEv
