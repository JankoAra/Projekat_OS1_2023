GAS LISTING /tmp/cc0rwuL0.s 			page 1


   1              		.file	"TCB.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN3TCB7wrapperEv
   9              	_ZN3TCB7wrapperEv:
  10              	.LFB54:
  11              		.file 1 "src/TCB.cpp"
   1:src/TCB.cpp   **** //
   2:src/TCB.cpp   **** // Created by os on 5/23/23.
   3:src/TCB.cpp   **** //
   4:src/TCB.cpp   **** 
   5:src/TCB.cpp   **** #include "../h/TCB.hpp"
   6:src/TCB.cpp   **** #include "../h/Riscv.hpp"
   7:src/TCB.cpp   **** #include "../h/Scheduler.hpp"
   8:src/TCB.cpp   **** #include "../h/KSem.hpp"
   9:src/TCB.cpp   **** 
  10:src/TCB.cpp   **** void kernelConsumerFunction(void*);
  11:src/TCB.cpp   **** 
  12:src/TCB.cpp   **** void idle(void*);
  13:src/TCB.cpp   **** 
  14:src/TCB.cpp   **** void userMain();
  15:src/TCB.cpp   **** 
  16:src/TCB.cpp   **** int main();
  17:src/TCB.cpp   **** 
  18:src/TCB.cpp   **** TCB* TCB::running = nullptr;
  19:src/TCB.cpp   **** uint64 TCB::runningTimeSlice = 0;
  20:src/TCB.cpp   **** 
  21:src/TCB.cpp   **** TCB* TCB::createThread(TCB::Body function, void* args, uint64* stack) {
  22:src/TCB.cpp   ****     TCB* newThread = new TCB(function, args, stack);
  23:src/TCB.cpp   ****     return newThread;
  24:src/TCB.cpp   **** }
  25:src/TCB.cpp   **** 
  26:src/TCB.cpp   **** void TCB::dispatch() {
  27:src/TCB.cpp   ****     TCB* old = TCB::running;
  28:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  29:src/TCB.cpp   ****         Scheduler::put(old);
  30:src/TCB.cpp   ****     } else if (old->status == FINISHED) {
  31:src/TCB.cpp   ****         //brisanje steka niti ako je zavrsena, objekat TCB ostaje zbog moguceg join-a
  32:src/TCB.cpp   ****         delete old->stack;
  33:src/TCB.cpp   ****         old->stack = nullptr;
  34:src/TCB.cpp   ****     }
  35:src/TCB.cpp   ****     TCB::running = Scheduler::get();
  36:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  37:src/TCB.cpp   **** 
  38:src/TCB.cpp   ****     //sada biramo u kom rezimu ce se izvrsavati nit, upisom bita SSTATUS_SPP
  39:src/TCB.cpp   ****     //ako treba da se izvrsava kernel nit, povratak je u sistemski rezim, inace u korisnicki
  40:src/TCB.cpp   ****     if (TCB::running->threadFunction == (TCB::Body)main || TCB::running->threadFunction == kernelCo
  41:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  42:src/TCB.cpp   ****         Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  43:src/TCB.cpp   ****     } else {
  44:src/TCB.cpp   ****         Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
  45:src/TCB.cpp   ****     }
  46:src/TCB.cpp   **** 
  47:src/TCB.cpp   ****     if (old != TCB::running) TCB::contextSwitch(&old->context, &running->context);
GAS LISTING /tmp/cc0rwuL0.s 			page 2


  48:src/TCB.cpp   **** }
  49:src/TCB.cpp   **** 
  50:src/TCB.cpp   **** void TCB::wrapper() {
  12              		.loc 1 50 21
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  51:src/TCB.cpp   ****     //pocetak wrappera se izvrsava u supervisor modu,
  52:src/TCB.cpp   ****     //jer nismo izasli iz prekidne rutine prilikom promene konteksta (dispatch)
  53:src/TCB.cpp   ****     Riscv::returnFromInterrupt();
  22              		.loc 1 53 5
  23              		.loc 1 53 31 is_stmt 0
  24 0010 97000000 		call	_ZN5Riscv19returnFromInterruptEv@plt
  24      E7800000 
  25              	.LVL0:
  54:src/TCB.cpp   ****     //na dalje se izvrsavamo u user modu (osim za kernel funkcije)
  55:src/TCB.cpp   ****     running->threadFunction(running->args);
  26              		.loc 1 55 5 is_stmt 1
  27              		.loc 1 55 14 is_stmt 0
  28 0018 97070000 		ld	a5,.LANCHOR0
  28      83B70700 
  29 0020 03B70701 		ld	a4,16(a5)
  30              		.loc 1 55 28
  31 0024 03B50702 		ld	a0,32(a5)
  32 0028 E7000700 		jalr	a4
  33              	.LVL1:
  56:src/TCB.cpp   ****     //i dalje smo u user modu, moramo promenu niti vrsiti sistemskim pozivom
  57:src/TCB.cpp   ****     thread_exit();
  34              		.loc 1 57 5 is_stmt 1
  35              		.loc 1 57 16 is_stmt 0
  36 002c 97000000 		call	_Z11thread_exitv@plt
  36      E7800000 
  37              	.LVL2:
  58:src/TCB.cpp   **** }
  38              		.loc 1 58 1
  39 0034 83308100 		ld	ra,8(sp)
  40              		.cfi_restore 1
  41 0038 03340100 		ld	s0,0(sp)
  42              		.cfi_restore 8
  43              		.cfi_def_cfa 2, 16
  44 003c 13010101 		addi	sp,sp,16
  45              		.cfi_def_cfa_offset 0
  46 0040 67800000 		jr	ra
  47              		.cfi_endproc
  48              	.LFE54:
  50              		.align	2
  51              		.globl	_ZN3TCB8dispatchEv
  53              	_ZN3TCB8dispatchEv:
  54              	.LFB53:
  26:src/TCB.cpp   ****     TCB* old = TCB::running;
  55              		.loc 1 26 22 is_stmt 1
GAS LISTING /tmp/cc0rwuL0.s 			page 3


  56              		.cfi_startproc
  57 0044 130101FE 		addi	sp,sp,-32
  58              		.cfi_def_cfa_offset 32
  59 0048 233C1100 		sd	ra,24(sp)
  60 004c 23388100 		sd	s0,16(sp)
  61 0050 23349100 		sd	s1,8(sp)
  62              		.cfi_offset 1, -8
  63              		.cfi_offset 8, -16
  64              		.cfi_offset 9, -24
  65 0054 13040102 		addi	s0,sp,32
  66              		.cfi_def_cfa 8, 0
  27:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  67              		.loc 1 27 5
  27:src/TCB.cpp   ****     if (old->status == ACTIVE) {
  68              		.loc 1 27 10 is_stmt 0
  69 0058 97040000 		ld	s1,.LANCHOR0
  69      83B40400 
  70              	.LVL3:
  28:src/TCB.cpp   ****         Scheduler::put(old);
  71              		.loc 1 28 5 is_stmt 1
  28:src/TCB.cpp   ****         Scheduler::put(old);
  72              		.loc 1 28 14 is_stmt 0
  73 0060 83A78405 		lw	a5,88(s1)
  28:src/TCB.cpp   ****         Scheduler::put(old);
  74              		.loc 1 28 5
  75 0064 13071000 		li	a4,1
  76 0068 638EE704 		beq	a5,a4,.L12
  30:src/TCB.cpp   ****         //brisanje steka niti ako je zavrsena, objekat TCB ostaje zbog moguceg join-a
  77              		.loc 1 30 12 is_stmt 1
  78 006c 13075000 		li	a4,5
  79 0070 6382E706 		beq	a5,a4,.L13
  80              	.L5:
  35:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  81              		.loc 1 35 5
  35:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  82              		.loc 1 35 34 is_stmt 0
  83 0074 97000000 		call	_ZN9Scheduler3getEv@plt
  83      E7800000 
  84              	.LVL4:
  85 007c 93050500 		mv	a1,a0
  35:src/TCB.cpp   ****     TCB::runningTimeSlice = 0;
  86              		.loc 1 35 18
  87 0080 97070000 		lla	a5,.LANCHOR0
  87      93870700 
  88 0088 23B0A700 		sd	a0,0(a5)
  36:src/TCB.cpp   **** 
  89              		.loc 1 36 5 is_stmt 1
  36:src/TCB.cpp   **** 
  90              		.loc 1 36 27 is_stmt 0
  91 008c 23B40700 		sd	zero,8(a5)
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  92              		.loc 1 40 5 is_stmt 1
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  93              		.loc 1 40 23 is_stmt 0
  94 0090 83370501 		ld	a5,16(a0)
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  95              		.loc 1 40 5
GAS LISTING /tmp/cc0rwuL0.s 			page 4


  96 0094 17070000 		la	a4,main
  96      03370700 
  97 009c 6388E704 		beq	a5,a4,.L7
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
  98              		.loc 1 40 57 discriminator 1
  99 00a0 17070000 		la	a4,_Z22kernelConsumerFunctionPv
  99      03370700 
 100 00a8 6382E704 		beq	a5,a4,.L7
  40:src/TCB.cpp   ****         TCB::running->threadFunction == idle) {
 101              		.loc 1 40 115 discriminator 2
 102 00ac 17070000 		la	a4,_Z4idlePv
 102      03370700 
 103 00b4 638CE702 		beq	a5,a4,.L7
  44:src/TCB.cpp   ****     }
 104              		.loc 1 44 9 is_stmt 1
 105              	.LVL5:
 106              	.LBB37:
 107              	.LBB38:
 108              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 5/17/23.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJEKAT2023_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJEKAT2023_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv {
  11:src/../h/Riscv.hpp **** public:
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** 	static void returnFromInterrupt();
  14:src/../h/Riscv.hpp **** 
  15:src/../h/Riscv.hpp **** 	//read scause
  16:src/../h/Riscv.hpp **** 	static uint64 r_scause();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp **** 	//write scause
  19:src/../h/Riscv.hpp **** 	static void w_scause(uint64 scause);
  20:src/../h/Riscv.hpp **** 
  21:src/../h/Riscv.hpp **** 	//read sepc
  22:src/../h/Riscv.hpp **** 	static uint64 r_sepc();
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp **** 	//write sepc
  25:src/../h/Riscv.hpp **** 	static void w_sepc(uint64 sepc);
  26:src/../h/Riscv.hpp **** 
  27:src/../h/Riscv.hpp **** 	//read stvec
  28:src/../h/Riscv.hpp **** 	static uint64 r_stvec();
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp **** 	//write stvec
  31:src/../h/Riscv.hpp **** 	static void w_stvec(uint64 stvec);
  32:src/../h/Riscv.hpp **** 
  33:src/../h/Riscv.hpp **** 	enum BitMaskSip {
  34:src/../h/Riscv.hpp **** 		//postoji zahtev za softverski prekid
  35:src/../h/Riscv.hpp **** 		SIP_SSIP = (1 << 1),
  36:src/../h/Riscv.hpp **** 		//postoji prekid od tajmera
  37:src/../h/Riscv.hpp **** 		SIP_STIP = (1 << 5),
  38:src/../h/Riscv.hpp **** 		//postoji zahtev za spoljasnji hardverski prekid
GAS LISTING /tmp/cc0rwuL0.s 			page 5


  39:src/../h/Riscv.hpp **** 		SIP_SEIP = (1 << 9)
  40:src/../h/Riscv.hpp **** 	};
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp **** 	//mask set sip
  43:src/../h/Riscv.hpp **** 	static void ms_sip(uint64 mask);
  44:src/../h/Riscv.hpp **** 
  45:src/../h/Riscv.hpp **** 	//mask clear sip
  46:src/../h/Riscv.hpp **** 	static void mc_sip(uint64 mask);
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp **** 	//read sip
  49:src/../h/Riscv.hpp **** 	static uint64 r_sip();
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** 	//write sip
  52:src/../h/Riscv.hpp **** 	static void w_sip(uint64 sip);
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp **** 	//kada se pozove sret, SIE dobija vrednost SPIE, SPIE se postavlja na 1,
  55:src/../h/Riscv.hpp **** 	//rezim se postavlja na osnovu SPP bita, SPP se postavlja na 0
  56:src/../h/Riscv.hpp **** 	enum BitMaskSstatus {
  57:src/../h/Riscv.hpp **** 		//1 - dozvoljeni prekidi; 0- nedozvoljeni prekidi; igonrise se u korisnickom rezimu
  58:src/../h/Riscv.hpp **** 		SSTATUS_SIE = (1 << 1),
  59:src/../h/Riscv.hpp **** 		//prethodna vrednost bita SIE
  60:src/../h/Riscv.hpp **** 		SSTATUS_SPIE = (1 << 5),
  61:src/../h/Riscv.hpp **** 		//iz kog rezima se desio skok; 0 - iz korisnickog; 1 - iz sistemskog
  62:src/../h/Riscv.hpp **** 		SSTATUS_SPP = (1 << 8)
  63:src/../h/Riscv.hpp **** 	};
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp **** 	//mask set sstatus
  66:src/../h/Riscv.hpp **** 	static void ms_sstatus(uint64 mask);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp **** 	//mask clear sstatus
  69:src/../h/Riscv.hpp **** 	static void mc_sstatus(uint64 mask);
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp **** 	//read sstatus
  72:src/../h/Riscv.hpp **** 	static uint64 r_sstatus();
  73:src/../h/Riscv.hpp **** 
  74:src/../h/Riscv.hpp **** 	//write sstatus
  75:src/../h/Riscv.hpp **** 	static void w_sstatus(uint64 sstatus);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp **** };
  78:src/../h/Riscv.hpp **** 
  79:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  80:src/../h/Riscv.hpp **** 	uint64 volatile scause;
  81:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[scause], scause": [scause] "=r"(scause));
  82:src/../h/Riscv.hpp **** 	return scause;
  83:src/../h/Riscv.hpp **** }
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  86:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw scause, %[scause]": :[scause] "r"(scause));
  87:src/../h/Riscv.hpp **** }
  88:src/../h/Riscv.hpp **** 
  89:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  90:src/../h/Riscv.hpp **** 	uint64 volatile sepc;
  91:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sepc], sepc": [sepc] "=r"(sepc));
  92:src/../h/Riscv.hpp **** 	return sepc;
  93:src/../h/Riscv.hpp **** }
  94:src/../h/Riscv.hpp **** 
  95:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
GAS LISTING /tmp/cc0rwuL0.s 			page 6


  96:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sepc, %[sepc]": :[sepc] "r"(sepc));
  97:src/../h/Riscv.hpp **** }
  98:src/../h/Riscv.hpp **** 
  99:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 100:src/../h/Riscv.hpp **** 	uint64 volatile stvec;
 101:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 102:src/../h/Riscv.hpp **** 	return stvec;
 103:src/../h/Riscv.hpp **** }
 104:src/../h/Riscv.hpp **** 
 105:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 106:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw stvec, %[stvec]": :[stvec] "r"(stvec));
 107:src/../h/Riscv.hpp **** }
 108:src/../h/Riscv.hpp **** 
 109:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 110:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sip, %[mask]": :[mask] "r"(mask));
 111:src/../h/Riscv.hpp **** }
 112:src/../h/Riscv.hpp **** 
 113:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 114:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sip, %[mask]": :[mask] "r"(mask));
 115:src/../h/Riscv.hpp **** }
 116:src/../h/Riscv.hpp **** 
 117:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 118:src/../h/Riscv.hpp **** 	uint64 volatile sip;
 119:src/../h/Riscv.hpp **** 	__asm__ volatile("csrr %[sip], sip": [sip] "=r"(sip));
 120:src/../h/Riscv.hpp **** 	return sip;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 124:src/../h/Riscv.hpp **** 	__asm__ volatile("csrw sip, %[sip]": :[sip] "r"(sip));
 125:src/../h/Riscv.hpp **** }
 126:src/../h/Riscv.hpp **** 
 127:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 128:src/../h/Riscv.hpp **** 	__asm__ volatile("csrs sstatus, %[mask]": :[mask] "r"(mask));
 129:src/../h/Riscv.hpp **** }
 130:src/../h/Riscv.hpp **** 
 131:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 132:src/../h/Riscv.hpp **** 	__asm__ volatile("csrc sstatus, %[mask]": :[mask] "r"(mask));
 109              		.loc 2 132 2
 110              		.loc 2 132 62 is_stmt 0
 111 00b8 93070010 		li	a5,256
 112              	#APP
 113              	# 132 "src/../h/Riscv.hpp" 1
 133              	}
 114              		csrc sstatus, a5
 115              	# 0 "" 2
 116              		.loc 2 133 1
 117              	#NO_APP
 118 00c0 6F004003 		j	.L9
 119              	.LVL6:
 120              	.L12:
 121              	.LBE38:
 122              	.LBE37:
  29:src/TCB.cpp   ****     } else if (old->status == FINISHED) {
 123              		.loc 1 29 9 is_stmt 1
  29:src/TCB.cpp   ****     } else if (old->status == FINISHED) {
 124              		.loc 1 29 23 is_stmt 0
 125 00c4 13850400 		mv	a0,s1
GAS LISTING /tmp/cc0rwuL0.s 			page 7


 126 00c8 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 126      E7800000 
 127              	.LVL7:
 128 00d0 6FF05FFA 		j	.L5
 129              	.L13:
  32:src/TCB.cpp   ****         old->stack = nullptr;
 130              		.loc 1 32 9 is_stmt 1
  32:src/TCB.cpp   ****         old->stack = nullptr;
 131              		.loc 1 32 21 is_stmt 0
 132 00d4 03B58401 		ld	a0,24(s1)
  32:src/TCB.cpp   ****         old->stack = nullptr;
 133              		.loc 1 32 26
 134 00d8 63060500 		beqz	a0,.L6
  32:src/TCB.cpp   ****         old->stack = nullptr;
 135              		.loc 1 32 21 discriminator 1
 136 00dc 97000000 		call	_ZdlPv@plt
 136      E7800000 
 137              	.LVL8:
 138              	.L6:
  33:src/TCB.cpp   ****     }
 139              		.loc 1 33 9 is_stmt 1
  33:src/TCB.cpp   ****     }
 140              		.loc 1 33 20 is_stmt 0
 141 00e4 23BC0400 		sd	zero,24(s1)
 142 00e8 6FF0DFF8 		j	.L5
 143              	.L7:
  42:src/TCB.cpp   ****     } else {
 144              		.loc 1 42 9 is_stmt 1
 145              	.LVL9:
 146              	.LBB39:
 147              	.LBB40:
 128:src/../h/Riscv.hpp **** }
 148              		.loc 2 128 2
 128:src/../h/Riscv.hpp **** }
 149              		.loc 2 128 62 is_stmt 0
 150 00ec 93070010 		li	a5,256
 151              	#APP
 152              	# 128 "src/../h/Riscv.hpp" 1
 153              		csrs sstatus, a5
 154              	# 0 "" 2
 155              	.LVL10:
 156              	#NO_APP
 157              	.L9:
 158              	.LBE40:
 159              	.LBE39:
  47:src/TCB.cpp   **** }
 160              		.loc 1 47 5 is_stmt 1
 161 00f4 6388B400 		beq	s1,a1,.L3
  47:src/TCB.cpp   **** }
 162              		.loc 1 47 30 discriminator 1
  47:src/TCB.cpp   **** }
 163              		.loc 1 47 48 is_stmt 0 discriminator 1
 164 00f8 13850400 		mv	a0,s1
 165 00fc 97000000 		call	_ZN3TCB13contextSwitchEPNS_7ContextES1_@plt
 165      E7800000 
 166              	.LVL11:
 167              	.L3:
GAS LISTING /tmp/cc0rwuL0.s 			page 8


  48:src/TCB.cpp   **** 
 168              		.loc 1 48 1
 169 0104 83308101 		ld	ra,24(sp)
 170              		.cfi_restore 1
 171 0108 03340101 		ld	s0,16(sp)
 172              		.cfi_restore 8
 173              		.cfi_def_cfa 2, 32
 174 010c 83348100 		ld	s1,8(sp)
 175              		.cfi_restore 9
 176              	.LVL12:
 177 0110 13010102 		addi	sp,sp,32
 178              		.cfi_def_cfa_offset 0
 179 0114 67800000 		jr	ra
 180              		.cfi_endproc
 181              	.LFE53:
 183              		.align	2
 184              		.globl	_ZN3TCBnwEm
 186              	_ZN3TCBnwEm:
 187              	.LFB55:
  59:src/TCB.cpp   **** 
  60:src/TCB.cpp   **** void* TCB::operator new(size_t size) {
 188              		.loc 1 60 38 is_stmt 1
 189              		.cfi_startproc
 190              	.LVL13:
 191 0118 130101FF 		addi	sp,sp,-16
 192              		.cfi_def_cfa_offset 16
 193 011c 23341100 		sd	ra,8(sp)
 194 0120 23308100 		sd	s0,0(sp)
 195              		.cfi_offset 1, -8
 196              		.cfi_offset 8, -16
 197 0124 13040101 		addi	s0,sp,16
 198              		.cfi_def_cfa 8, 0
  61:src/TCB.cpp   ****     return mem_alloc(size);
 199              		.loc 1 61 5
 200              		.loc 1 61 21 is_stmt 0
 201 0128 97000000 		call	_Z9mem_allocm@plt
 201      E7800000 
 202              	.LVL14:
  62:src/TCB.cpp   **** }
 203              		.loc 1 62 1
 204 0130 83308100 		ld	ra,8(sp)
 205              		.cfi_restore 1
 206 0134 03340100 		ld	s0,0(sp)
 207              		.cfi_restore 8
 208              		.cfi_def_cfa 2, 16
 209 0138 13010101 		addi	sp,sp,16
 210              		.cfi_def_cfa_offset 0
 211 013c 67800000 		jr	ra
 212              		.cfi_endproc
 213              	.LFE55:
 215              		.align	2
 216              		.globl	_ZN3TCB12createThreadEPFvPvES0_Pm
 218              	_ZN3TCB12createThreadEPFvPvES0_Pm:
 219              	.LFB52:
  21:src/TCB.cpp   ****     TCB* newThread = new TCB(function, args, stack);
 220              		.loc 1 21 71 is_stmt 1
 221              		.cfi_startproc
GAS LISTING /tmp/cc0rwuL0.s 			page 9


 222              	.LVL15:
 223 0140 130101FD 		addi	sp,sp,-48
 224              		.cfi_def_cfa_offset 48
 225 0144 23341102 		sd	ra,40(sp)
 226 0148 23308102 		sd	s0,32(sp)
 227 014c 233C9100 		sd	s1,24(sp)
 228 0150 23382101 		sd	s2,16(sp)
 229 0154 23343101 		sd	s3,8(sp)
 230              		.cfi_offset 1, -8
 231              		.cfi_offset 8, -16
 232              		.cfi_offset 9, -24
 233              		.cfi_offset 18, -32
 234              		.cfi_offset 19, -40
 235 0158 13040103 		addi	s0,sp,48
 236              		.cfi_def_cfa 8, 0
 237 015c 13090500 		mv	s2,a0
 238 0160 93890500 		mv	s3,a1
 239 0164 93040600 		mv	s1,a2
  22:src/TCB.cpp   ****     return newThread;
 240              		.loc 1 22 5
  22:src/TCB.cpp   ****     return newThread;
 241              		.loc 1 22 51 is_stmt 0
 242 0168 13050007 		li	a0,112
 243              	.LVL16:
 244 016c 97000000 		call	_ZN3TCBnwEm
 244      E7800000 
 245              	.LVL17:
 246              	.LBB41:
 247              	.LBB42:
 248              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 5/23/23.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJEKAT2023_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJEKAT2023_TCB_HPP
   7:src/../h/TCB.hpp **** 
   8:src/../h/TCB.hpp **** #include "../lib/hw.h"
   9:src/../h/TCB.hpp **** #include "../h/ThreadQueue.hpp"
  10:src/../h/TCB.hpp **** 
  11:src/../h/TCB.hpp **** int main();
  12:src/../h/TCB.hpp **** 
  13:src/../h/TCB.hpp **** class TCB {
  14:src/../h/TCB.hpp **** public:
  15:src/../h/TCB.hpp ****     friend class Scheduler;
  16:src/../h/TCB.hpp **** 
  17:src/../h/TCB.hpp ****     using Body = void (*)(void*);
  18:src/../h/TCB.hpp **** 
  19:src/../h/TCB.hpp ****     enum ThreadStatus {
  20:src/../h/TCB.hpp ****         CREATED, ACTIVE, BLOCKED, JOINING, SLEEPING, FINISHED
  21:src/../h/TCB.hpp ****     };
  22:src/../h/TCB.hpp **** 
  23:src/../h/TCB.hpp ****     static TCB* createThread(Body function, void* args, uint64* stack);
  24:src/../h/TCB.hpp **** 
  25:src/../h/TCB.hpp ****     void setStatus(ThreadStatus stat) { this->status = stat; }
  26:src/../h/TCB.hpp **** 
  27:src/../h/TCB.hpp ****     ThreadStatus getStatus() { return this->status; }
GAS LISTING /tmp/cc0rwuL0.s 			page 10


  28:src/../h/TCB.hpp **** 
  29:src/../h/TCB.hpp ****     uint64 getTimeSlice() { return timeSlice; }
  30:src/../h/TCB.hpp **** 
  31:src/../h/TCB.hpp ****     Body getBody() { return threadFunction; }
  32:src/../h/TCB.hpp **** 
  33:src/../h/TCB.hpp ****     ThreadQueue* getListOfJoiningThreads(){return &waitingToJoin;}
  34:src/../h/TCB.hpp **** 
  35:src/../h/TCB.hpp ****     static TCB* getRunning() { return running; }
  36:src/../h/TCB.hpp **** 
  37:src/../h/TCB.hpp ****     static void setRunning(TCB* newRunning) { running = newRunning; }
  38:src/../h/TCB.hpp **** 
  39:src/../h/TCB.hpp ****     static uint64 &getRunningTimeSlice() { return runningTimeSlice; }
  40:src/../h/TCB.hpp **** 
  41:src/../h/TCB.hpp ****     static void threadJoin(TCB* handle);
  42:src/../h/TCB.hpp **** 
  43:src/../h/TCB.hpp ****     static void releaseJoined(TCB* handle);
  44:src/../h/TCB.hpp **** 
  45:src/../h/TCB.hpp ****     static void dispatch();
  46:src/../h/TCB.hpp **** 
  47:src/../h/TCB.hpp ****     static void wrapper();
  48:src/../h/TCB.hpp **** 
  49:src/../h/TCB.hpp ****     static void quitThread(TCB* handle);
  50:src/../h/TCB.hpp **** 
  51:src/../h/TCB.hpp ****     static void* operator new(size_t size);
  52:src/../h/TCB.hpp **** 
  53:src/../h/TCB.hpp ****     static void operator delete(void* ptr);
  54:src/../h/TCB.hpp **** 
  55:src/../h/TCB.hpp **** private:
  56:src/../h/TCB.hpp ****     TCB(Body function, void* args, uint64* stack) : threadFunction(function), stack(stack), args(ar
  57:src/../h/TCB.hpp ****                                                     timeSlice(DEFAULT_TIME_SLICE), nextInScheduler(
  58:src/../h/TCB.hpp ****                                                     timeToSleep(0),
  59:src/../h/TCB.hpp ****                                                     nextSleeping(nullptr), status(CREATED), mySemap
  60:src/../h/TCB.hpp ****                                                     joiningWithTCB(nullptr) {
 249              		.loc 3 60 75
 250 0174 23382501 		sd	s2,16(a0)
 251 0178 233C9500 		sd	s1,24(a0)
 252 017c 23303503 		sd	s3,32(a0)
 253 0180 93072000 		li	a5,2
 254 0184 2334F502 		sd	a5,40(a0)
 255 0188 23380502 		sd	zero,48(a0)
 256 018c 233C0502 		sd	zero,56(a0)
 257 0190 23300504 		sd	zero,64(a0)
 258              	.LVL18:
 259              	.LBB43:
 260              	.LBB44:
 261              		.file 4 "src/../h/../h/ThreadQueue.hpp"
   1:src/../h/../h/ThreadQueue.hpp **** //
   2:src/../h/../h/ThreadQueue.hpp **** // Created by os on 6/4/23.
   3:src/../h/../h/ThreadQueue.hpp **** //
   4:src/../h/../h/ThreadQueue.hpp **** 
   5:src/../h/../h/ThreadQueue.hpp **** #ifndef PROJEKAT2023_THREADQUEUE_HPP
   6:src/../h/../h/ThreadQueue.hpp **** #define PROJEKAT2023_THREADQUEUE_HPP
   7:src/../h/../h/ThreadQueue.hpp **** 
   8:src/../h/../h/ThreadQueue.hpp **** #include "../h/syscall_c.hpp"
   9:src/../h/../h/ThreadQueue.hpp **** 
  10:src/../h/../h/ThreadQueue.hpp **** class TCB;
  11:src/../h/../h/ThreadQueue.hpp **** 
GAS LISTING /tmp/cc0rwuL0.s 			page 11


  12:src/../h/../h/ThreadQueue.hpp **** class ThreadQueue {
  13:src/../h/../h/ThreadQueue.hpp **** private:
  14:src/../h/../h/ThreadQueue.hpp ****     struct Node {
  15:src/../h/../h/ThreadQueue.hpp ****         TCB* data;
  16:src/../h/../h/ThreadQueue.hpp ****         Node* next;
  17:src/../h/../h/ThreadQueue.hpp **** 
  18:src/../h/../h/ThreadQueue.hpp ****         Node(TCB* d) : data(d), next(nullptr) {}
  19:src/../h/../h/ThreadQueue.hpp **** 
  20:src/../h/../h/ThreadQueue.hpp ****         static void* operator new(size_t size) {
  21:src/../h/../h/ThreadQueue.hpp ****             return mem_alloc(size);
  22:src/../h/../h/ThreadQueue.hpp ****         }
  23:src/../h/../h/ThreadQueue.hpp **** 
  24:src/../h/../h/ThreadQueue.hpp ****         static void operator delete(void* ptr) {
  25:src/../h/../h/ThreadQueue.hpp ****             mem_free(ptr);
  26:src/../h/../h/ThreadQueue.hpp ****         }
  27:src/../h/../h/ThreadQueue.hpp ****     };
  28:src/../h/../h/ThreadQueue.hpp **** 
  29:src/../h/../h/ThreadQueue.hpp ****     Node* front;
  30:src/../h/../h/ThreadQueue.hpp ****     Node* back;
  31:src/../h/../h/ThreadQueue.hpp **** 
  32:src/../h/../h/ThreadQueue.hpp **** public:
  33:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue() : front(nullptr), back(nullptr) {}
 262              		.loc 4 33 49
 263 0194 23340504 		sd	zero,72(a0)
 264 0198 23380504 		sd	zero,80(a0)
 265              	.LVL19:
 266              	.LBE44:
 267              	.LBE43:
 268              		.loc 3 60 75
 269 019c 232C0504 		sw	zero,88(a0)
 270 01a0 23300506 		sd	zero,96(a0)
 271 01a4 23340506 		sd	zero,104(a0)
 272              	.LBB45:
  61:src/../h/TCB.hpp ****         //formiranje pocetnog konteksta;
  62:src/../h/TCB.hpp ****         //specijalni uslovi za main funkciju kojoj se pocetni kontekst automatski formira
  63:src/../h/TCB.hpp ****         uint64 startRa = threadFunction != (TCB::Body)main ? (uint64)&wrapper : 0;
 273              		.loc 3 63 9 is_stmt 1
 274              		.loc 3 63 60 is_stmt 0
 275 01a8 97070000 		la	a5,main
 275      83B70700 
 276 01b0 630EF902 		beq	s2,a5,.L19
 277 01b4 97070000 		lla	a5,_ZN3TCB7wrapperEv
 277      93870700 
 278              	.L17:
 279              	.LVL20:
  64:src/../h/TCB.hpp ****         uint64 startSp = stack != nullptr ? (uint64)((char*)stack + DEFAULT_STACK_SIZE) : 0;
 280              		.loc 3 64 9 is_stmt 1
 281              		.loc 3 64 43 is_stmt 0
 282 01bc 638C0402 		beqz	s1,.L20
 283              		.loc 3 64 67
 284 01c0 37160000 		li	a2,4096
 285 01c4 B384C400 		add	s1,s1,a2
 286              	.LVL21:
 287              	.L18:
  65:src/../h/TCB.hpp ****         this->context.ra = startRa;
 288              		.loc 3 65 9 is_stmt 1
 289              		.loc 3 65 26 is_stmt 0
GAS LISTING /tmp/cc0rwuL0.s 			page 12


 290 01c8 2330F500 		sd	a5,0(a0)
  66:src/../h/TCB.hpp ****         this->context.sp = startSp;
 291              		.loc 3 66 9 is_stmt 1
 292              		.loc 3 66 26 is_stmt 0
 293 01cc 23349500 		sd	s1,8(a0)
 294              	.LVL22:
 295              	.LBE45:
 296              	.LBE42:
 297              	.LBE41:
  23:src/TCB.cpp   **** }
 298              		.loc 1 23 5 is_stmt 1
  24:src/TCB.cpp   **** 
 299              		.loc 1 24 1 is_stmt 0
 300 01d0 83308102 		ld	ra,40(sp)
 301              		.cfi_remember_state
 302              		.cfi_restore 1
 303 01d4 03340102 		ld	s0,32(sp)
 304              		.cfi_restore 8
 305              		.cfi_def_cfa 2, 48
 306 01d8 83348101 		ld	s1,24(sp)
 307              		.cfi_restore 9
 308              	.LVL23:
 309 01dc 03390101 		ld	s2,16(sp)
 310              		.cfi_restore 18
 311              	.LVL24:
 312 01e0 83398100 		ld	s3,8(sp)
 313              		.cfi_restore 19
 314              	.LVL25:
 315 01e4 13010103 		addi	sp,sp,48
 316              		.cfi_def_cfa_offset 0
 317 01e8 67800000 		jr	ra
 318              	.LVL26:
 319              	.L19:
 320              		.cfi_restore_state
 321              	.LBB48:
 322              	.LBB47:
 323              	.LBB46:
  63:src/../h/TCB.hpp ****         uint64 startSp = stack != nullptr ? (uint64)((char*)stack + DEFAULT_STACK_SIZE) : 0;
 324              		.loc 3 63 60
 325 01ec 93070000 		li	a5,0
 326 01f0 6FF0DFFC 		j	.L17
 327              	.LVL27:
 328              	.L20:
  64:src/../h/TCB.hpp ****         this->context.ra = startRa;
 329              		.loc 3 64 43
 330 01f4 93040000 		li	s1,0
 331              	.LVL28:
 332 01f8 6FF01FFD 		j	.L18
 333              	.LBE46:
 334              	.LBE47:
 335              	.LBE48:
 336              		.cfi_endproc
 337              	.LFE52:
 339              		.align	2
 340              		.globl	_ZN3TCBdlEPv
 342              	_ZN3TCBdlEPv:
 343              	.LFB56:
GAS LISTING /tmp/cc0rwuL0.s 			page 13


  63:src/TCB.cpp   **** 
  64:src/TCB.cpp   **** void TCB::operator delete(void* ptr) {
 344              		.loc 1 64 38 is_stmt 1
 345              		.cfi_startproc
 346              	.LVL29:
 347 01fc 130101FF 		addi	sp,sp,-16
 348              		.cfi_def_cfa_offset 16
 349 0200 23341100 		sd	ra,8(sp)
 350 0204 23308100 		sd	s0,0(sp)
 351              		.cfi_offset 1, -8
 352              		.cfi_offset 8, -16
 353 0208 13040101 		addi	s0,sp,16
 354              		.cfi_def_cfa 8, 0
  65:src/TCB.cpp   ****     mem_free(ptr);
 355              		.loc 1 65 5
 356              		.loc 1 65 13 is_stmt 0
 357 020c 97000000 		call	_Z8mem_freePv@plt
 357      E7800000 
 358              	.LVL30:
  66:src/TCB.cpp   **** }
 359              		.loc 1 66 1
 360 0214 83308100 		ld	ra,8(sp)
 361              		.cfi_restore 1
 362 0218 03340100 		ld	s0,0(sp)
 363              		.cfi_restore 8
 364              		.cfi_def_cfa 2, 16
 365 021c 13010101 		addi	sp,sp,16
 366              		.cfi_def_cfa_offset 0
 367 0220 67800000 		jr	ra
 368              		.cfi_endproc
 369              	.LFE56:
 371              		.align	2
 372              		.globl	_ZN3TCB10threadJoinEPS_
 374              	_ZN3TCB10threadJoinEPS_:
 375              	.LFB57:
  67:src/TCB.cpp   **** 
  68:src/TCB.cpp   **** void TCB::threadJoin(TCB* handle) {
 376              		.loc 1 68 35 is_stmt 1
 377              		.cfi_startproc
 378              	.LVL31:
  69:src/TCB.cpp   ****     if (handle->status == FINISHED || TCB::running == handle) return;
 379              		.loc 1 69 5
 380              		.loc 1 69 17 is_stmt 0
 381 0224 03278505 		lw	a4,88(a0)
 382              		.loc 1 69 5
 383 0228 93075000 		li	a5,5
 384 022c 6302F704 		beq	a4,a5,.L27
 385              		.loc 1 69 52 discriminator 2
 386 0230 97050000 		ld	a1,.LANCHOR0
 386      83B50500 
 387              		.loc 1 69 36 discriminator 2
 388 0238 638CA502 		beq	a1,a0,.L27
  68:src/TCB.cpp   ****     if (handle->status == FINISHED || TCB::running == handle) return;
 389              		.loc 1 68 35
 390 023c 130101FF 		addi	sp,sp,-16
 391              		.cfi_def_cfa_offset 16
 392 0240 23341100 		sd	ra,8(sp)
GAS LISTING /tmp/cc0rwuL0.s 			page 14


 393 0244 23308100 		sd	s0,0(sp)
 394              		.cfi_offset 1, -8
 395              		.cfi_offset 8, -16
 396 0248 13040101 		addi	s0,sp,16
 397              		.cfi_def_cfa 8, 0
  70:src/TCB.cpp   ****     TCB::running->status = JOINING;
 398              		.loc 1 70 5 is_stmt 1
 399              		.loc 1 70 26 is_stmt 0
 400 024c 93073000 		li	a5,3
 401 0250 23ACF504 		sw	a5,88(a1)
  71:src/TCB.cpp   ****     handle->waitingToJoin.putLast(TCB::running);
 402              		.loc 1 71 5 is_stmt 1
 403              		.loc 1 71 34 is_stmt 0
 404 0254 13058504 		addi	a0,a0,72
 405              	.LVL32:
 406 0258 97000000 		call	_ZN11ThreadQueue7putLastEP3TCB@plt
 406      E7800000 
 407              	.LVL33:
  72:src/TCB.cpp   **** }
 408              		.loc 1 72 1
 409 0260 83308100 		ld	ra,8(sp)
 410              		.cfi_restore 1
 411 0264 03340100 		ld	s0,0(sp)
 412              		.cfi_restore 8
 413              		.cfi_def_cfa 2, 16
 414 0268 13010101 		addi	sp,sp,16
 415              		.cfi_def_cfa_offset 0
 416 026c 67800000 		jr	ra
 417              	.LVL34:
 418              	.L27:
 419 0270 67800000 		ret
 420              		.cfi_endproc
 421              	.LFE57:
 423              		.align	2
 424              		.globl	_ZN3TCB13releaseJoinedEPS_
 426              	_ZN3TCB13releaseJoinedEPS_:
 427              	.LFB58:
  73:src/TCB.cpp   **** 
  74:src/TCB.cpp   **** void TCB::releaseJoined(TCB* handle) {
 428              		.loc 1 74 38 is_stmt 1
 429              		.cfi_startproc
 430              	.LVL35:
 431 0274 130101FE 		addi	sp,sp,-32
 432              		.cfi_def_cfa_offset 32
 433 0278 233C1100 		sd	ra,24(sp)
 434 027c 23388100 		sd	s0,16(sp)
 435 0280 23349100 		sd	s1,8(sp)
 436              		.cfi_offset 1, -8
 437              		.cfi_offset 8, -16
 438              		.cfi_offset 9, -24
 439 0284 13040102 		addi	s0,sp,32
 440              		.cfi_def_cfa 8, 0
 441 0288 93040500 		mv	s1,a0
 442              	.LVL36:
 443              	.L32:
  75:src/TCB.cpp   ****     while (!handle->waitingToJoin.isEmpty()) {
 444              		.loc 1 75 5
GAS LISTING /tmp/cc0rwuL0.s 			page 15


 445              		.loc 1 75 12
 446              	.LBB49:
 447              	.LBB50:
  34:src/../h/../h/ThreadQueue.hpp **** 
  35:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue(const ThreadQueue &) = delete;
  36:src/../h/../h/ThreadQueue.hpp **** 
  37:src/../h/../h/ThreadQueue.hpp ****     ThreadQueue &operator=(const ThreadQueue &) = delete;
  38:src/../h/../h/ThreadQueue.hpp **** 
  39:src/../h/../h/ThreadQueue.hpp ****     ~ThreadQueue() {
  40:src/../h/../h/ThreadQueue.hpp ****         while (!isEmpty()) {
  41:src/../h/../h/ThreadQueue.hpp ****             Node* node = front;
  42:src/../h/../h/ThreadQueue.hpp ****             front = front->next;
  43:src/../h/../h/ThreadQueue.hpp ****             delete node;
  44:src/../h/../h/ThreadQueue.hpp ****         }
  45:src/../h/../h/ThreadQueue.hpp ****     }
  46:src/../h/../h/ThreadQueue.hpp **** 
  47:src/../h/../h/ThreadQueue.hpp ****     bool isEmpty() const {
  48:src/../h/../h/ThreadQueue.hpp ****         return front == nullptr;
 448              		.loc 4 48 9
 449              		.loc 4 48 16 is_stmt 0
 450 028c 83B78404 		ld	a5,72(s1)
 451              	.LVL37:
 452              	.LBE50:
 453              	.LBE49:
 454              		.loc 1 75 12
 455 0290 638E0700 		beqz	a5,.L30
 456              	.LBB51:
  76:src/TCB.cpp   ****         TCB* tcb = handle->waitingToJoin.getFirst();
 457              		.loc 1 76 9 is_stmt 1
 458              		.loc 1 76 50 is_stmt 0
 459 0294 13858404 		addi	a0,s1,72
 460 0298 97000000 		call	_ZN11ThreadQueue8getFirstEv@plt
 460      E7800000 
 461              	.LVL38:
  77:src/TCB.cpp   ****         Scheduler::put(tcb);
 462              		.loc 1 77 9 is_stmt 1
 463              		.loc 1 77 23 is_stmt 0
 464 02a0 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 464      E7800000 
 465              	.LVL39:
 466              	.LBE51:
  75:src/TCB.cpp   ****         TCB* tcb = handle->waitingToJoin.getFirst();
 467              		.loc 1 75 5
 468 02a8 6FF05FFE 		j	.L32
 469              	.L30:
  78:src/TCB.cpp   ****     }
  79:src/TCB.cpp   **** }
 470              		.loc 1 79 1
 471 02ac 83308101 		ld	ra,24(sp)
 472              		.cfi_restore 1
 473 02b0 03340101 		ld	s0,16(sp)
 474              		.cfi_restore 8
 475              		.cfi_def_cfa 2, 32
 476 02b4 83348100 		ld	s1,8(sp)
 477              		.cfi_restore 9
 478              	.LVL40:
 479 02b8 13010102 		addi	sp,sp,32
GAS LISTING /tmp/cc0rwuL0.s 			page 16


 480              		.cfi_def_cfa_offset 0
 481 02bc 67800000 		jr	ra
 482              		.cfi_endproc
 483              	.LFE58:
 485              		.align	2
 486              		.globl	_ZN3TCB10quitThreadEPS_
 488              	_ZN3TCB10quitThreadEPS_:
 489              	.LFB59:
  80:src/TCB.cpp   **** 
  81:src/TCB.cpp   **** void TCB::quitThread(TCB* handle) {
 490              		.loc 1 81 35 is_stmt 1
 491              		.cfi_startproc
 492              	.LVL41:
 493 02c0 130101FE 		addi	sp,sp,-32
 494              		.cfi_def_cfa_offset 32
 495 02c4 233C1100 		sd	ra,24(sp)
 496 02c8 23388100 		sd	s0,16(sp)
 497 02cc 23349100 		sd	s1,8(sp)
 498              		.cfi_offset 1, -8
 499              		.cfi_offset 8, -16
 500              		.cfi_offset 9, -24
 501 02d0 13040102 		addi	s0,sp,32
 502              		.cfi_def_cfa 8, 0
 503 02d4 93040500 		mv	s1,a0
  82:src/TCB.cpp   ****     TCB* prev, * curr;
 504              		.loc 1 82 5
  83:src/TCB.cpp   ****     switch (handle->status) {
 505              		.loc 1 83 5
 506              		.loc 1 83 21 is_stmt 0
 507 02d8 83278505 		lw	a5,88(a0)
 508              		.loc 1 83 5
 509 02dc 13073000 		li	a4,3
 510 02e0 638CE70C 		beq	a5,a4,.L35
 511 02e4 6366F702 		bgtu	a5,a4,.L36
 512 02e8 13071000 		li	a4,1
 513 02ec 6386E704 		beq	a5,a4,.L37
 514 02f0 13072000 		li	a4,2
 515 02f4 6392E708 		bne	a5,a4,.L39
  84:src/TCB.cpp   ****         case CREATED:
  85:src/TCB.cpp   ****             break;
  86:src/TCB.cpp   ****         case ACTIVE:
  87:src/TCB.cpp   ****             //nit je u Scheduler-u, treba da se izbaci nit i preveze Scheduler
  88:src/TCB.cpp   ****             for (prev = nullptr, curr = Scheduler::getHead();
  89:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
  90:src/TCB.cpp   ****             if (!prev) {
  91:src/TCB.cpp   ****                 Scheduler::setHead(curr->nextInScheduler);
  92:src/TCB.cpp   ****             } else {
  93:src/TCB.cpp   ****                 prev->nextInScheduler = curr->nextInScheduler;
  94:src/TCB.cpp   ****             }
  95:src/TCB.cpp   ****             if (curr == Scheduler::getTail()) {
  96:src/TCB.cpp   ****                 Scheduler::setTail(prev);
  97:src/TCB.cpp   ****             }
  98:src/TCB.cpp   ****             curr->nextInScheduler = nullptr;
  99:src/TCB.cpp   ****             break;
 100:src/TCB.cpp   ****         case BLOCKED:
 516              		.loc 1 100 9 is_stmt 1
 101:src/TCB.cpp   ****             //nit blokirana na semaforu, treba da se izbaci iz reda blokiranih na semaforu
GAS LISTING /tmp/cc0rwuL0.s 			page 17


 102:src/TCB.cpp   ****             if (handle->mySemaphore->getBlocked()->remove(handle) < 0) {
 517              		.loc 1 102 13
 518              		.loc 1 102 25 is_stmt 0
 519 02f8 03350506 		ld	a0,96(a0)
 520              	.LVL42:
 521              	.LBB52:
 522              	.LBB53:
 523              		.file 5 "src/../h/KSem.hpp"
   1:src/../h/KSem.hpp **** //
   2:src/../h/KSem.hpp **** // Created by os on 6/4/23.
   3:src/../h/KSem.hpp **** //
   4:src/../h/KSem.hpp **** 
   5:src/../h/KSem.hpp **** #ifndef PROJEKAT2023_KSEM_HPP
   6:src/../h/KSem.hpp **** #define PROJEKAT2023_KSEM_HPP
   7:src/../h/KSem.hpp **** 
   8:src/../h/KSem.hpp **** #include "../h/ThreadQueue.hpp"
   9:src/../h/KSem.hpp **** 
  10:src/../h/KSem.hpp **** //klasa napravljena po uzoru na semafor u skolskom jezgru
  11:src/../h/KSem.hpp **** class KSem {
  12:src/../h/KSem.hpp **** public:
  13:src/../h/KSem.hpp ****     static KSem* initSem(uint val);
  14:src/../h/KSem.hpp **** 
  15:src/../h/KSem.hpp ****     int wait();
  16:src/../h/KSem.hpp **** 
  17:src/../h/KSem.hpp ****     int signal();
  18:src/../h/KSem.hpp **** 
  19:src/../h/KSem.hpp ****     //deaktiviranje semafora i oslobadjanje svih niti koje cekaju na njemu
  20:src/../h/KSem.hpp ****     static int closeSem(sem_t handle);
  21:src/../h/KSem.hpp **** 
  22:src/../h/KSem.hpp ****     static void* operator new(size_t size);
  23:src/../h/KSem.hpp **** 
  24:src/../h/KSem.hpp ****     static void operator delete(void* ptr);
  25:src/../h/KSem.hpp **** 
  26:src/../h/KSem.hpp ****     ThreadQueue* getBlocked() { return &blocked; }
 524              		.loc 5 26 33 is_stmt 1
 525              	.LBE53:
 526              	.LBE52:
 527              		.loc 1 102 58 is_stmt 0
 528 02fc 93850400 		mv	a1,s1
 529 0300 13058500 		addi	a0,a0,8
 530 0304 97000000 		call	_ZN11ThreadQueue6removeEP3TCB@plt
 530      E7800000 
 531              	.LVL43:
 532 030c 6F00C006 		j	.L39
 533              	.L36:
  83:src/TCB.cpp   ****         case CREATED:
 534              		.loc 1 83 5
 535 0310 13074000 		li	a4,4
 536 0314 6392E706 		bne	a5,a4,.L39
 103:src/TCB.cpp   ****                 //greska
 104:src/TCB.cpp   ****             }
 105:src/TCB.cpp   ****             break;
 106:src/TCB.cpp   ****         case JOINING:
 107:src/TCB.cpp   ****             //nit ceka da se neka druga nit zavrsi
 108:src/TCB.cpp   ****             if (handle->joiningWithTCB->getListOfJoiningThreads()->remove(handle) < 0) {
 109:src/TCB.cpp   ****                 //greska
 110:src/TCB.cpp   ****             }
GAS LISTING /tmp/cc0rwuL0.s 			page 18


 111:src/TCB.cpp   ****             break;
 112:src/TCB.cpp   ****         case SLEEPING:
 537              		.loc 1 112 9 is_stmt 1
 113:src/TCB.cpp   ****             //nit je u redu uspavanih, treba da se izbaci
 114:src/TCB.cpp   ****             for (prev = nullptr, curr = Scheduler::getSleepingHead();
 538              		.loc 1 114 13
 539              	.LVL44:
 540              	.LBB54:
 541              	.LBB55:
 542              		.file 6 "src/../h/Scheduler.hpp"
   1:src/../h/Scheduler.hpp **** //
   2:src/../h/Scheduler.hpp **** // Created by os on 5/25/23.
   3:src/../h/Scheduler.hpp **** //
   4:src/../h/Scheduler.hpp **** 
   5:src/../h/Scheduler.hpp **** #ifndef PROJEKAT2023_SCHEDULER_HPP
   6:src/../h/Scheduler.hpp **** #define PROJEKAT2023_SCHEDULER_HPP
   7:src/../h/Scheduler.hpp **** 
   8:src/../h/Scheduler.hpp **** class TCB;
   9:src/../h/Scheduler.hpp **** 
  10:src/../h/Scheduler.hpp **** typedef unsigned long time_t;
  11:src/../h/Scheduler.hpp **** 
  12:src/../h/Scheduler.hpp **** class Scheduler {
  13:src/../h/Scheduler.hpp **** private:
  14:src/../h/Scheduler.hpp ****     static TCB* head, * tail;
  15:src/../h/Scheduler.hpp ****     static TCB* sleepingHead;
  16:src/../h/Scheduler.hpp **** 
  17:src/../h/Scheduler.hpp ****     Scheduler() {}
  18:src/../h/Scheduler.hpp **** 
  19:src/../h/Scheduler.hpp **** public:
  20:src/../h/Scheduler.hpp ****     //stavljanje na kraj reda aktivnih niti
  21:src/../h/Scheduler.hpp ****     static void put(TCB* tcb);
  22:src/../h/Scheduler.hpp **** 
  23:src/../h/Scheduler.hpp ****     //uzimanje sa pocetka reda aktivnih niti
  24:src/../h/Scheduler.hpp ****     static TCB* get();
  25:src/../h/Scheduler.hpp **** 
  26:src/../h/Scheduler.hpp ****     //stavljanje u red uspavanih niti
  27:src/../h/Scheduler.hpp ****     static void putToSleep(TCB* tcb, time_t sleepTime);
  28:src/../h/Scheduler.hpp **** 
  29:src/../h/Scheduler.hpp ****     //azuriranje vrednosti u redu uspavanih niti, budjenje niti po potrebi
  30:src/../h/Scheduler.hpp ****     static void wake();
  31:src/../h/Scheduler.hpp **** 
  32:src/../h/Scheduler.hpp ****     static TCB* getHead() { return head; }
  33:src/../h/Scheduler.hpp **** 
  34:src/../h/Scheduler.hpp ****     static void setHead(TCB* tcb) { head = tcb; }
  35:src/../h/Scheduler.hpp **** 
  36:src/../h/Scheduler.hpp ****     static TCB* getTail() { return tail; }
  37:src/../h/Scheduler.hpp **** 
  38:src/../h/Scheduler.hpp ****     static void setTail(TCB* tcb) { tail = tcb; }
  39:src/../h/Scheduler.hpp **** 
  40:src/../h/Scheduler.hpp ****     static TCB* getSleepingHead() { return sleepingHead; }
 543              		.loc 6 40 37
 544              		.loc 6 40 44 is_stmt 0
 545 0318 97070000 		la	a5,_ZN9Scheduler12sleepingHeadE
 545      83B70700 
 546 0320 83B70700 		ld	a5,0(a5)
 547              	.LVL45:
 548              	.LBE55:
GAS LISTING /tmp/cc0rwuL0.s 			page 19


 549              	.LBE54:
 550              		.loc 1 114 23
 551 0324 13070000 		li	a4,0
 552              	.LVL46:
 553              	.L47:
 115:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextSleeping);
 554              		.loc 1 115 23 is_stmt 1 discriminator 2
 555 0328 6384970A 		beq	a5,s1,.L46
 114:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextSleeping);
 556              		.loc 1 114 13 discriminator 1
 557              	.LVL47:
 558              		.loc 1 115 39 is_stmt 0 discriminator 1
 559 032c 13870700 		mv	a4,a5
 560              		.loc 1 115 52 discriminator 1
 561 0330 83B70704 		ld	a5,64(a5)
 562              	.LVL48:
 114:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextSleeping);
 563              		.loc 1 114 13 discriminator 1
 564 0334 6FF05FFF 		j	.L47
 565              	.LVL49:
 566              	.L37:
  86:src/TCB.cpp   ****             //nit je u Scheduler-u, treba da se izbaci nit i preveze Scheduler
 567              		.loc 1 86 9 is_stmt 1
  88:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
 568              		.loc 1 88 13
 569              	.LBB56:
 570              	.LBB57:
  32:src/../h/Scheduler.hpp **** 
 571              		.loc 6 32 29
  32:src/../h/Scheduler.hpp **** 
 572              		.loc 6 32 36 is_stmt 0
 573 0338 97070000 		la	a5,_ZN9Scheduler4headE
 573      83B70700 
 574 0340 83B70700 		ld	a5,0(a5)
 575              	.LVL50:
 576              	.LBE57:
 577              	.LBE56:
  88:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
 578              		.loc 1 88 23
 579 0344 13070000 		li	a4,0
 580              	.LVL51:
 581              	.L42:
  89:src/TCB.cpp   ****             if (!prev) {
 582              		.loc 1 89 23 is_stmt 1 discriminator 2
 583 0348 63889700 		beq	a5,s1,.L41
  88:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
 584              		.loc 1 88 13 discriminator 1
 585              	.LVL52:
  89:src/TCB.cpp   ****             if (!prev) {
 586              		.loc 1 89 39 is_stmt 0 discriminator 1
 587 034c 13870700 		mv	a4,a5
  89:src/TCB.cpp   ****             if (!prev) {
 588              		.loc 1 89 52 discriminator 1
 589 0350 83B70703 		ld	a5,48(a5)
 590              	.LVL53:
  88:src/TCB.cpp   ****                  curr != handle; prev = curr, curr = curr->nextInScheduler);
 591              		.loc 1 88 13 discriminator 1
GAS LISTING /tmp/cc0rwuL0.s 			page 20


 592 0354 6FF05FFF 		j	.L42
 593              	.L41:
  90:src/TCB.cpp   ****                 Scheduler::setHead(curr->nextInScheduler);
 594              		.loc 1 90 13 is_stmt 1
 595 0358 630E0702 		beqz	a4,.L52
  93:src/TCB.cpp   ****             }
 596              		.loc 1 93 17
  93:src/TCB.cpp   ****             }
 597              		.loc 1 93 47 is_stmt 0
 598 035c 83B60703 		ld	a3,48(a5)
  93:src/TCB.cpp   ****             }
 599              		.loc 1 93 39
 600 0360 2338D702 		sd	a3,48(a4)
 601              	.L44:
  95:src/TCB.cpp   ****                 Scheduler::setTail(prev);
 602              		.loc 1 95 13 is_stmt 1
 603              	.LBB58:
 604              	.LBB59:
  36:src/../h/Scheduler.hpp **** 
 605              		.loc 6 36 29
  36:src/../h/Scheduler.hpp **** 
 606              		.loc 6 36 36 is_stmt 0
 607 0364 97060000 		la	a3,_ZN9Scheduler4tailE
 607      83B60600 
 608 036c 83B60600 		ld	a3,0(a3)
 609              	.LBE59:
 610              	.LBE58:
  95:src/TCB.cpp   ****                 Scheduler::setTail(prev);
 611              		.loc 1 95 13
 612 0370 638CD702 		beq	a5,a3,.L53
 613              	.L45:
  98:src/TCB.cpp   ****             break;
 614              		.loc 1 98 13 is_stmt 1
  98:src/TCB.cpp   ****             break;
 615              		.loc 1 98 35 is_stmt 0
 616 0374 23B80702 		sd	zero,48(a5)
  99:src/TCB.cpp   ****         case BLOCKED:
 617              		.loc 1 99 13 is_stmt 1
 618              	.LVL54:
 619              	.L39:
 116:src/TCB.cpp   ****             if (!prev) {
 117:src/TCB.cpp   ****                 Scheduler::setSleepingHead(curr->nextSleeping);
 118:src/TCB.cpp   ****             } else {
 119:src/TCB.cpp   ****                 prev->nextSleeping = curr->nextSleeping;
 120:src/TCB.cpp   ****             }
 121:src/TCB.cpp   ****             if (curr->nextSleeping) {
 122:src/TCB.cpp   ****                 curr->nextSleeping->timeToSleep += curr->timeToSleep;
 123:src/TCB.cpp   ****             }
 124:src/TCB.cpp   ****             curr->timeToSleep = 0;
 125:src/TCB.cpp   ****             curr->nextSleeping = nullptr;
 126:src/TCB.cpp   ****             break;
 127:src/TCB.cpp   ****         case FINISHED:
 128:src/TCB.cpp   ****             break;
 129:src/TCB.cpp   ****         default:
 130:src/TCB.cpp   ****             break;
 131:src/TCB.cpp   ****     }
 132:src/TCB.cpp   ****     handle->status = FINISHED;
GAS LISTING /tmp/cc0rwuL0.s 			page 21


 620              		.loc 1 132 5
 621              		.loc 1 132 20 is_stmt 0
 622 0378 93075000 		li	a5,5
 623 037c 23ACF404 		sw	a5,88(s1)
 133:src/TCB.cpp   **** }
 624              		.loc 1 133 1
 625 0380 83308101 		ld	ra,24(sp)
 626              		.cfi_remember_state
 627              		.cfi_restore 1
 628 0384 03340101 		ld	s0,16(sp)
 629              		.cfi_restore 8
 630              		.cfi_def_cfa 2, 32
 631 0388 83348100 		ld	s1,8(sp)
 632              		.cfi_restore 9
 633              	.LVL55:
 634 038c 13010102 		addi	sp,sp,32
 635              		.cfi_def_cfa_offset 0
 636 0390 67800000 		jr	ra
 637              	.LVL56:
 638              	.L52:
 639              		.cfi_restore_state
  91:src/TCB.cpp   ****             } else {
 640              		.loc 1 91 17 is_stmt 1
  91:src/TCB.cpp   ****             } else {
 641              		.loc 1 91 35 is_stmt 0
 642 0394 03B60703 		ld	a2,48(a5)
 643              	.LVL57:
 644              	.LBB60:
 645              	.LBB61:
  34:src/../h/Scheduler.hpp **** 
 646              		.loc 6 34 37 is_stmt 1
  34:src/../h/Scheduler.hpp **** 
 647              		.loc 6 34 42 is_stmt 0
 648 0398 97060000 		la	a3,_ZN9Scheduler4headE
 648      83B60600 
 649 03a0 23B0C600 		sd	a2,0(a3)
  34:src/../h/Scheduler.hpp **** 
 650              		.loc 6 34 49
 651 03a4 6FF01FFC 		j	.L44
 652              	.LVL58:
 653              	.L53:
 654              	.LBE61:
 655              	.LBE60:
  96:src/TCB.cpp   ****             }
 656              		.loc 1 96 17 is_stmt 1
 657              	.LBB62:
 658              	.LBB63:
  38:src/../h/Scheduler.hpp **** 
 659              		.loc 6 38 37
  38:src/../h/Scheduler.hpp **** 
 660              		.loc 6 38 42 is_stmt 0
 661 03a8 97060000 		la	a3,_ZN9Scheduler4tailE
 661      83B60600 
 662 03b0 23B0E600 		sd	a4,0(a3)
  38:src/../h/Scheduler.hpp **** 
 663              		.loc 6 38 49
 664 03b4 6FF01FFC 		j	.L45
GAS LISTING /tmp/cc0rwuL0.s 			page 22


 665              	.LVL59:
 666              	.L35:
 667              	.LBE63:
 668              	.LBE62:
 106:src/TCB.cpp   ****             //nit ceka da se neka druga nit zavrsi
 669              		.loc 1 106 9 is_stmt 1
 108:src/TCB.cpp   ****                 //greska
 670              		.loc 1 108 13
 108:src/TCB.cpp   ****                 //greska
 671              		.loc 1 108 25 is_stmt 0
 672 03b8 03358506 		ld	a0,104(a0)
 673              	.LVL60:
 674              	.LBB64:
 675              	.LBB65:
  33:src/../h/TCB.hpp **** 
 676              		.loc 3 33 44 is_stmt 1
 677              	.LBE65:
 678              	.LBE64:
 108:src/TCB.cpp   ****                 //greska
 679              		.loc 1 108 74 is_stmt 0
 680 03bc 93850400 		mv	a1,s1
 681 03c0 13058504 		addi	a0,a0,72
 682 03c4 97000000 		call	_ZN11ThreadQueue6removeEP3TCB@plt
 682      E7800000 
 683              	.LVL61:
 684 03cc 6FF0DFFA 		j	.L39
 685              	.LVL62:
 686              	.L46:
 116:src/TCB.cpp   ****                 Scheduler::setSleepingHead(curr->nextSleeping);
 687              		.loc 1 116 13 is_stmt 1
 688 03d0 63080702 		beqz	a4,.L54
 119:src/TCB.cpp   ****             }
 689              		.loc 1 119 17
 119:src/TCB.cpp   ****             }
 690              		.loc 1 119 44 is_stmt 0
 691 03d4 83B60704 		ld	a3,64(a5)
 119:src/TCB.cpp   ****             }
 692              		.loc 1 119 36
 693 03d8 2330D704 		sd	a3,64(a4)
 694              	.LVL63:
 695              	.L49:
 121:src/TCB.cpp   ****                 curr->nextSleeping->timeToSleep += curr->timeToSleep;
 696              		.loc 1 121 13 is_stmt 1
 121:src/TCB.cpp   ****                 curr->nextSleeping->timeToSleep += curr->timeToSleep;
 697              		.loc 1 121 23 is_stmt 0
 698 03dc 03B70704 		ld	a4,64(a5)
 121:src/TCB.cpp   ****                 curr->nextSleeping->timeToSleep += curr->timeToSleep;
 699              		.loc 1 121 13
 700 03e0 630A0700 		beqz	a4,.L50
 122:src/TCB.cpp   ****             }
 701              		.loc 1 122 17 is_stmt 1
 122:src/TCB.cpp   ****             }
 702              		.loc 1 122 58 is_stmt 0
 703 03e4 03B68703 		ld	a2,56(a5)
 122:src/TCB.cpp   ****             }
 704              		.loc 1 122 49
 705 03e8 83368703 		ld	a3,56(a4)
GAS LISTING /tmp/cc0rwuL0.s 			page 23


 706 03ec B386C600 		add	a3,a3,a2
 707 03f0 233CD702 		sd	a3,56(a4)
 708              	.L50:
 124:src/TCB.cpp   ****             curr->nextSleeping = nullptr;
 709              		.loc 1 124 13 is_stmt 1
 124:src/TCB.cpp   ****             curr->nextSleeping = nullptr;
 710              		.loc 1 124 31 is_stmt 0
 711 03f4 23BC0702 		sd	zero,56(a5)
 125:src/TCB.cpp   ****             break;
 712              		.loc 1 125 13 is_stmt 1
 125:src/TCB.cpp   ****             break;
 713              		.loc 1 125 32 is_stmt 0
 714 03f8 23B00704 		sd	zero,64(a5)
 126:src/TCB.cpp   ****         case FINISHED:
 715              		.loc 1 126 13 is_stmt 1
 716 03fc 6FF0DFF7 		j	.L39
 717              	.LVL64:
 718              	.L54:
 117:src/TCB.cpp   ****             } else {
 719              		.loc 1 117 17
 117:src/TCB.cpp   ****             } else {
 720              		.loc 1 117 43 is_stmt 0
 721 0400 83B60704 		ld	a3,64(a5)
 722              	.LVL65:
 723              	.LBB66:
 724              	.LBB67:
  41:src/../h/Scheduler.hpp **** 
  42:src/../h/Scheduler.hpp ****     static void setSleepingHead(TCB* tcb) { sleepingHead = tcb; }
 725              		.loc 6 42 45 is_stmt 1
 726              		.loc 6 42 58 is_stmt 0
 727 0404 17070000 		la	a4,_ZN9Scheduler12sleepingHeadE
 727      03370700 
 728              	.LVL66:
 729 040c 2330D700 		sd	a3,0(a4)
 730              		.loc 6 42 65
 731 0410 6FF0DFFC 		j	.L49
 732              	.LBE67:
 733              	.LBE66:
 734              		.cfi_endproc
 735              	.LFE59:
 737              		.globl	_ZN3TCB16runningTimeSliceE
 738              		.globl	_ZN3TCB7runningE
 739              		.bss
 740              		.align	3
 741              		.set	.LANCHOR0,. + 0
 744              	_ZN3TCB7runningE:
 745 0000 00000000 		.zero	8
 745      00000000 
 748              	_ZN3TCB16runningTimeSliceE:
 749 0008 00000000 		.zero	8
 749      00000000 
 750              		.text
 751              	.Letext0:
 752              		.file 7 "src/../h/../lib/hw.h"
 753              		.file 8 "src/../h/../h/../h/syscall_c.hpp"
GAS LISTING /tmp/cc0rwuL0.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 TCB.cpp
     /tmp/cc0rwuL0.s:9      .text:0000000000000000 _ZN3TCB7wrapperEv
     /tmp/cc0rwuL0.s:13     .text:0000000000000000 .L0 
     /tmp/cc0rwuL0.s:14     .text:0000000000000000 .L0 
     /tmp/cc0rwuL0.s:15     .text:0000000000000004 .L0 
     /tmp/cc0rwuL0.s:18     .text:000000000000000c .L0 
     /tmp/cc0rwuL0.s:19     .text:000000000000000c .L0 
     /tmp/cc0rwuL0.s:21     .text:0000000000000010 .L0 
     /tmp/cc0rwuL0.s:23     .text:0000000000000010 .L0 
     /tmp/cc0rwuL0.s:24     .text:0000000000000010 .L0 
     /tmp/cc0rwuL0.s:27     .text:0000000000000018 .L0 
     /tmp/cc0rwuL0.s:28     .text:0000000000000018 .L0 
     /tmp/cc0rwuL0.s:31     .text:0000000000000024 .L0 
     /tmp/cc0rwuL0.s:35     .text:000000000000002c .L0 
     /tmp/cc0rwuL0.s:36     .text:000000000000002c .L0 
     /tmp/cc0rwuL0.s:39     .text:0000000000000034 .L0 
     /tmp/cc0rwuL0.s:40     .text:0000000000000038 .L0 
     /tmp/cc0rwuL0.s:42     .text:000000000000003c .L0 
     /tmp/cc0rwuL0.s:43     .text:000000000000003c .L0 
     /tmp/cc0rwuL0.s:45     .text:0000000000000040 .L0 
     /tmp/cc0rwuL0.s:47     .text:0000000000000044 .L0 
     /tmp/cc0rwuL0.s:53     .text:0000000000000044 _ZN3TCB8dispatchEv
     /tmp/cc0rwuL0.s:56     .text:0000000000000044 .L0 
     /tmp/cc0rwuL0.s:57     .text:0000000000000044 .L0 
     /tmp/cc0rwuL0.s:58     .text:0000000000000048 .L0 
     /tmp/cc0rwuL0.s:62     .text:0000000000000054 .L0 
     /tmp/cc0rwuL0.s:63     .text:0000000000000054 .L0 
     /tmp/cc0rwuL0.s:64     .text:0000000000000054 .L0 
     /tmp/cc0rwuL0.s:66     .text:0000000000000058 .L0 
     /tmp/cc0rwuL0.s:68     .text:0000000000000058 .L0 
     /tmp/cc0rwuL0.s:69     .text:0000000000000058 .L0 
     /tmp/cc0rwuL0.s:72     .text:0000000000000060 .L0 
     /tmp/cc0rwuL0.s:73     .text:0000000000000060 .L0 
     /tmp/cc0rwuL0.s:75     .text:0000000000000064 .L0 
     /tmp/cc0rwuL0.s:78     .text:000000000000006c .L0 
     /tmp/cc0rwuL0.s:82     .text:0000000000000074 .L0 
     /tmp/cc0rwuL0.s:83     .text:0000000000000074 .L0 
     /tmp/cc0rwuL0.s:87     .text:0000000000000080 .L0 
     /tmp/cc0rwuL0.s:90     .text:000000000000008c .L0 
     /tmp/cc0rwuL0.s:91     .text:000000000000008c .L0 
     /tmp/cc0rwuL0.s:93     .text:0000000000000090 .L0 
     /tmp/cc0rwuL0.s:94     .text:0000000000000090 .L0 
     /tmp/cc0rwuL0.s:96     .text:0000000000000094 .L0 
     /tmp/cc0rwuL0.s:99     .text:00000000000000a0 .L0 
     /tmp/cc0rwuL0.s:102    .text:00000000000000ac .L0 
     /tmp/cc0rwuL0.s:109    .text:00000000000000b8 .L0 
     /tmp/cc0rwuL0.s:110    .text:00000000000000b8 .L0 
     /tmp/cc0rwuL0.s:111    .text:00000000000000b8 .L0 
     /tmp/cc0rwuL0.s:118    .text:00000000000000c0 .L0 
     /tmp/cc0rwuL0.s:124    .text:00000000000000c4 .L0 
     /tmp/cc0rwuL0.s:125    .text:00000000000000c4 .L0 
     /tmp/cc0rwuL0.s:131    .text:00000000000000d4 .L0 
     /tmp/cc0rwuL0.s:132    .text:00000000000000d4 .L0 
     /tmp/cc0rwuL0.s:134    .text:00000000000000d8 .L0 
     /tmp/cc0rwuL0.s:136    .text:00000000000000dc .L0 
     /tmp/cc0rwuL0.s:140    .text:00000000000000e4 .L0 
GAS LISTING /tmp/cc0rwuL0.s 			page 25


     /tmp/cc0rwuL0.s:141    .text:00000000000000e4 .L0 
     /tmp/cc0rwuL0.s:148    .text:00000000000000ec .L0 
     /tmp/cc0rwuL0.s:149    .text:00000000000000ec .L0 
     /tmp/cc0rwuL0.s:150    .text:00000000000000ec .L0 
     /tmp/cc0rwuL0.s:161    .text:00000000000000f4 .L0 
     /tmp/cc0rwuL0.s:163    .text:00000000000000f8 .L0 
     /tmp/cc0rwuL0.s:164    .text:00000000000000f8 .L0 
     /tmp/cc0rwuL0.s:169    .text:0000000000000104 .L0 
     /tmp/cc0rwuL0.s:170    .text:0000000000000108 .L0 
     /tmp/cc0rwuL0.s:172    .text:000000000000010c .L0 
     /tmp/cc0rwuL0.s:173    .text:000000000000010c .L0 
     /tmp/cc0rwuL0.s:175    .text:0000000000000110 .L0 
     /tmp/cc0rwuL0.s:178    .text:0000000000000114 .L0 
     /tmp/cc0rwuL0.s:180    .text:0000000000000118 .L0 
     /tmp/cc0rwuL0.s:186    .text:0000000000000118 _ZN3TCBnwEm
     /tmp/cc0rwuL0.s:189    .text:0000000000000118 .L0 
     /tmp/cc0rwuL0.s:191    .text:0000000000000118 .L0 
     /tmp/cc0rwuL0.s:192    .text:000000000000011c .L0 
     /tmp/cc0rwuL0.s:195    .text:0000000000000124 .L0 
     /tmp/cc0rwuL0.s:196    .text:0000000000000124 .L0 
     /tmp/cc0rwuL0.s:198    .text:0000000000000128 .L0 
     /tmp/cc0rwuL0.s:200    .text:0000000000000128 .L0 
     /tmp/cc0rwuL0.s:201    .text:0000000000000128 .L0 
     /tmp/cc0rwuL0.s:204    .text:0000000000000130 .L0 
     /tmp/cc0rwuL0.s:205    .text:0000000000000134 .L0 
     /tmp/cc0rwuL0.s:207    .text:0000000000000138 .L0 
     /tmp/cc0rwuL0.s:208    .text:0000000000000138 .L0 
     /tmp/cc0rwuL0.s:210    .text:000000000000013c .L0 
     /tmp/cc0rwuL0.s:212    .text:0000000000000140 .L0 
     /tmp/cc0rwuL0.s:218    .text:0000000000000140 _ZN3TCB12createThreadEPFvPvES0_Pm
     /tmp/cc0rwuL0.s:221    .text:0000000000000140 .L0 
     /tmp/cc0rwuL0.s:223    .text:0000000000000140 .L0 
     /tmp/cc0rwuL0.s:224    .text:0000000000000144 .L0 
     /tmp/cc0rwuL0.s:230    .text:0000000000000158 .L0 
     /tmp/cc0rwuL0.s:231    .text:0000000000000158 .L0 
     /tmp/cc0rwuL0.s:232    .text:0000000000000158 .L0 
     /tmp/cc0rwuL0.s:233    .text:0000000000000158 .L0 
     /tmp/cc0rwuL0.s:234    .text:0000000000000158 .L0 
     /tmp/cc0rwuL0.s:236    .text:000000000000015c .L0 
     /tmp/cc0rwuL0.s:241    .text:0000000000000168 .L0 
     /tmp/cc0rwuL0.s:242    .text:0000000000000168 .L0 
     /tmp/cc0rwuL0.s:250    .text:0000000000000174 .L0 
     /tmp/cc0rwuL0.s:263    .text:0000000000000194 .L0 
     /tmp/cc0rwuL0.s:269    .text:000000000000019c .L0 
     /tmp/cc0rwuL0.s:274    .text:00000000000001a8 .L0 
     /tmp/cc0rwuL0.s:275    .text:00000000000001a8 .L0 
     /tmp/cc0rwuL0.s:281    .text:00000000000001bc .L0 
     /tmp/cc0rwuL0.s:282    .text:00000000000001bc .L0 
     /tmp/cc0rwuL0.s:284    .text:00000000000001c0 .L0 
     /tmp/cc0rwuL0.s:289    .text:00000000000001c8 .L0 
     /tmp/cc0rwuL0.s:290    .text:00000000000001c8 .L0 
     /tmp/cc0rwuL0.s:292    .text:00000000000001cc .L0 
     /tmp/cc0rwuL0.s:293    .text:00000000000001cc .L0 
     /tmp/cc0rwuL0.s:299    .text:00000000000001d0 .L0 
     /tmp/cc0rwuL0.s:300    .text:00000000000001d0 .L0 
     /tmp/cc0rwuL0.s:301    .text:00000000000001d4 .L0 
     /tmp/cc0rwuL0.s:302    .text:00000000000001d4 .L0 
GAS LISTING /tmp/cc0rwuL0.s 			page 26


     /tmp/cc0rwuL0.s:304    .text:00000000000001d8 .L0 
     /tmp/cc0rwuL0.s:305    .text:00000000000001d8 .L0 
     /tmp/cc0rwuL0.s:307    .text:00000000000001dc .L0 
     /tmp/cc0rwuL0.s:310    .text:00000000000001e0 .L0 
     /tmp/cc0rwuL0.s:313    .text:00000000000001e4 .L0 
     /tmp/cc0rwuL0.s:316    .text:00000000000001e8 .L0 
     /tmp/cc0rwuL0.s:320    .text:00000000000001ec .L0 
     /tmp/cc0rwuL0.s:325    .text:00000000000001ec .L0 
     /tmp/cc0rwuL0.s:330    .text:00000000000001f4 .L0 
     /tmp/cc0rwuL0.s:336    .text:00000000000001fc .L0 
     /tmp/cc0rwuL0.s:342    .text:00000000000001fc _ZN3TCBdlEPv
     /tmp/cc0rwuL0.s:345    .text:00000000000001fc .L0 
     /tmp/cc0rwuL0.s:347    .text:00000000000001fc .L0 
     /tmp/cc0rwuL0.s:348    .text:0000000000000200 .L0 
     /tmp/cc0rwuL0.s:351    .text:0000000000000208 .L0 
     /tmp/cc0rwuL0.s:352    .text:0000000000000208 .L0 
     /tmp/cc0rwuL0.s:354    .text:000000000000020c .L0 
     /tmp/cc0rwuL0.s:356    .text:000000000000020c .L0 
     /tmp/cc0rwuL0.s:357    .text:000000000000020c .L0 
     /tmp/cc0rwuL0.s:360    .text:0000000000000214 .L0 
     /tmp/cc0rwuL0.s:361    .text:0000000000000218 .L0 
     /tmp/cc0rwuL0.s:363    .text:000000000000021c .L0 
     /tmp/cc0rwuL0.s:364    .text:000000000000021c .L0 
     /tmp/cc0rwuL0.s:366    .text:0000000000000220 .L0 
     /tmp/cc0rwuL0.s:368    .text:0000000000000224 .L0 
     /tmp/cc0rwuL0.s:374    .text:0000000000000224 _ZN3TCB10threadJoinEPS_
     /tmp/cc0rwuL0.s:377    .text:0000000000000224 .L0 
     /tmp/cc0rwuL0.s:379    .text:0000000000000224 .L0 
     /tmp/cc0rwuL0.s:380    .text:0000000000000224 .L0 
     /tmp/cc0rwuL0.s:381    .text:0000000000000224 .L0 
     /tmp/cc0rwuL0.s:383    .text:0000000000000228 .L0 
     /tmp/cc0rwuL0.s:386    .text:0000000000000230 .L0 
     /tmp/cc0rwuL0.s:388    .text:0000000000000238 .L0 
     /tmp/cc0rwuL0.s:390    .text:000000000000023c .L0 
     /tmp/cc0rwuL0.s:391    .text:0000000000000240 .L0 
     /tmp/cc0rwuL0.s:394    .text:0000000000000248 .L0 
     /tmp/cc0rwuL0.s:395    .text:0000000000000248 .L0 
     /tmp/cc0rwuL0.s:397    .text:000000000000024c .L0 
     /tmp/cc0rwuL0.s:399    .text:000000000000024c .L0 
     /tmp/cc0rwuL0.s:400    .text:000000000000024c .L0 
     /tmp/cc0rwuL0.s:403    .text:0000000000000254 .L0 
     /tmp/cc0rwuL0.s:404    .text:0000000000000254 .L0 
     /tmp/cc0rwuL0.s:409    .text:0000000000000260 .L0 
     /tmp/cc0rwuL0.s:410    .text:0000000000000264 .L0 
     /tmp/cc0rwuL0.s:412    .text:0000000000000268 .L0 
     /tmp/cc0rwuL0.s:413    .text:0000000000000268 .L0 
     /tmp/cc0rwuL0.s:415    .text:000000000000026c .L0 
     /tmp/cc0rwuL0.s:420    .text:0000000000000274 .L0 
     /tmp/cc0rwuL0.s:426    .text:0000000000000274 _ZN3TCB13releaseJoinedEPS_
     /tmp/cc0rwuL0.s:429    .text:0000000000000274 .L0 
     /tmp/cc0rwuL0.s:431    .text:0000000000000274 .L0 
     /tmp/cc0rwuL0.s:432    .text:0000000000000278 .L0 
     /tmp/cc0rwuL0.s:436    .text:0000000000000284 .L0 
     /tmp/cc0rwuL0.s:437    .text:0000000000000284 .L0 
     /tmp/cc0rwuL0.s:438    .text:0000000000000284 .L0 
     /tmp/cc0rwuL0.s:440    .text:0000000000000288 .L0 
     /tmp/cc0rwuL0.s:445    .text:000000000000028c .L0 
GAS LISTING /tmp/cc0rwuL0.s 			page 27


     /tmp/cc0rwuL0.s:448    .text:000000000000028c .L0 
     /tmp/cc0rwuL0.s:449    .text:000000000000028c .L0 
     /tmp/cc0rwuL0.s:450    .text:000000000000028c .L0 
     /tmp/cc0rwuL0.s:455    .text:0000000000000290 .L0 
     /tmp/cc0rwuL0.s:458    .text:0000000000000294 .L0 
     /tmp/cc0rwuL0.s:459    .text:0000000000000294 .L0 
     /tmp/cc0rwuL0.s:463    .text:00000000000002a0 .L0 
     /tmp/cc0rwuL0.s:464    .text:00000000000002a0 .L0 
     /tmp/cc0rwuL0.s:468    .text:00000000000002a8 .L0 
     /tmp/cc0rwuL0.s:471    .text:00000000000002ac .L0 
     /tmp/cc0rwuL0.s:472    .text:00000000000002b0 .L0 
     /tmp/cc0rwuL0.s:474    .text:00000000000002b4 .L0 
     /tmp/cc0rwuL0.s:475    .text:00000000000002b4 .L0 
     /tmp/cc0rwuL0.s:477    .text:00000000000002b8 .L0 
     /tmp/cc0rwuL0.s:480    .text:00000000000002bc .L0 
     /tmp/cc0rwuL0.s:482    .text:00000000000002c0 .L0 
     /tmp/cc0rwuL0.s:488    .text:00000000000002c0 _ZN3TCB10quitThreadEPS_
     /tmp/cc0rwuL0.s:491    .text:00000000000002c0 .L0 
     /tmp/cc0rwuL0.s:493    .text:00000000000002c0 .L0 
     /tmp/cc0rwuL0.s:494    .text:00000000000002c4 .L0 
     /tmp/cc0rwuL0.s:498    .text:00000000000002d0 .L0 
     /tmp/cc0rwuL0.s:499    .text:00000000000002d0 .L0 
     /tmp/cc0rwuL0.s:500    .text:00000000000002d0 .L0 
     /tmp/cc0rwuL0.s:502    .text:00000000000002d4 .L0 
     /tmp/cc0rwuL0.s:505    .text:00000000000002d8 .L0 
     /tmp/cc0rwuL0.s:506    .text:00000000000002d8 .L0 
     /tmp/cc0rwuL0.s:507    .text:00000000000002d8 .L0 
     /tmp/cc0rwuL0.s:509    .text:00000000000002dc .L0 
     /tmp/cc0rwuL0.s:517    .text:00000000000002f8 .L0 
     /tmp/cc0rwuL0.s:518    .text:00000000000002f8 .L0 
     /tmp/cc0rwuL0.s:519    .text:00000000000002f8 .L0 
     /tmp/cc0rwuL0.s:527    .text:00000000000002fc .L0 
     /tmp/cc0rwuL0.s:528    .text:00000000000002fc .L0 
     /tmp/cc0rwuL0.s:535    .text:0000000000000310 .L0 
     /tmp/cc0rwuL0.s:538    .text:0000000000000318 .L0 
     /tmp/cc0rwuL0.s:543    .text:0000000000000318 .L0 
     /tmp/cc0rwuL0.s:544    .text:0000000000000318 .L0 
     /tmp/cc0rwuL0.s:545    .text:0000000000000318 .L0 
     /tmp/cc0rwuL0.s:551    .text:0000000000000324 .L0 
     /tmp/cc0rwuL0.s:555    .text:0000000000000328 .L0 
     /tmp/cc0rwuL0.s:558    .text:000000000000032c .L0 
     /tmp/cc0rwuL0.s:559    .text:000000000000032c .L0 
     /tmp/cc0rwuL0.s:561    .text:0000000000000330 .L0 
     /tmp/cc0rwuL0.s:564    .text:0000000000000334 .L0 
     /tmp/cc0rwuL0.s:568    .text:0000000000000338 .L0 
     /tmp/cc0rwuL0.s:571    .text:0000000000000338 .L0 
     /tmp/cc0rwuL0.s:572    .text:0000000000000338 .L0 
     /tmp/cc0rwuL0.s:573    .text:0000000000000338 .L0 
     /tmp/cc0rwuL0.s:579    .text:0000000000000344 .L0 
     /tmp/cc0rwuL0.s:583    .text:0000000000000348 .L0 
     /tmp/cc0rwuL0.s:586    .text:000000000000034c .L0 
     /tmp/cc0rwuL0.s:587    .text:000000000000034c .L0 
     /tmp/cc0rwuL0.s:589    .text:0000000000000350 .L0 
     /tmp/cc0rwuL0.s:592    .text:0000000000000354 .L0 
     /tmp/cc0rwuL0.s:595    .text:0000000000000358 .L0 
     /tmp/cc0rwuL0.s:597    .text:000000000000035c .L0 
     /tmp/cc0rwuL0.s:598    .text:000000000000035c .L0 
GAS LISTING /tmp/cc0rwuL0.s 			page 28


     /tmp/cc0rwuL0.s:600    .text:0000000000000360 .L0 
     /tmp/cc0rwuL0.s:605    .text:0000000000000364 .L0 
     /tmp/cc0rwuL0.s:606    .text:0000000000000364 .L0 
     /tmp/cc0rwuL0.s:607    .text:0000000000000364 .L0 
     /tmp/cc0rwuL0.s:612    .text:0000000000000370 .L0 
     /tmp/cc0rwuL0.s:615    .text:0000000000000374 .L0 
     /tmp/cc0rwuL0.s:616    .text:0000000000000374 .L0 
     /tmp/cc0rwuL0.s:620    .text:0000000000000378 .L0 
     /tmp/cc0rwuL0.s:621    .text:0000000000000378 .L0 
     /tmp/cc0rwuL0.s:622    .text:0000000000000378 .L0 
     /tmp/cc0rwuL0.s:625    .text:0000000000000380 .L0 
     /tmp/cc0rwuL0.s:626    .text:0000000000000384 .L0 
     /tmp/cc0rwuL0.s:627    .text:0000000000000384 .L0 
     /tmp/cc0rwuL0.s:629    .text:0000000000000388 .L0 
     /tmp/cc0rwuL0.s:630    .text:0000000000000388 .L0 
     /tmp/cc0rwuL0.s:632    .text:000000000000038c .L0 
     /tmp/cc0rwuL0.s:635    .text:0000000000000390 .L0 
     /tmp/cc0rwuL0.s:639    .text:0000000000000394 .L0 
     /tmp/cc0rwuL0.s:641    .text:0000000000000394 .L0 
     /tmp/cc0rwuL0.s:642    .text:0000000000000394 .L0 
     /tmp/cc0rwuL0.s:647    .text:0000000000000398 .L0 
     /tmp/cc0rwuL0.s:648    .text:0000000000000398 .L0 
     /tmp/cc0rwuL0.s:651    .text:00000000000003a4 .L0 
     /tmp/cc0rwuL0.s:659    .text:00000000000003a8 .L0 
     /tmp/cc0rwuL0.s:660    .text:00000000000003a8 .L0 
     /tmp/cc0rwuL0.s:661    .text:00000000000003a8 .L0 
     /tmp/cc0rwuL0.s:664    .text:00000000000003b4 .L0 
     /tmp/cc0rwuL0.s:670    .text:00000000000003b8 .L0 
     /tmp/cc0rwuL0.s:671    .text:00000000000003b8 .L0 
     /tmp/cc0rwuL0.s:672    .text:00000000000003b8 .L0 
     /tmp/cc0rwuL0.s:679    .text:00000000000003bc .L0 
     /tmp/cc0rwuL0.s:680    .text:00000000000003bc .L0 
     /tmp/cc0rwuL0.s:688    .text:00000000000003d0 .L0 
     /tmp/cc0rwuL0.s:690    .text:00000000000003d4 .L0 
     /tmp/cc0rwuL0.s:691    .text:00000000000003d4 .L0 
     /tmp/cc0rwuL0.s:693    .text:00000000000003d8 .L0 
     /tmp/cc0rwuL0.s:697    .text:00000000000003dc .L0 
     /tmp/cc0rwuL0.s:698    .text:00000000000003dc .L0 
     /tmp/cc0rwuL0.s:700    .text:00000000000003e0 .L0 
     /tmp/cc0rwuL0.s:702    .text:00000000000003e4 .L0 
     /tmp/cc0rwuL0.s:703    .text:00000000000003e4 .L0 
     /tmp/cc0rwuL0.s:705    .text:00000000000003e8 .L0 
     /tmp/cc0rwuL0.s:710    .text:00000000000003f4 .L0 
     /tmp/cc0rwuL0.s:711    .text:00000000000003f4 .L0 
     /tmp/cc0rwuL0.s:713    .text:00000000000003f8 .L0 
     /tmp/cc0rwuL0.s:714    .text:00000000000003f8 .L0 
     /tmp/cc0rwuL0.s:716    .text:00000000000003fc .L0 
     /tmp/cc0rwuL0.s:720    .text:0000000000000400 .L0 
     /tmp/cc0rwuL0.s:721    .text:0000000000000400 .L0 
     /tmp/cc0rwuL0.s:726    .text:0000000000000404 .L0 
     /tmp/cc0rwuL0.s:727    .text:0000000000000404 .L0 
     /tmp/cc0rwuL0.s:731    .text:0000000000000410 .L0 
     /tmp/cc0rwuL0.s:734    .text:0000000000000414 .L0 
     /tmp/cc0rwuL0.s:748    .bss:0000000000000008 _ZN3TCB16runningTimeSliceE
     /tmp/cc0rwuL0.s:744    .bss:0000000000000000 _ZN3TCB7runningE
     /tmp/cc0rwuL0.s:741    .bss:0000000000000000 .LANCHOR0
     /tmp/cc0rwuL0.s:754    .text:0000000000000414 .L0 
GAS LISTING /tmp/cc0rwuL0.s 			page 29


     /tmp/cc0rwuL0.s:28     .text:0000000000000018 .L0 
     /tmp/cc0rwuL0.s:69     .text:0000000000000058 .L0 
     /tmp/cc0rwuL0.s:87     .text:0000000000000080 .L0 
     /tmp/cc0rwuL0.s:96     .text:0000000000000094 .L0 
     /tmp/cc0rwuL0.s:99     .text:00000000000000a0 .L0 
     /tmp/cc0rwuL0.s:102    .text:00000000000000ac .L0 
     /tmp/cc0rwuL0.s:275    .text:00000000000001a8 .L0 
     /tmp/cc0rwuL0.s:277    .text:00000000000001b4 .L0 
     /tmp/cc0rwuL0.s:386    .text:0000000000000230 .L0 
     /tmp/cc0rwuL0.s:545    .text:0000000000000318 .L0 
     /tmp/cc0rwuL0.s:573    .text:0000000000000338 .L0 
     /tmp/cc0rwuL0.s:607    .text:0000000000000364 .L0 
     /tmp/cc0rwuL0.s:648    .text:0000000000000398 .L0 
     /tmp/cc0rwuL0.s:661    .text:00000000000003a8 .L0 
     /tmp/cc0rwuL0.s:727    .text:0000000000000404 .L0 
     /tmp/cc0rwuL0.s:120    .text:00000000000000c4 .L12
     /tmp/cc0rwuL0.s:129    .text:00000000000000d4 .L13
     /tmp/cc0rwuL0.s:143    .text:00000000000000ec .L7
     /tmp/cc0rwuL0.s:157    .text:00000000000000f4 .L9
     /tmp/cc0rwuL0.s:80     .text:0000000000000074 .L5
     /tmp/cc0rwuL0.s:138    .text:00000000000000e4 .L6
     /tmp/cc0rwuL0.s:167    .text:0000000000000104 .L3
     /tmp/cc0rwuL0.s:319    .text:00000000000001ec .L19
     /tmp/cc0rwuL0.s:328    .text:00000000000001f4 .L20
     /tmp/cc0rwuL0.s:278    .text:00000000000001bc .L17
     /tmp/cc0rwuL0.s:287    .text:00000000000001c8 .L18
     /tmp/cc0rwuL0.s:418    .text:0000000000000270 .L27
     /tmp/cc0rwuL0.s:469    .text:00000000000002ac .L30
     /tmp/cc0rwuL0.s:443    .text:000000000000028c .L32
     /tmp/cc0rwuL0.s:666    .text:00000000000003b8 .L35
     /tmp/cc0rwuL0.s:533    .text:0000000000000310 .L36
     /tmp/cc0rwuL0.s:566    .text:0000000000000338 .L37
     /tmp/cc0rwuL0.s:619    .text:0000000000000378 .L39
     /tmp/cc0rwuL0.s:686    .text:00000000000003d0 .L46
     /tmp/cc0rwuL0.s:553    .text:0000000000000328 .L47
     /tmp/cc0rwuL0.s:593    .text:0000000000000358 .L41
     /tmp/cc0rwuL0.s:581    .text:0000000000000348 .L42
     /tmp/cc0rwuL0.s:638    .text:0000000000000394 .L52
     /tmp/cc0rwuL0.s:653    .text:00000000000003a8 .L53
     /tmp/cc0rwuL0.s:601    .text:0000000000000364 .L44
     /tmp/cc0rwuL0.s:613    .text:0000000000000374 .L45
     /tmp/cc0rwuL0.s:718    .text:0000000000000400 .L54
     /tmp/cc0rwuL0.s:708    .text:00000000000003f4 .L50
     /tmp/cc0rwuL0.s:695    .text:00000000000003dc .L49
     /tmp/cc0rwuL0.s:2698   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc0rwuL0.s:4699   .debug_str:00000000000009b7 .LASF200
     /tmp/cc0rwuL0.s:4469   .debug_str:00000000000002ef .LASF201
     /tmp/cc0rwuL0.s:4659   .debug_str:0000000000000884 .LASF202
     /tmp/cc0rwuL0.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc0rwuL0.s:751    .text:0000000000000414 .Letext0
     /tmp/cc0rwuL0.s:4363   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc0rwuL0.s:4631   .debug_str:00000000000007ab .LASF3
     /tmp/cc0rwuL0.s:4519   .debug_str:0000000000000453 .LASF0
     /tmp/cc0rwuL0.s:4543   .debug_str:00000000000004e7 .LASF1
     /tmp/cc0rwuL0.s:4643   .debug_str:000000000000080b .LASF2
     /tmp/cc0rwuL0.s:4651   .debug_str:0000000000000849 .LASF4
     /tmp/cc0rwuL0.s:4527   .debug_str:0000000000000478 .LASF5
GAS LISTING /tmp/cc0rwuL0.s 			page 30


     /tmp/cc0rwuL0.s:4383   .debug_str:0000000000000090 .LASF6
     /tmp/cc0rwuL0.s:4619   .debug_str:000000000000074e .LASF7
     /tmp/cc0rwuL0.s:4615   .debug_str:0000000000000733 .LASF8
     /tmp/cc0rwuL0.s:4531   .debug_str:0000000000000497 .LASF9
     /tmp/cc0rwuL0.s:4491   .debug_str:0000000000000390 .LASF10
     /tmp/cc0rwuL0.s:4501   .debug_str:00000000000003ca .LASF11
     /tmp/cc0rwuL0.s:4419   .debug_str:0000000000000198 .LASF12
     /tmp/cc0rwuL0.s:4479   .debug_str:0000000000000341 .LASF13
     /tmp/cc0rwuL0.s:4435   .debug_str:00000000000001fc .LASF14
     /tmp/cc0rwuL0.s:4417   .debug_str:0000000000000188 .LASF15
     /tmp/cc0rwuL0.s:4679   .debug_str:0000000000000918 .LASF16
     /tmp/cc0rwuL0.s:4685   .debug_str:0000000000000943 .LASF17
     /tmp/cc0rwuL0.s:4669   .debug_str:00000000000008e4 .LASF18
     /tmp/cc0rwuL0.s:4663   .debug_str:00000000000008ac .LASF121
     /tmp/cc0rwuL0.s:4621   .debug_str:0000000000000755 .LASF19
     /tmp/cc0rwuL0.s:4451   .debug_str:000000000000028b .LASF20
     /tmp/cc0rwuL0.s:4561   .debug_str:0000000000000570 .LASF21
     /tmp/cc0rwuL0.s:4385   .debug_str:0000000000000097 .LASF22
     /tmp/cc0rwuL0.s:4427   .debug_str:00000000000001c0 .LASF23
     /tmp/cc0rwuL0.s:4411   .debug_str:000000000000015f .LASF24
     /tmp/cc0rwuL0.s:4689   .debug_str:000000000000096e .LASF95
     /tmp/cc0rwuL0.s:4677   .debug_str:000000000000090b .LASF25
     /tmp/cc0rwuL0.s:4751   .debug_str:0000000000000bd4 .LASF27
     /tmp/cc0rwuL0.s:4607   .debug_str:000000000000070e .LASF203
     /tmp/cc0rwuL0.s:4423   .debug_str:00000000000001ac .LASF26
     /tmp/cc0rwuL0.s:4503   .debug_str:00000000000003d8 .LASF28
     /tmp/cc0rwuL0.s:4521   .debug_str:0000000000000460 .LASF29
     /tmp/cc0rwuL0.s:4559   .debug_str:000000000000055c .LASF31
     /tmp/cc0rwuL0.s:4549   .debug_str:000000000000050a .LASF30
     /tmp/cc0rwuL0.s:4629   .debug_str:0000000000000793 .LASF32
     /tmp/cc0rwuL0.s:4625   .debug_str:0000000000000778 .LASF33
     /tmp/cc0rwuL0.s:4563   .debug_str:0000000000000578 .LASF34
     /tmp/cc0rwuL0.s:4749   .debug_str:0000000000000bbc .LASF35
     /tmp/cc0rwuL0.s:4753   .debug_str:0000000000000bf6 .LASF36
     /tmp/cc0rwuL0.s:4495   .debug_str:00000000000003a8 .LASF37
     /tmp/cc0rwuL0.s:4667   .debug_str:00000000000008ce .LASF39
     /tmp/cc0rwuL0.s:4367   .debug_str:000000000000000b .LASF41
     /tmp/cc0rwuL0.s:4691   .debug_str:0000000000000976 .LASF43
     /tmp/cc0rwuL0.s:4721   .debug_str:0000000000000b15 .LASF38
     /tmp/cc0rwuL0.s:4603   .debug_str:00000000000006e8 .LASF40
     /tmp/cc0rwuL0.s:4719   .debug_str:0000000000000b0a .LASF42
     /tmp/cc0rwuL0.s:4481   .debug_str:0000000000000350 .LASF44
     /tmp/cc0rwuL0.s:4739   .debug_str:0000000000000b7b .LASF45
     /tmp/cc0rwuL0.s:4657   .debug_str:0000000000000869 .LASF46
     /tmp/cc0rwuL0.s:4457   .debug_str:00000000000002a0 .LASF47
     /tmp/cc0rwuL0.s:4429   .debug_str:00000000000001c9 .LASF49
     /tmp/cc0rwuL0.s:4729   .debug_str:0000000000000b55 .LASF48
     /tmp/cc0rwuL0.s:4391   .debug_str:00000000000000ce .LASF50
     /tmp/cc0rwuL0.s:4497   .debug_str:00000000000003b3 .LASF51
     /tmp/cc0rwuL0.s:4635   .debug_str:00000000000007d1 .LASF52
     /tmp/cc0rwuL0.s:4771   .debug_str:0000000000000c8d .LASF53
     /tmp/cc0rwuL0.s:4499   .debug_str:00000000000003be .LASF54
     /tmp/cc0rwuL0.s:4371   .debug_str:000000000000001d .LASF55
     /tmp/cc0rwuL0.s:4597   .debug_str:00000000000006be .LASF56
     /tmp/cc0rwuL0.s:4761   .debug_str:0000000000000c38 .LASF162
     /tmp/cc0rwuL0.s:4713   .debug_str:0000000000000add .LASF57
     /tmp/cc0rwuL0.s:4415   .debug_str:0000000000000179 .LASF58
GAS LISTING /tmp/cc0rwuL0.s 			page 31


     /tmp/cc0rwuL0.s:4767   .debug_str:0000000000000c6f .LASF59
     /tmp/cc0rwuL0.s:4727   .debug_str:0000000000000b50 .LASF60
     /tmp/cc0rwuL0.s:4703   .debug_str:0000000000000a8f .LASF61
     /tmp/cc0rwuL0.s:4697   .debug_str:00000000000009a7 .LASF62
     /tmp/cc0rwuL0.s:4613   .debug_str:0000000000000727 .LASF63
     /tmp/cc0rwuL0.s:4477   .debug_str:0000000000000334 .LASF64
     /tmp/cc0rwuL0.s:4649   .debug_str:000000000000083b .LASF65
     /tmp/cc0rwuL0.s:4735   .debug_str:0000000000000b69 .LASF66
     /tmp/cc0rwuL0.s:4581   .debug_str:0000000000000651 .LASF67
     /tmp/cc0rwuL0.s:4775   .debug_str:0000000000000cb2 .LASF68
     /tmp/cc0rwuL0.s:4695   .debug_str:000000000000099f .LASF69
     /tmp/cc0rwuL0.s:4413   .debug_str:0000000000000168 .LASF70
     /tmp/cc0rwuL0.s:4443   .debug_str:000000000000023b .LASF101
     /tmp/cc0rwuL0.s:4377   .debug_str:0000000000000051 .LASF102
     /tmp/cc0rwuL0.s:4757   .debug_str:0000000000000c20 .LASF71
     /tmp/cc0rwuL0.s:4671   .debug_str:00000000000008fa .LASF72
     /tmp/cc0rwuL0.s:4541   .debug_str:00000000000004df .LASF73
     /tmp/cc0rwuL0.s:4595   .debug_str:00000000000006ab .LASF74
     /tmp/cc0rwuL0.s:4459   .debug_str:00000000000002a9 .LASF75
     /tmp/cc0rwuL0.s:4461   .debug_str:00000000000002ae .LASF76
     /tmp/cc0rwuL0.s:4683   .debug_str:000000000000093c .LASF77
     /tmp/cc0rwuL0.s:4403   .debug_str:000000000000012b .LASF78
     /tmp/cc0rwuL0.s:4455   .debug_str:0000000000000297 .LASF79
     /tmp/cc0rwuL0.s:4587   .debug_str:000000000000066a .LASF80
     /tmp/cc0rwuL0.s:4463   .debug_str:00000000000002be .LASF81
     /tmp/cc0rwuL0.s:4379   .debug_str:0000000000000079 .LASF82
     /tmp/cc0rwuL0.s:4609   .debug_str:0000000000000713 .LASF83
     /tmp/cc0rwuL0.s:4709   .debug_str:0000000000000aae .LASF84
     /tmp/cc0rwuL0.s:4517   .debug_str:000000000000044d .LASF85
     /tmp/cc0rwuL0.s:4693   .debug_str:000000000000098e .LASF86
     /tmp/cc0rwuL0.s:4373   .debug_str:000000000000002d .LASF87
     /tmp/cc0rwuL0.s:4387   .debug_str:000000000000009f .LASF88
     /tmp/cc0rwuL0.s:4747   .debug_str:0000000000000baf .LASF89
     /tmp/cc0rwuL0.s:4717   .debug_str:0000000000000afa .LASF90
     /tmp/cc0rwuL0.s:4645   .debug_str:0000000000000819 .LASF91
     /tmp/cc0rwuL0.s:4537   .debug_str:00000000000004ca .LASF92
     /tmp/cc0rwuL0.s:4599   .debug_str:00000000000006cb .LASF93
     /tmp/cc0rwuL0.s:4593   .debug_str:000000000000069f .LASF94
     /tmp/cc0rwuL0.s:4453   .debug_str:0000000000000292 .LASF96
     /tmp/cc0rwuL0.s:4487   .debug_str:0000000000000381 .LASF97
     /tmp/cc0rwuL0.s:4421   .debug_str:00000000000001a7 .LASF98
     /tmp/cc0rwuL0.s:4471   .debug_str:00000000000002fb .LASF99
     /tmp/cc0rwuL0.s:4445   .debug_str:0000000000000249 .LASF100
     /tmp/cc0rwuL0.s:4623   .debug_str:000000000000075d .LASF103
     /tmp/cc0rwuL0.s:4723   .debug_str:0000000000000b29 .LASF104
     /tmp/cc0rwuL0.s:4539   .debug_str:00000000000004da .LASF105
     /tmp/cc0rwuL0.s:4393   .debug_str:00000000000000e0 .LASF106
     /tmp/cc0rwuL0.s:4681   .debug_str:0000000000000924 .LASF107
     /tmp/cc0rwuL0.s:4711   .debug_str:0000000000000ac5 .LASF204
     /tmp/cc0rwuL0.s:4529   .debug_str:000000000000048a .LASF108
     /tmp/cc0rwuL0.s:4439   .debug_str:0000000000000221 .LASF109
     /tmp/cc0rwuL0.s:4525   .debug_str:0000000000000470 .LASF110
     /tmp/cc0rwuL0.s:4389   .debug_str:00000000000000b2 .LASF111
     /tmp/cc0rwuL0.s:4545   .debug_str:00000000000004fa .LASF112
     /tmp/cc0rwuL0.s:4579   .debug_str:0000000000000632 .LASF113
     /tmp/cc0rwuL0.s:4409   .debug_str:0000000000000156 .LASF114
     /tmp/cc0rwuL0.s:4575   .debug_str:00000000000005f1 .LASF115
GAS LISTING /tmp/cc0rwuL0.s 			page 32


     /tmp/cc0rwuL0.s:4369   .debug_str:0000000000000016 .LASF116
     /tmp/cc0rwuL0.s:4551   .debug_str:0000000000000517 .LASF117
     /tmp/cc0rwuL0.s:4437   .debug_str:000000000000020c .LASF118
     /tmp/cc0rwuL0.s:4741   .debug_str:0000000000000b89 .LASF155
     /tmp/cc0rwuL0.s:4707   .debug_str:0000000000000aa9 .LASF119
     /tmp/cc0rwuL0.s:4743   .debug_str:0000000000000b9f .LASF120
     /tmp/cc0rwuL0.s:4473   .debug_str:0000000000000319 .LASF122
     /tmp/cc0rwuL0.s:4475   .debug_str:0000000000000328 .LASF123
     /tmp/cc0rwuL0.s:4535   .debug_str:00000000000004bd .LASF124
     /tmp/cc0rwuL0.s:4449   .debug_str:000000000000027f .LASF125
     /tmp/cc0rwuL0.s:4573   .debug_str:00000000000005dd .LASF126
     /tmp/cc0rwuL0.s:4725   .debug_str:0000000000000b2f .LASF127
     /tmp/cc0rwuL0.s:4381   .debug_str:0000000000000087 .LASF128
     /tmp/cc0rwuL0.s:4715   .debug_str:0000000000000ae5 .LASF129
     /tmp/cc0rwuL0.s:4639   .debug_str:00000000000007f7 .LASF130
     /tmp/cc0rwuL0.s:4601   .debug_str:00000000000006d3 .LASF131
     /tmp/cc0rwuL0.s:4731   .debug_str:0000000000000b5d .LASF132
     /tmp/cc0rwuL0.s:4627   .debug_str:0000000000000780 .LASF133
     /tmp/cc0rwuL0.s:4591   .debug_str:0000000000000698 .LASF134
     /tmp/cc0rwuL0.s:4533   .debug_str:00000000000004aa .LASF135
     /tmp/cc0rwuL0.s:4401   .debug_str:0000000000000123 .LASF136
     /tmp/cc0rwuL0.s:4701   .debug_str:0000000000000a7b .LASF137
     /tmp/cc0rwuL0.s:4583   .debug_str:000000000000065d .LASF138
     /tmp/cc0rwuL0.s:4483   .debug_str:0000000000000368 .LASF139
     /tmp/cc0rwuL0.s:4675   .debug_str:0000000000000904 .LASF140
     /tmp/cc0rwuL0.s:4655   .debug_str:0000000000000856 .LASF141
     /tmp/cc0rwuL0.s:4507   .debug_str:000000000000040b .LASF142
     /tmp/cc0rwuL0.s:4465   .debug_str:00000000000002cb .LASF143
     /tmp/cc0rwuL0.s:4653   .debug_str:0000000000000850 .LASF144
     /tmp/cc0rwuL0.s:4513   .debug_str:0000000000000432 .LASF145
     /tmp/cc0rwuL0.s:4523   .debug_str:000000000000046a .LASF146
     /tmp/cc0rwuL0.s:4555   .debug_str:000000000000053a .LASF147
     /tmp/cc0rwuL0.s:4365   .debug_str:0000000000000000 .LASF148
     /tmp/cc0rwuL0.s:4647   .debug_str:0000000000000823 .LASF149
     /tmp/cc0rwuL0.s:4641   .debug_str:0000000000000800 .LASF150
     /tmp/cc0rwuL0.s:4769   .debug_str:0000000000000c75 .LASF151
     /tmp/cc0rwuL0.s:4745   .debug_str:0000000000000ba5 .LASF152
     /tmp/cc0rwuL0.s:4433   .debug_str:00000000000001e6 .LASF153
     /tmp/cc0rwuL0.s:4425   .debug_str:00000000000001b6 .LASF154
     /tmp/cc0rwuL0.s:4571   .debug_str:00000000000005c7 .LASF156
     /tmp/cc0rwuL0.s:4489   .debug_str:0000000000000386 .LASF157
     /tmp/cc0rwuL0.s:4673   .debug_str:00000000000008ff .LASF158
     /tmp/cc0rwuL0.s:4585   .debug_str:0000000000000665 .LASF159
     /tmp/cc0rwuL0.s:4765   .debug_str:0000000000000c62 .LASF160
     /tmp/cc0rwuL0.s:4759   .debug_str:0000000000000c26 .LASF161
     /tmp/cc0rwuL0.s:4511   .debug_str:000000000000041a .LASF163
     /tmp/cc0rwuL0.s:4763   .debug_str:0000000000000c4e .LASF205
     /tmp/cc0rwuL0.s:4737   .debug_str:0000000000000b70 .LASF164
     /tmp/cc0rwuL0.s:4397   .debug_str:00000000000000fd .LASF165
     /tmp/cc0rwuL0.s:4553   .debug_str:0000000000000535 .LASF166
     /tmp/cc0rwuL0.s:4687   .debug_str:0000000000000959 .LASF167
     /tmp/cc0rwuL0.s:4509   .debug_str:0000000000000412 .LASF168
     /tmp/cc0rwuL0.s:4589   .debug_str:0000000000000680 .LASF169
     /tmp/cc0rwuL0.s:4547   .debug_str:0000000000000502 .LASF170
     /tmp/cc0rwuL0.s:4375   .debug_str:0000000000000035 .LASF171
     /tmp/cc0rwuL0.s:4395   .debug_str:00000000000000f5 .LASF172
     /tmp/cc0rwuL0.s:4773   .debug_str:0000000000000c9a .LASF173
GAS LISTING /tmp/cc0rwuL0.s 			page 33


     /tmp/cc0rwuL0.s:4493   .debug_str:00000000000003a0 .LASF174
     /tmp/cc0rwuL0.s:4447   .debug_str:0000000000000263 .LASF175
     /tmp/cc0rwuL0.s:4705   .debug_str:0000000000000a99 .LASF176
     /tmp/cc0rwuL0.s:4633   .debug_str:00000000000007b0 .LASF177
     /tmp/cc0rwuL0.s:4557   .debug_str:000000000000054c .LASF178
     /tmp/cc0rwuL0.s:4577   .debug_str:000000000000060d .LASF179
     /tmp/cc0rwuL0.s:4405   .debug_str:000000000000013d .LASF180
     /tmp/cc0rwuL0.s:4569   .debug_str:00000000000005ac .LASF181
     /tmp/cc0rwuL0.s:489    .text:00000000000002c0 .LFB59
     /tmp/cc0rwuL0.s:735    .text:0000000000000414 .LFE59
     /tmp/cc0rwuL0.s:4755   .debug_str:0000000000000c19 .LASF184
     /tmp/cc0rwuL0.s:3945   .debug_loc:0000000000000000 .LLST20
     /tmp/cc0rwuL0.s:4399   .debug_str:000000000000011e .LASF182
     /tmp/cc0rwuL0.s:3967   .debug_loc:000000000000005f .LLST21
     /tmp/cc0rwuL0.s:4777   .debug_str:0000000000000cc1 .LASF183
     /tmp/cc0rwuL0.s:4016   .debug_loc:0000000000000142 .LLST22
     /tmp/cc0rwuL0.s:521    .text:00000000000002fc .LBB52
     /tmp/cc0rwuL0.s:526    .text:00000000000002fc .LBE52
     /tmp/cc0rwuL0.s:540    .text:0000000000000318 .LBB54
     /tmp/cc0rwuL0.s:549    .text:0000000000000324 .LBE54
     /tmp/cc0rwuL0.s:569    .text:0000000000000338 .LBB56
     /tmp/cc0rwuL0.s:577    .text:0000000000000344 .LBE56
     /tmp/cc0rwuL0.s:603    .text:0000000000000364 .LBB58
     /tmp/cc0rwuL0.s:610    .text:0000000000000370 .LBE58
     /tmp/cc0rwuL0.s:644    .text:0000000000000398 .LBB60
     /tmp/cc0rwuL0.s:655    .text:00000000000003a8 .LBE60
     /tmp/cc0rwuL0.s:4053   .debug_loc:00000000000001ed .LLST23
     /tmp/cc0rwuL0.s:657    .text:00000000000003a8 .LBB62
     /tmp/cc0rwuL0.s:668    .text:00000000000003b8 .LBE62
     /tmp/cc0rwuL0.s:4060   .debug_loc:0000000000000210 .LLST24
     /tmp/cc0rwuL0.s:674    .text:00000000000003bc .LBB64
     /tmp/cc0rwuL0.s:678    .text:00000000000003bc .LBE64
     /tmp/cc0rwuL0.s:723    .text:0000000000000404 .LBB66
     /tmp/cc0rwuL0.s:733    .text:0000000000000414 .LBE66
     /tmp/cc0rwuL0.s:531    .text:000000000000030c .LVL43
     /tmp/cc0rwuL0.s:683    .text:00000000000003cc .LVL61
     /tmp/cc0rwuL0.s:427    .text:0000000000000274 .LFB58
     /tmp/cc0rwuL0.s:483    .text:00000000000002c0 .LFE58
     /tmp/cc0rwuL0.s:4067   .debug_loc:0000000000000233 .LLST17
     /tmp/cc0rwuL0.s:456    .text:0000000000000294 .LBB51
     /tmp/cc0rwuL0.s:466    .text:00000000000002a8 .LBE51
     /tmp/cc0rwuL0.s:4085   .debug_loc:000000000000027f .LLST19
     /tmp/cc0rwuL0.s:461    .text:00000000000002a0 .LVL38
     /tmp/cc0rwuL0.s:465    .text:00000000000002a8 .LVL39
     /tmp/cc0rwuL0.s:446    .text:000000000000028c .LBB49
     /tmp/cc0rwuL0.s:453    .text:0000000000000290 .LBE49
     /tmp/cc0rwuL0.s:4092   .debug_loc:00000000000002a2 .LLST18
     /tmp/cc0rwuL0.s:375    .text:0000000000000224 .LFB57
     /tmp/cc0rwuL0.s:421    .text:0000000000000274 .LFE57
     /tmp/cc0rwuL0.s:4101   .debug_loc:00000000000002c8 .LLST16
     /tmp/cc0rwuL0.s:407    .text:0000000000000260 .LVL33
     /tmp/cc0rwuL0.s:343    .text:00000000000001fc .LFB56
     /tmp/cc0rwuL0.s:369    .text:0000000000000224 .LFE56
     /tmp/cc0rwuL0.s:4125   .debug_loc:000000000000032a .LLST15
     /tmp/cc0rwuL0.s:358    .text:0000000000000214 .LVL30
     /tmp/cc0rwuL0.s:187    .text:0000000000000118 .LFB55
     /tmp/cc0rwuL0.s:213    .text:0000000000000140 .LFE55
GAS LISTING /tmp/cc0rwuL0.s 			page 34


     /tmp/cc0rwuL0.s:4441   .debug_str:0000000000000236 .LASF185
     /tmp/cc0rwuL0.s:4139   .debug_loc:0000000000000363 .LLST3
     /tmp/cc0rwuL0.s:202    .text:0000000000000130 .LVL14
     /tmp/cc0rwuL0.s:10     .text:0000000000000000 .LFB54
     /tmp/cc0rwuL0.s:48     .text:0000000000000044 .LFE54
     /tmp/cc0rwuL0.s:25     .text:0000000000000018 .LVL0
     /tmp/cc0rwuL0.s:37     .text:0000000000000034 .LVL2
     /tmp/cc0rwuL0.s:54     .text:0000000000000044 .LFB53
     /tmp/cc0rwuL0.s:181    .text:0000000000000118 .LFE53
     /tmp/cc0rwuL0.s:4153   .debug_loc:000000000000039c .LLST0
     /tmp/cc0rwuL0.s:106    .text:00000000000000b8 .LBB37
     /tmp/cc0rwuL0.s:122    .text:00000000000000c4 .LBE37
     /tmp/cc0rwuL0.s:4160   .debug_loc:00000000000003bf .LLST1
     /tmp/cc0rwuL0.s:146    .text:00000000000000ec .LBB39
     /tmp/cc0rwuL0.s:159    .text:00000000000000f4 .LBE39
     /tmp/cc0rwuL0.s:4169   .debug_loc:00000000000003e5 .LLST2
     /tmp/cc0rwuL0.s:84     .text:000000000000007c .LVL4
     /tmp/cc0rwuL0.s:127    .text:00000000000000d0 .LVL7
     /tmp/cc0rwuL0.s:137    .text:00000000000000e4 .LVL8
     /tmp/cc0rwuL0.s:166    .text:0000000000000104 .LVL11
     /tmp/cc0rwuL0.s:219    .text:0000000000000140 .LFB52
     /tmp/cc0rwuL0.s:337    .text:00000000000001fc .LFE52
     /tmp/cc0rwuL0.s:4611   .debug_str:000000000000071e .LASF186
     /tmp/cc0rwuL0.s:4178   .debug_loc:000000000000040b .LLST4
     /tmp/cc0rwuL0.s:4198   .debug_loc:0000000000000468 .LLST5
     /tmp/cc0rwuL0.s:4218   .debug_loc:00000000000004c5 .LLST6
     /tmp/cc0rwuL0.s:4661   .debug_str:00000000000008a2 .LASF187
     /tmp/cc0rwuL0.s:4243   .debug_loc:0000000000000536 .LLST7
     /tmp/cc0rwuL0.s:246    .text:0000000000000174 .LBB41
     /tmp/cc0rwuL0.s:4349   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc0rwuL0.s:4250   .debug_loc:0000000000000559 .LLST8
     /tmp/cc0rwuL0.s:4271   .debug_loc:00000000000005b7 .LLST9
     /tmp/cc0rwuL0.s:4282   .debug_loc:00000000000005ed .LLST10
     /tmp/cc0rwuL0.s:4293   .debug_loc:0000000000000623 .LLST11
     /tmp/cc0rwuL0.s:259    .text:0000000000000194 .LBB43
     /tmp/cc0rwuL0.s:267    .text:000000000000019c .LBE43
     /tmp/cc0rwuL0.s:4304   .debug_loc:0000000000000659 .LLST12
     /tmp/cc0rwuL0.s:4313   .debug_loc:000000000000067f .LLST13
     /tmp/cc0rwuL0.s:4324   .debug_loc:00000000000006b5 .LLST14
     /tmp/cc0rwuL0.s:245    .text:0000000000000174 .LVL17
     /tmp/cc0rwuL0.s:4485   .debug_str:000000000000037c .LASF189
     /tmp/cc0rwuL0.s:4733   .debug_str:0000000000000b64 .LASF188
     /tmp/cc0rwuL0.s:4617   .debug_str:0000000000000746 .LASF190
     /tmp/cc0rwuL0.s:4407   .debug_str:000000000000014e .LASF191
     /tmp/cc0rwuL0.s:4567   .debug_str:0000000000000596 .LASF192
     /tmp/cc0rwuL0.s:4665   .debug_str:00000000000008b9 .LASF193
     /tmp/cc0rwuL0.s:4637   .debug_str:00000000000007e9 .LASF194
     /tmp/cc0rwuL0.s:4515   .debug_str:0000000000000444 .LASF196
     /tmp/cc0rwuL0.s:4505   .debug_str:00000000000003fd .LASF195
     /tmp/cc0rwuL0.s:4431   .debug_str:00000000000001dc .LASF197
     /tmp/cc0rwuL0.s:4467   .debug_str:00000000000002de .LASF198
     /tmp/cc0rwuL0.s:4565   .debug_str:000000000000058a .LASF199
     /tmp/cc0rwuL0.s:4605   .debug_str:0000000000000707 .LASF206
     /tmp/cc0rwuL0.s:492    .text:00000000000002c0 .LVL41
     /tmp/cc0rwuL0.s:520    .text:00000000000002fc .LVL42
     /tmp/cc0rwuL0.s:633    .text:000000000000038c .LVL55
     /tmp/cc0rwuL0.s:637    .text:0000000000000394 .LVL56
GAS LISTING /tmp/cc0rwuL0.s 			page 35


     /tmp/cc0rwuL0.s:539    .text:0000000000000318 .LVL44
     /tmp/cc0rwuL0.s:552    .text:0000000000000328 .LVL46
     /tmp/cc0rwuL0.s:557    .text:000000000000032c .LVL47
     /tmp/cc0rwuL0.s:562    .text:0000000000000334 .LVL48
     /tmp/cc0rwuL0.s:565    .text:0000000000000338 .LVL49
     /tmp/cc0rwuL0.s:580    .text:0000000000000348 .LVL51
     /tmp/cc0rwuL0.s:585    .text:000000000000034c .LVL52
     /tmp/cc0rwuL0.s:590    .text:0000000000000354 .LVL53
     /tmp/cc0rwuL0.s:618    .text:0000000000000378 .LVL54
     /tmp/cc0rwuL0.s:665    .text:00000000000003b8 .LVL59
     /tmp/cc0rwuL0.s:685    .text:00000000000003d0 .LVL62
     /tmp/cc0rwuL0.s:694    .text:00000000000003dc .LVL63
     /tmp/cc0rwuL0.s:717    .text:0000000000000400 .LVL64
     /tmp/cc0rwuL0.s:728    .text:000000000000040c .LVL66
     /tmp/cc0rwuL0.s:547    .text:0000000000000324 .LVL45
     /tmp/cc0rwuL0.s:575    .text:0000000000000344 .LVL50
     /tmp/cc0rwuL0.s:643    .text:0000000000000398 .LVL57
     /tmp/cc0rwuL0.s:652    .text:00000000000003a8 .LVL58
     /tmp/cc0rwuL0.s:430    .text:0000000000000274 .LVL35
     /tmp/cc0rwuL0.s:442    .text:000000000000028c .LVL36
     /tmp/cc0rwuL0.s:478    .text:00000000000002b8 .LVL40
     /tmp/cc0rwuL0.s:451    .text:0000000000000290 .LVL37
     /tmp/cc0rwuL0.s:378    .text:0000000000000224 .LVL31
     /tmp/cc0rwuL0.s:405    .text:0000000000000258 .LVL32
     /tmp/cc0rwuL0.s:417    .text:0000000000000270 .LVL34
     /tmp/cc0rwuL0.s:346    .text:00000000000001fc .LVL29
     /tmp/cc0rwuL0.s:190    .text:0000000000000118 .LVL13
     /tmp/cc0rwuL0.s:70     .text:0000000000000060 .LVL3
     /tmp/cc0rwuL0.s:176    .text:0000000000000110 .LVL12
     /tmp/cc0rwuL0.s:105    .text:00000000000000b8 .LVL5
     /tmp/cc0rwuL0.s:119    .text:00000000000000c4 .LVL6
     /tmp/cc0rwuL0.s:145    .text:00000000000000ec .LVL9
     /tmp/cc0rwuL0.s:155    .text:00000000000000f4 .LVL10
     /tmp/cc0rwuL0.s:222    .text:0000000000000140 .LVL15
     /tmp/cc0rwuL0.s:243    .text:000000000000016c .LVL16
     /tmp/cc0rwuL0.s:311    .text:00000000000001e0 .LVL24
     /tmp/cc0rwuL0.s:318    .text:00000000000001ec .LVL26
     /tmp/cc0rwuL0.s:314    .text:00000000000001e4 .LVL25
     /tmp/cc0rwuL0.s:286    .text:00000000000001c8 .LVL21
     /tmp/cc0rwuL0.s:331    .text:00000000000001f8 .LVL28
     /tmp/cc0rwuL0.s:294    .text:00000000000001d0 .LVL22
     /tmp/cc0rwuL0.s:258    .text:0000000000000194 .LVL18
     /tmp/cc0rwuL0.s:265    .text:000000000000019c .LVL19
     /tmp/cc0rwuL0.s:279    .text:00000000000001bc .LVL20
     /tmp/cc0rwuL0.s:327    .text:00000000000001f4 .LVL27
     /tmp/cc0rwuL0.s:308    .text:00000000000001dc .LVL23
     /tmp/cc0rwuL0.s:755    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc0rwuL0.s:297    .text:00000000000001d0 .LBE41
     /tmp/cc0rwuL0.s:321    .text:00000000000001ec .LBB48
     /tmp/cc0rwuL0.s:335    .text:00000000000001fc .LBE48
     /tmp/cc0rwuL0.s:272    .text:00000000000001a8 .LBB45
     /tmp/cc0rwuL0.s:295    .text:00000000000001d0 .LBE45
     /tmp/cc0rwuL0.s:323    .text:00000000000001ec .LBB46
     /tmp/cc0rwuL0.s:333    .text:00000000000001fc .LBE46

UNDEFINED SYMBOLS
_ZN5Riscv19returnFromInterruptEv
GAS LISTING /tmp/cc0rwuL0.s 			page 36


_Z11thread_exitv
_ZN9Scheduler3getEv
main
_Z22kernelConsumerFunctionPv
_Z4idlePv
_ZN9Scheduler3putEP3TCB
_ZdlPv
_ZN3TCB13contextSwitchEPNS_7ContextES1_
_Z9mem_allocm
_Z8mem_freePv
_ZN11ThreadQueue7putLastEP3TCB
_ZN11ThreadQueue8getFirstEv
_ZN11ThreadQueue6removeEP3TCB
_ZN9Scheduler12sleepingHeadE
_ZN9Scheduler4headE
_ZN9Scheduler4tailE
